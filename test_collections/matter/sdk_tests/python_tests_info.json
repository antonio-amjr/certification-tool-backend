{
    "sdk_sha": "a82e43e06e35c707f9016c38ee83712c2ab58966",
    "tests": [
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_1",
            "function": "test_TC_SC_8_1",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_2",
            "function": "test_TC_SC_8_2",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that the session established with DUT allows large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_3",
            "function": "test_TC_SC_8_3",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH closes the TCP connection with DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Verifying that the secure session with DUT is inactive.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_4",
            "function": "test_TC_SC_8_4",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH closes the TCP connection with DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Verifyng that the secure session with DUT is inactive.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH re-initiates CASE session establishment over TCP with DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Verifying that the large-payload secure session with DUT is active.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_5",
            "function": "test_TC_SC_8_5",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verifying that the large-payload secure session with DUT is active.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH initiates an InvokeCommandRequest with DUT over the established session.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verifying successful invocation with DUT over the established session without any error.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_6",
            "function": "test_TC_SC_8_6",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verifying that the large-payload secure session with DUT is active.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH initiates a Read of all attributes of all clusters of DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verifying wildcard read was successful with DUT over the established session without any error.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TCP_Tests",
            "desc": "test_TC_SC_8_7",
            "function": "test_TC_SC_8_7",
            "path": "sdk/TCP_Tests",
            "pics": [
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH initiates a CASE session establishment with DUT, requesting a session supporting large payloads.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verifying that a session is set up with an underlying TCP connection established with DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verifying that the large-payload secure session with DUT is active.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH initiates a regularly-sized InvokeCommandRequest with DUT, specifying that either a MRP or TCP-based session is usable.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verifying successful invocation with DUT over the established TCP-based session without any error.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_ACE_1_2",
            "desc": "test_TC_ACE_1_2",
            "function": "test_TC_ACE_1_2",
            "path": "sdk/TC_ACE_1_2",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_ACE_1_3",
            "desc": "[TC-ACE-1.3] Subjects",
            "function": "test_TC_ACE_1_3",
            "path": "sdk/TC_ACE_1_3",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH0 writes ACL all view on PIXIT.ACE.TESTENDPOINT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH0 writes ACL TH1 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH0 writes ACL TH2 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH0 writes ACL TH3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH0 writes ACL TH1 TH2 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH0 writes ACL TH1 TH3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH0 writes ACL TH2 TH3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH0 writes ACL TH1 TH2 TH3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH0 writes ACL cat1v1 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH0 writes ACL cat1v2 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH0 writes ACL cat1v3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 44
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 45
                },
                {
                    "description": "TH0 writes ACL cat2v1 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 46
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 47
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 48
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 49
                },
                {
                    "description": "TH0 writes ACL cat2v2 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 50
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 51
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 52
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 53
                },
                {
                    "description": "TH0 writes ACL cat2v3 view on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 54
                },
                {
                    "description": "TH1 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 55
                },
                {
                    "description": "TH2 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 56
                },
                {
                    "description": "TH3 reads EP0 descriptor - expect UNSUPPORTED_ACCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 57
                },
                {
                    "description": "TH0 writes ACL back to default",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 58
                }
            ]
        },
        {
            "class_name": "TC_ACE_1_4",
            "desc": "test_TC_ACE_1_4",
            "function": "test_TC_ACE_1_4",
            "path": "sdk/TC_ACE_1_4",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_ACE_1_5",
            "desc": "test_TC_ACE_1_5",
            "function": "test_TC_ACE_1_5",
            "path": "sdk/TC_ACE_1_5",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_10",
            "desc": "[TC-ACL-2.10] Persistence",
            "function": "test_TC_ACL_2_10",
            "path": "sdk/TC_ACL_2_10",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 puts DUT into commissioning mode, TH2 commissions DUT using admin node ID",
                    "expectation": "DUT is commissioned on TH2 fabric",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F2",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlExtensionStruct containing 2 elements",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlExtensionStruct containing 2 elements",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 elements; element data field is D_OK_EMPTY",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element; element data field is D_OK_SINGLE",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Reboot the DUT",
                    "expectation": "DUT is rebooted",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 2 elements; must not contain an element with fabricIndex F2",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element; MUST NOT contain an element with FabricIndex `F2` or Data `D_OK_SINGLE`",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 2 elements; must not contain an element with fabricIndex F1",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element; MUST NOT contain an element with FabricIndex `F1` or Data `D_OK_EMPTY`",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 removes fabric `F2` from DUT",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 2 elements, and MUST NOT contain an element with FabricIndex `F2`",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element; MUST NOT contain an element with FabricIndex `F2` or Data `D_OK_SINGLE`",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster back to admin-only ACL entry",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 17
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_11",
            "desc": "[TC-ACL-2.11] Verification of Managed Device feature",
            "function": "test_TC_ACL_2_11",
            "path": "sdk/TC_ACL_2_11",
            "pics": [
                "ACL.S.F01"
            ],
            "steps": [
                {
                    "description": "Commissioning (already done) and precondition checks",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster CommissioningARL attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ARL attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "For each entry in ARL, iterate over each restriction and attempt access the restriction's ID on the Endpoint and Cluster in the ARL entry.",
                    "expectation": "If the restriction is Type AttributeAccessForbidden, read the restriction's attribute ID and verify the response is ACCESS_RESTRICTED.If the restriction is Type AttributeWriteForbidden, write restriction's the attribute ID and verify the response is ACCESS_RESTRICTED.If the restriction is Type CommandForbidden, invoke the restriction's command ID and verify the response is ACCESS_RESTRICTED.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Ensure protected attributes are accessible",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 sends DUT Endpoint 0 AccessControl cluster command ReviewFabricRestrictions",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Wait for up to 1 hour. Follow instructions provided by device maker to remove all access restrictions",
                    "expectation": "AccessRestrictionReviewUpdate event is received",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ARL attribute",
                    "expectation": "ARL is empty",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_2",
            "desc": "[TC-ACL-2.2] Cluster endpoint",
            "function": "test_TC_ACL_2_2",
            "path": "sdk/TC_ACL_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Descriptor cluster ServerList attribute from Endpoint 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Descriptor cluster ServerList attribute from every Endpoint except 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_3",
            "desc": "[TC-ACL-2.3] Multiple fabrics test",
            "function": "test_TC_ACL_2_3",
            "path": "sdk/TC_ACL_2_3",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is an empty list",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_EMPTY",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_EMPTY, fabric index is F1",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_SINGLE",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_SINGLE, fabric index is F1",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_FULL",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_OK_FULL, fabric index is F1",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_LENGTH",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_STRUCT",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_LIST",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_ELEM",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_OVERFLOW",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_UNDERFLOW",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element struct data field: D_BAD_NONE",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 2 elements struct data field: D_OK_EMPTY, D_OK_SINGLE",
                    "expectation": "Result is CONSTRAINT_ERROR (0x87) for the entire list, even the first valid struct should be rejected",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is Success, AccessControlExtensionStruct containing 1 element. When using legacy encoding, value is struct with data field: D_OK_EMPTY from test step 17. When using new list method, value is struct with data field: D_OK_FULL from test step 8, as the last successfully written extension.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is an empty list",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is Success, value is an empty list",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Re-run the test using the legacy list writing mechanism, where the client issues a series of AttributeDataIBs, with the first containing a path to the list itself and Data that is empty array, which signals clearing the list, and subsequent AttributeDataIBs containing updates.",
                    "expectation": "Test succeeds with legacy list encoding mechanism",
                    "is_commissioning": false,
                    "test_plan_number": 21
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_4",
            "desc": "[TC-ACL-2.4] ACL ",
            "function": "test_TC_ACL_2_4",
            "path": "sdk/TC_ACL_2_4",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID N1",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute and saves as acl_original",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 1 element with admin entry N1",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with 3 elements:\n1. Admin entry (N1, privilege: Administer, authMode: CASE)\n2. View entry (subjects: [111, 222, 333, 444], privilege: View, authMode: Group, targets: [{Cluster: 11}, {Endpoint: 22}])\n3. Operate entry (subjects: [555, 666, 777, 888], privilege: Operate, authMode: Group, targets: [{Cluster: 55}, {Endpoint: 66}])",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 3 elements",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with modified entries (N1 admin, N2 manage, N3 admin)",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 3 elements with updated privileges",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with updated entries",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 3 elements with updated entries",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with null subjects in the last 2 elements ",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 3 elements with null subjects in the last 2 elements",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with null targets",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 3 elements with null targets",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with 2 elements",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 2 elements",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with ProxyView privilege",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 2 elements with ProxyView privilege for the last element",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster SubjectsPerAccessControlEntry attribute",
                    "expectation": "Result is SUCCESS, value is stored as MAXSUBJECTS",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with max subjects",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value contains MAXSUBJECTS random node IDs",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with 4 valid CATs as subjects in the last entry",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 2 elements with last element having 4 valid CATs as subjects",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster TargetsPerAccessControlEntry attribute",
                    "expectation": "Result is SUCCESS, value is stored as MAXTARGETS",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with max targets",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value contains MAXTARGETS targets",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntriesPerFabric attribute",
                    "expectation": "Result is SUCCESS, value is stored as MAXENTRIES",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute with a list of MAXENTRIES elements",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing MAXENTRIES elements",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH1 resets DUT Endpoint 0 AccessControl cluster ACL attribute, writing it with acl_original",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing PASE auth mode",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected ",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value contains only the admin entry",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid combination of Group auth mode with admin privilege",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid privilege",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid auth mode",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid subject ID 0",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing max node ID",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing an invalid CAT as subject",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid Group Node ID",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing empty target",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid cluster ID",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid endpoint ID",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing invalid device type",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing an invalid target entry containing both endpoint and device type fields in the same entry",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute testing an invalid target entry containing endpoint, device type and cluster fields in the same entry",
                    "expectation": "Result is CONSTRAINT_ERROR.  Second invalid element is rejected",
                    "is_commissioning": false,
                    "test_plan_number": 44
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute value is acl_original",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 45
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_5",
            "desc": "[TC-ACL-2.5]  AccessControlExtensionChanged event",
            "function": "test_TC_ACL_2_5",
            "path": "sdk/TC_ACL_2_5",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is a valid index",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged events and create subscription for new events",
                    "expectation": "Result is SUCCESS, value is empty list, new event subscription is created",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged events",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionChanged containing 1 element",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged events",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionChanged containing 1 element if new list method is used; If legacy list method is used, the event should be REMOVED and ADDED",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element",
                    "expectation": "Result is 0x87 (CONSTRAINT_ERROR)-Data value exceeds maximum length.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "expectation": "Result is SUCCESS, value is empty list (received ReportData Message should have no/empty EventReportIB list) if new list method is used; If legacy list method is used, the event should be REMOVED",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 2 elements",
                    "expectation": "Result is 0x87 (CONSTRAINT_ERROR)-as there are more than 1 entry associated with the given accessing fabric index in the extension list",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "expectation": "Result is SUCCESS, value is empty list (received ReportData Message should have no/empty EventReportIB list) since the entire list of Test Step 10 was rejected if new write list method is used, else then the legacy list method is used and the event ADDED.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is an empty list",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionChanged containing at least 1 new element if new write list method is used LatestValue Field should be D_OK_EMPTY, else then the legacy list method is used value should be D_OK_SINGLE.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Re-run the test using the legacy list writing mechanism, where the client issues a series of AttributeDataIBs, with the first containing a path to the list itself and Data that is empty array, which signals clearing the list, and subsequent AttributeDataIBs containing updates.",
                    "expectation": "Test succeeds with legacy list encoding mechanism",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_6",
            "desc": "[TC-ACL-2.6] AccessControlEntryChanged event",
            "function": "test_TC_ACL_2_6",
            "path": "sdk/TC_ACL_2_6",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID N1",
                    "expectation": "DUT is commissioned on TH1 fabric",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "Result is SUCCESS value is list of AccessControlEntryChangedEvent events containing 1 element",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlEntryStruct containing 2 elements",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "Result is SUCCESS, value is a list of AccessControlEntryChanged events containing 2 new elements, or 3 when using the legacy list write method",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlEntryStruct containing 2 elements. The first item is valid, the second item is invalid due to group ID 0 being used, which is illegal.",
                    "expectation": "Result is CONSTRAINT_ERROR",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "value MUST NOT contain an AccessControlEntryChanged entry corresponding to the second invalid entry in step 6.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Resetting ACL events to only admin/case, then re-running the test using the legacy list writing mechanism, where the client issues a series of AttributeDataIBs, with the first containing a path to the list itself and Data that is empty array, which signals clearing the list, and subsequent AttributeDataIBs containing updates.",
                    "expectation": "Test succeeds with legacy list encoding mechanism",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_7",
            "desc": "[TC-ACL-2.7] Multiple fabrics test",
            "function": "test_TC_ACL_2_7",
            "path": "sdk/TC_ACL_2_7",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 puts DUT into commissioning mode, TH2 commissions DUT using admin node ID",
                    "expectation": "DUT is commissioned on TH2 fabric",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F2",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is list of AccessControlExtensionStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute with both fabricFiltered True and False",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element when fabric filtered",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster Extension attribute with both fabricFiltered True and False",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionStruct containing 1 element when fabric filtered",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event with both fabricFiltered True and False",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionChanged containing 1 element when fabric filtered",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event with both fabricFiltered True and False",
                    "expectation": "Result is SUCCESS, value is list of AccessControlExtensionChanged containing 1 element when fabric filtered",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR1 sends RemoveFabric for TH2 fabric command to DUT_CE",
                    "expectation": "Verify DUT_CE responses with NOCResponse with a StatusCode OK",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_8",
            "desc": "[TC-ACL-2.8] ACL multi-fabric",
            "function": "test_TC_ACL_2_8",
            "path": "sdk/TC_ACL_2_8",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID N1",
                    "expectation": "DUT is commissioned on TH1 fabric",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 puts DUT into commissioning mode, TH2 commissions DUT using admin node ID N2",
                    "expectation": "DUT is commissioned on TH2 fabric",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "expectation": "Result is SUCCESS, value is stored as F2",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlEntryStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute value is list of AccessControlEntryStruct containing 1 element",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 1 element, and MUST NOT contain an element with FabricIndex F2",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryStruct containing 1 element, and MUST NOT contain an element with FabricIndex F1",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryChanged containing 2 elements if new list encoding is used, 3 elements if legacy list encoding is used, and MUST NOT contain any element with FabricIndex F2",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "Result is SUCCESS, value is list of AccessControlEntryChanged containing 2 elements if new list encoding is used, 3 elements if legacy list encoding is used, and MUST NOT contain any element with FabricIndex F1",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Re-run the test using the legacy list writing mechanism, where the client issues a series of AttributeDataIBs, with the first containing a path to the list itself and Data that is empty array, which signals clearing the list, and subsequent AttributeDataIBs containing updates.",
                    "expectation": "Test succeeds with legacy list encoding mechanism",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_ACL_2_9",
            "desc": "[TC-ACL-2.9] Cluster access",
            "function": "test_TC_ACL_2_9",
            "path": "sdk/TC_ACL_2_9",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 commissions DUT using admin node ID N1",
                    "expectation": "DUT is commissioned on TH1 fabric",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 opens commissioning window on DUT, TH2 commissions DUT using admin node ID N2",
                    "expectation": "DUT is commissioned on TH2 fabric",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlEntryStruct containing 1 element giving TH2 Manage access to the node",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute, value is list of AccessControlEntryStruct containing 1 element",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH2 writes DUT Endpoint 0 AccessControl cluster Extension attribute, value is an empty list",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster SubjectsPerAccessControlEntry attribute",
                    "expectation": "Result is SUCCESS,value is an integer with value 4 or greater.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster TargetsPerAccessControlEntry attribute",
                    "expectation": "Result is SUCCESS,value is an integer with value 3 or greater.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlEntriesPerFabric attribute",
                    "expectation": "Result is SUCCESS, value is an integer with value 4 or greater.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "expectation": "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH2 reads the CurrentFabricIndex attribute from the Operational Credentials cluster and saves as th2_idx",
                    "expectation": "th2_idx set to value for CurrentFabricIndex attribute from TH2",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 sends the RemoveFabric command to the DUT with the FabricIndex set to th2_idx",
                    "expectation": "TH1 removes TH2 fabric using th2_idx",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_1",
            "desc": "[TC-AVSM-2.1] Attributes with Server as DUT",
            "function": "test_TC_AVSM_2_1",
            "path": "sdk/TC_AVSM_2_1",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads MaxConcurrentEncoders attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads MaxEncodedPixelRate attribute.",
                    "expectation": "Verify that the DUT response contains an uint32 value.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads VideoSensorParams attribute.",
                    "expectation": "Verify that the DUT response contains a VideoSensorParamsStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads NightVisionUsesInfrared attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads MinViewportResolution attribute.",
                    "expectation": "Verify that the DUT response contains a VideoResolutionStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads RateDistortionTradeOffPoints attribute.",
                    "expectation": "Verify that the DUT response contains a list of RateDistortionTradeOffPointsStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads MaxContentBufferSize attribute.",
                    "expectation": "Verify that the DUT response contains an uint32 value.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads MicrophoneCapabilities attribute.",
                    "expectation": "Verify that the DUT response contains an AudioCapabilitiesStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads SpeakerCapabilities attribute.",
                    "expectation": "Verify that the DUT response contains an AudioCapabilitiesStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads TwoWayTalkSupport attribute.",
                    "expectation": "Verify that the DUT response contains a TwoWayTalkSupportTypeEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads SnapshotCapabilities attribute.",
                    "expectation": "Verify that the DUT response contains a list of SnapshotCapabilitiesStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads MaxNetworkBandwidth attribute.",
                    "expectation": "Verify that the DUT response contains an uint32 value.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads CurrentFrameRate attribute.",
                    "expectation": "Verify that the DUT response contains an uint16 value.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH reads HDRModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH reads SupportedStreamUsages attribute.",
                    "expectation": "Verify that the DUT response contains a list of StreamUsageEnum entries.",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute.",
                    "expectation": "Verify that the DUT response contains a list of VideoStreamStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute.",
                    "expectation": "Verify that the DUT response contains a list of AudioStreamStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute.",
                    "expectation": "Verify that the DUT response contains a list of SnapshotStreamStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute.",
                    "expectation": "Verify that the DUT response contains a list of StreamUsageEnum entries.",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH reads SoftRecordingPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH reads SoftLivestreamPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH reads HardPrivacyModeOn attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH reads NightVision attribute.",
                    "expectation": "Verify that the DUT response contains a TriStateAutoEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH reads NightVisionIllum attribute.",
                    "expectation": "Verify that the DUT response contains a TriStateAutoEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH reads Viewport attribute.",
                    "expectation": "Verify that the DUT response contains a ViewportStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH reads SpeakerMuted attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH reads SpeakerVolumeLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH reads SpeakerMaxLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH reads SpeakerMinLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH reads MicrophoneMuted attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH reads MicrophoneVolumeLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH reads MicrophoneMaxLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH reads MicrophoneMinLevel attribute.",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH reads MicrophoneAGCEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH reads ImageRotation attribute.",
                    "expectation": "Verify that the DUT response contains an uint16 value.",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH reads ImageFlipHorizontal attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH reads ImageFlipVertical attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH reads LocalVideoRecordingEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH reads LocalSnapshotRecordingEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH reads StatusLightEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH reads StatusLightBrightness attribute.",
                    "expectation": "Verify that the DUT response contains a ThreeLevelAutoEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 42
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_10",
            "desc": "[TC-AVSM-2.10] Validate CaptureSnapshot Functionality with Server as DUT",
            "function": "test_TC_AVSM_2_10",
            "path": "sdk/TC_AVSM_2_10",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned, stream allocated",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify SNP is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the CaptureSnapshot command with SnapshotStreamID set to aStreamID.",
                    "expectation": "DUT responds with CaptureSnapshotResponse command with the image in the Data field and the codec in the ImageCodec field.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the CaptureSnapshot command with SnapshotStreamID set to aStreamID+1.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the CaptureSnapshot command with SnapshotStreamID set to Null.",
                    "expectation": "DUT responds with CaptureSnapshotResponse command with the image in the Data field.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "If DUT supports Privacy feature, TH writes SoftLivestreamPrivacyModeEnabled = true on DUT",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the CaptureSnapshot command with SnapshotStreamID set to aStreamID.",
                    "expectation": "DUT responds with INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the SnapshotStreamDeallocate command with SnapshotStreamID set to aStreamID.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the CaptureSnapshot command with SnapshotStreamID set to Null.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_11",
            "desc": "[TC-AVSM-2.11] Validate SetStreamPriorities Functionality with Server as DUT",
            "function": "test_TC_AVSM_2_11",
            "path": "sdk/TC_AVSM_2_11",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1. Store StreamID as aStreamID.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads SupportedStreamUsages attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aSupportedStreamUsages.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the SetStreamPriorities command with StreamPriorities set as a subset of aSupportedStreamUsages.",
                    "expectation": "DUT responds with a INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SnapshotStreamDeallocate command with SnapshotStreamID set to aStreamID.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the SetStreamPriorities command with StreamPriorities set as a subset of aSupportedStreamUsages.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify the list is the same as set in StreamPriorities in step 7.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends the SetStreamPriorities command with StreamPriorities containing a StreamUsage not in aSupportedStreamUsages.",
                    "expectation": "DUT responds with a DYNAMIC_CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the SetStreamPriorities command with StreamPriorities containing duplicate StreamUsage values from aSupportedStreamUsages.",
                    "expectation": "DUT responds with a ALREADY_EXISTS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_12",
            "desc": "[TC-AVSM-2.12] Validate writable attributes with Server as DUT",
            "function": "test_TC_AVSM_2_12",
            "path": "sdk/TC_AVSM_2_12",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads HDRModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aHDREnabled",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH writes HDRModeEnabled attribute with value set to !aHDREnabled.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads HDRModeEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 3.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads SoftRecordingPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aSoftRecordingPrivacyMode",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH writes SoftRecordingPrivacyModeEnabled attribute with value set to !aSoftRecordingPrivacyMode.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads SoftRecordingPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 6.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads SoftLivestreamPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aSoftLivestreamPrivacyMode",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH writes SoftLivestreamPrivacyModeEnabled attribute with value set to !aSoftLivestreamPrivacyMode.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads SoftLivestreamPrivacyModeEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 9.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads NightVision attribute.",
                    "expectation": "Verify that the DUT response contains a TriStateAutoEnum value. Store value as aNightVision",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH writes NightVision attribute with a new value",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads NightVision attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 12.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads NightVisionIllum attribute.",
                    "expectation": "Verify that the DUT response contains a TriStateAutoEnum value. Store value as aNightVisionIllum",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH writes NightVisionIllum attribute with a new value",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH reads NightVisionIllum attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 15.",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH reads Viewport attribute.",
                    "expectation": "Verify that the DUT response contains a ViewportStruct value. Store value as aViewport",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH writes Viewport attribute with a new value.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH reads Viewport attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 18.",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads SpeakerMuted attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aSpeakerMuted",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH writes SpeakerMuted attribute with value set to !aSpeakerMuted.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH reads SpeakerMuted attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 21.",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH reads SpeakerVolumeLevel attribute.",
                    "expectation": "Verify that the DUT response is in the range SpeakerMin to SpeakerMax. Store value as aSpeakerVolumeLevel",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH writes SpeakerVolumeLevel attribute with a new value of aSpeakerVolumeLevel.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH reads SpeakerVolumeLevel attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 24.",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH reads MicrophoneMuted attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aMicrophoneMuted",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH writes MicrophoneMuted attribute with value set to !aMicrophoneMuted.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH reads MicrophoneMuted attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 27.",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH reads MicrophoneVolumeLevel attribute.",
                    "expectation": "Verify that the DUT response is in the range MicrophoneMin to MicrophoneMax. Store value as aMicrophoneVolumeLevel",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH writes MicrophoneVolumeLevel attribute with a new value of aMicrophoneVolumeLevel.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH reads MicrophoneVolumeLevel attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 30.",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH reads MicrophoneAGCEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aMicrophoneAGCEnabled",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH writes MicrophoneAGCEnabled attribute with value set to !aMicrophoneAGCEnabled.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH reads MicrophoneAGCEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 33.",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH reads ImageRotation attribute.",
                    "expectation": "Verify that the DUT response is not greater than 359. Store value as aImageRotation",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH writes ImageRotation attribute with a new value of aImageRotation.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH reads ImageRotation attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 36.",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH reads ImageFlipHorizontal attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aImageFlipHorizontal",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH writes ImageFlipHorizontal attribute with value set to !aImageFlipHorizontal.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH reads ImageFlipHorizontal attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 39.",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH reads ImageFlipVertical attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aImageFlipVertical",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH writes ImageFlipVertical attribute with value set to !aImageFlipVertical.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH reads ImageFlipVertical attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 42.",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "TH reads LocalVideoRecordingEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aLocalVideoRecordingEnabled",
                    "is_commissioning": false,
                    "test_plan_number": 44
                },
                {
                    "description": "TH writes LocalVideoRecordingEnabled attribute with value set to !aLocalVideoRecordingEnabled.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 45
                },
                {
                    "description": "TH reads LocalVideoRecordingEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 45.",
                    "is_commissioning": false,
                    "test_plan_number": 46
                },
                {
                    "description": "TH reads LocalSnapshotRecordingEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aLocalSnapshotRecordingEnabled",
                    "is_commissioning": false,
                    "test_plan_number": 47
                },
                {
                    "description": "TH writes LocalSnapshotRecordingEnabled attribute with value set to !aLocalSnapshotRecordingEnabled.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 48
                },
                {
                    "description": "TH reads LocalSnapshotRecordingEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 48.",
                    "is_commissioning": false,
                    "test_plan_number": 49
                },
                {
                    "description": "TH reads StatusLightEnabled attribute.",
                    "expectation": "Verify that the DUT response contains a bool value. Store value as aStatusLightEnabled",
                    "is_commissioning": false,
                    "test_plan_number": 50
                },
                {
                    "description": "TH writes StatusLightEnabled attribute with value set to !aStatusLightEnabled.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 51
                },
                {
                    "description": "TH reads StatusLightEnabled attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 51.",
                    "is_commissioning": false,
                    "test_plan_number": 52
                },
                {
                    "description": "TH reads StatusLightBrightness attribute.",
                    "expectation": "Verify that the DUT response contains a ThreeLevelAutoEnum value. Store value as aStatusLightBrightness",
                    "is_commissioning": false,
                    "test_plan_number": 53
                },
                {
                    "description": "TH writes StatusLightBrightness attribute with a new valud enum value.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 54
                },
                {
                    "description": "TH reads StatusLightBrightness attribute.",
                    "expectation": "Verify that the value is the same as was written in Step 54.",
                    "is_commissioning": false,
                    "test_plan_number": 55
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_13",
            "desc": "[TC-AVSM-2.13] Validate Video Stream Allocation reuse with Server as DUT",
            "function": "test_TC_AVSM_2_13",
            "path": "sdk/TC_AVSM_2_13",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aStreamUsagePriorities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads RateDistortionTradeOffPoints attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aRateDistortionTradeOffPoints.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads MinViewportResolution attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aMinViewportResolution.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads VideoSensorParams attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aVideoSensorParams.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads MaxEncodedPixelRate attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aMaxEncodedPixelRate.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sets StreamUsage from aStreamUsagePriorities. TH sets VideoCodec, MinResolution, MaxResolution, MinBitRate, MaxBitRate conforming with aRateDistortionTradeOffPoints. TH sets MinFrameRate, MaxFrameRate conforming with aVideoSensorParams. TH sets the KeyFrameInterval = 4000. TH sends the VideoStreamAllocate command with these arguments.",
                    "expectation": "DUT responds with VideoStreamAllocateResponse command with a valid VideoStreamID.",
                    "is_commissioning": "Store as `aVideoStreamID`",
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments as step 8.",
                    "expectation": "DUT responds with `VideoStreamAllocateResponse` command with a valid `VideoStreamID`",
                    "is_commissioning": "Verify that this VideoStreamID is the same as `aVideoStreamID`",
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_14",
            "desc": "[TC-AVSM-2.14] Validate Audio Stream Allocation reuse with Server as DUT",
            "function": "test_TC_AVSM_2_14",
            "path": "sdk/TC_AVSM_2_14",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify ADO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads MicrophoneCapabilities attribute from CameraAVStreamManagement Cluster on TH_SERVER.",
                    "expectation": "Store this value in aMicrophoneCapabilities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute from CameraAVStreamManagement Cluster on TH_SERVER.",
                    "expectation": "Store this value in aStreamUsagePriorities.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with valid values of AudioCodec, ChannelCount, SampleRate and BitDepth from aMicrophoneCapabilities and StreamUsage from aStreamUsagePriorities.",
                    "expectation": "DUT responds with AudioStreamAllocateResponse command with a valid AudioStreamID.",
                    "is_commissioning": "Store as aAudioStreamID.",
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated audio streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with the same set of parameters as in step 5.",
                    "expectation": "DUT responds with AudioStreamAllocateResponse command with a valid AudioStreamID.",
                    "is_commissioning": "Verify that this AudioStreamID is the same as aAudioStreamID.",
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated audio streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_15",
            "desc": "[TC-AVSM-2.15] Validate Snapshot Stream Allocation reuse with Server as DUT",
            "function": "test_TC_AVSM_2_15",
            "path": "sdk/TC_AVSM_2_15",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify SNP is supported",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads SnapshotCapabilities attribute from CameraAVStreamManagement Cluster on TH_SERVER.",
                    "expectation": "Store this value in aSnapshotCapabilities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with valid values of ImageCodec, MaxFrameRate, MinResolution=MaxResolution=Resolution from aSnapshotCapabilities and Quality set to 90.",
                    "expectation": "DUT responds with SnapshotStreamAllocateResponse command with a valid SnapshotStreamID.",
                    "is_commissioning": "Store as aSnapshotStreamID.",
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with the same set of parameters as in step 4.",
                    "expectation": "DUT responds with SnapshotStreamAllocateResponse command with a valid SnapshotStreamID.",
                    "is_commissioning": "Verify that this SnapshotStreamID is the same as aSnapshotStreamID.",
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_16",
            "desc": "[TC-AVSM-2.16] Validate correct handling of stream reference counts with Server as DUT",
            "function": "test_TC_AVSM_2_16",
            "path": "sdk/TC_AVSM_2_16",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and allocated audio and video streams",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": "Store StreamID as aVideoStreamID.Store ReferenceCount as aVideoRefCount",
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 1.",
                    "is_commissioning": "Store StreamID as aAudioStreamID.Store ReferenceCount as aAudioRefCount",
                    "test_plan_number": 3
                },
                {
                    "description": "TH establishes a WeRTC session via a ProvideOffer/Answer exchange using aVideoStreamID and aAudioStreamID.",
                    "expectation": "Verify the ProvideOfferResponse. Store the SessionID as aSessionID",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "H reads `AllocatedVideoStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the VideoStream for `aVideoStreamID` is equal to `aVideoRefCount` + 1.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "H reads `AllocatedAudioStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the AudioStream for `aAudioStreamID` is equal to `aAudioRefCount` + 1.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command with VideoStreamID set to aVideoStreamID.",
                    "expectation": "DUT responds with an INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with AudioStreamID set to aAudioStreamID.",
                    "expectation": "DUT responds with an INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH takes down WebRTC session via sending an EndSession with aSessionID. Verify Success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "H reads `AllocatedVideoStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the VideoStream for `aVideoStreamID` is equal to `aVideoRefCount.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "H reads `AllocatedAudioStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the AudioStream for `aAudioStreamID` is equal to `aAudioRefCount.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command with VideoStreamID set to aVideoStreamID.",
                    "expectation": "DUT responds with Success",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with AudioStreamID set to aAudioStreamID.",
                    "expectation": "DUT responds with Success.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_17",
            "desc": "[TC-AVSM-2.17] Validate stream Soft Privacy and Livestream handling with Server as DUT",
            "function": "test_TC_AVSM_2_17",
            "path": "sdk/TC_AVSM_2_17",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and allocated audio and video streams",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO, ADO and PRIV are supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": "Store StreamID as aVideoStreamID.Store ReferenceCount as aVideoRefCount",
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 1.",
                    "is_commissioning": "Store StreamID as aAudioStreamID.Store ReferenceCount as aAudioRefCount",
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes attribute `SoftLivestreamPrivacyModeEnabled` to false in the CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "DUT responds with Success",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads `CurrentSessions` attribute from WebRTCTransportProvider Cluster on DUT.",
                    "expectation": "Verify that the count is equal to 0.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the ProvideOffer command on the WebRTCTransportProvider Cluster with a null WebRTCSessionID, aVideoStreamID and aAudioStreamID.",
                    "expectation": "DUT responds with ProvideOfferResponse containing allocated WebRTCSessionID.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH waits for the `Answer` command for the sent `Offer`. DUT sends the `Answer`.",
                    "expectation": "Verify that the `sessionID` matches that in the `ProvideOfferResponse in step 6.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads `CurrentSessions` attribute from WebRTCTransportProvider Cluster on DUT.",
                    "expectation": "Verify that the count is equal to 1 and the session ID matches the one in the ProvideOfferResponse in step 6.",
                    "is_commissioning": "Save session as aWebRTCSessionID",
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads `AllocatedVideoStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the VideoStream for `aVideoStreamID` is equal to `aVideoRefCount` + 1.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads `AllocatedAudioStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the AudioStream for `aAudioStreamID` is equal to `aAudioRefCount` + 1.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH writes attribute `SoftLivestreamPrivacyModeEnabled` to true in the CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "DUT responds with Success",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH waits for the `End` command for the WebRTC session. DUT sends the `End` command.",
                    "expectation": "Verify that the `sessionID` matches `aWebRTCSessionID` and reason code is `Privacy`.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads `CurrentSessions` attribute from WebRTCTransportProvider Cluster on DUT.",
                    "expectation": "Verify that the count is equal to 0.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads `AllocatedVideoStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the VideoStream for `aVideoStreamID` is equal to `aVideoRefCount`.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH reads `AllocatedAudioStreams` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Verify that the reference count of the AudioStream for `aAudioStreamID` is equal to `aAudioRefCount`.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command with VideoStreamID set to aVideoStreamID.",
                    "expectation": "DUT responds with Success",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with AudioStreamID set to aAudioStreamID.",
                    "expectation": "DUT responds with Success.",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH writes attribute `SoftLivestreamPrivacyModeEnabled` to false in the CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "DUT responds with Success",
                    "is_commissioning": false,
                    "test_plan_number": 20
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_2",
            "desc": "[TC-AVSM-2.2] Validate Snapshot Stream Allocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_2",
            "path": "sdk/TC_AVSM_2_2",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify SNP is supported",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads SnapshotCapabilities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aSnapshotCapabilities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If the watermark feature is supported, set aWatermark to True, otherwise set this to Null.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the OSD feature is supported, set aOSD to True, otherwise set this to Null.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with valid values of ImageCodec, MaxFrameRate, MinResolution=MaxResolution=Resolution from aSnapshotCapabilities, WatermarkEnabled to aWatermark, OSDEnabled to aOSD, and Quality set to 90.",
                    "expectation": "DUT responds with SnapshotStreamAllocateResponse command with a valid SnapshotStreamID.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with MaxFrameRate set to 0 (outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with Quality set to 0 (below valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with Quality set to 101 (above valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with ImageCodec set to 10(outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with MinResolution set to {0,0} (outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with values from step 6 except with MaxResolution set to {0,0} (outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_3",
            "desc": "[TC-AVSM-2.3] Validate Snapshot Stream Modification functionality with Server as DUT",
            "function": "test_TC_AVSM_2_3",
            "path": "sdk/TC_AVSM_2_3",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify SNP & (WMARK|OSD) is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1. Store StreamID as aStreamID. If WMARK is supported, store WaterMarkEnabled as aWmark. If OSD is supported, store OSDEnabled as aOSD.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the SnapshotStreamModify command with SnapshotStreamID set to aStreamID. No WaterMarkEnabled or OSDEnabled provided.",
                    "expectation": "DUT responds with an INVALID_COMMAND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the SnapshotStreamModify command with SnapshotStreamID set to aStreamID + 1.",
                    "expectation": "DUT responds with an NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the SnapshotStreamModify command with SnapshotStreamID set to aStreamID. If WMARK is supported, set WaterMarkEnabled to !aWmark`and if OSD is supported, set OSDEnabled to `!aOSD in the command.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the following: If WMARK is supported, verify WaterMarkEnabled == !aWmark. If OSD is supported, verify OSDEnabled == !aOSD.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_4",
            "desc": "[TC-AVSM-2.4] Validate Snapshot Stream Deallocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_4",
            "path": "sdk/TC_AVSM_2_4",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify SNP is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1. Store StreamID as aStreamIDToDelete.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the SnapshotStreamDeallocate command with SnapshotStreamID set to aStreamIDToDelete + 1.",
                    "expectation": "DUT responds with a NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the SnapshotStreamDeallocate command with SnapshotStreamID set to aStreamIDToDelete.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_5",
            "desc": "[TC-AVSM-2.5] Validate Audio Stream Allocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_5",
            "path": "sdk/TC_AVSM_2_5",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify ADO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads MicrophoneCapabilities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aMicrophoneCapabilities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH selects a value for BitRate based on the codec in aMicrophoneCapabilities.supportedCodes.",
                    "expectation": "Store this value as aBitrate",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aStreamUsagePriorities.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with valid values of AudioCodec, ChannelCount, SampleRate and BitDepth from aMicrophoneCapabilities, a StreamUsage from aStreamUsagePriorities and aBitRate as set above.",
                    "expectation": "DUT responds with AudioStreamAllocateResponse command with a valid AudioStreamID.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with StreamUsage set to Internal",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with StreamUsage set to a value not in aStreamUsagePriorities",
                    "expectation": "DUT responds with a INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with ChannelCount set to 0(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with ChannelCount set to 16(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with BitDepth set to 48(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with Samplerate set to 0(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with BitRate set to 0(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with AudioCodec set to 10(outside of valid range)",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with values from step 6 except with SampleRate set to a value not in aMicrophoneCapabilities",
                    "expectation": "DUT responds with a DYNAMIC_CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 16
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_6",
            "desc": "[TC-AVSM-2.6] Validate Audio Stream DeAllocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_6",
            "path": "sdk/TC_AVSM_2_6",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify ADO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 1. Store StreamID as aStreamIDToDelete.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with AudioStreamID set to aStreamIDToDelete + 1.",
                    "expectation": "DUT responds with a NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with AudioStreamID set to aStreamIDToDelete.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated audio streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_7",
            "desc": "[TC-AVSM-2.7] Validate Video Stream Allocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_7",
            "path": "sdk/TC_AVSM_2_7",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads StreamUsagePriorities attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aStreamUsagePriorities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads RateDistortionTradeOffPoints attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aRateDistortionTradeOffPoints.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads MinViewportResolution attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aMinViewportRes.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads VideoSensorParams attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aVideoSensorParams.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads MaxEncodedPixelRate attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aMaxEncodedPixelRate.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If the watermark feature is supported, set aWatermark to True, otherwise set this to Null.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "If the OSD feature is supported, set aOSD to True, otherwise set this to Null.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sets StreamUsage from aStreamUsagePriorities. TH sets VideoCodec, MinResolution, MaxResolution, MinBitRate, MaxBitRate conforming with aRateDistortionTradeOffPoints. TH sets MinFrameRate, MaxFrameRate conforming with aVideoSensorParams. TH sets the KeyFrameInterval = 4000. TH sets WatermarkEnabled to aWatermark, TH also sets OSDEnabled to aOSD. TH sends the VideoStreamAllocate command with these arguments.",
                    "expectation": "DUT responds with VideoStreamAllocateResponse command with a valid VideoStreamID. Store this as myStreamID",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10.",
                    "expectation": "DUT responds with VideoStreamAllocateResponse command with the same VideoStreamID as step 10.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "If the CameraAVSettingsUserLevelManagement cluster is present, with the DPTZ feature flag set the proceed to step 15, otherwise jump to step 17.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH reads the `Viewport` attribute from CameraAVStreamManagement Cluster on DUT.",
                    "expectation": "Store this value in aViewport.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH reads the `DPTZStreams` attribute from CameraAVSettingsUserLevelManagement Cluster on DUT. Verify there is an entry with `VideoStreamID` set to `myStreamID.",
                    "expectation": "Verify the `Viewport` for that entry is the same as `myViewport",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except with StreamUsage set to Internal",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except StreamUsage set to a value not in aStreamUsagePriorities.",
                    "expectation": "DUT responds with a INVALID IN STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except MinFrameRate set to 0(outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except MinFrameRate > MaxFrameRate.",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except MinBitRate set to 0(outside of valid range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except MinBitRate > MaxBitRate.",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except KeyFrameInterval > Max value",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except VideoCodec is set to 10 (out of range).",
                    "expectation": "DUT responds with a CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH sends the VideoStreamAllocate command with the same arguments from step 10 except MaxFrameRate set to a value not in aVideoSensorParams.",
                    "expectation": "DUT responds with a DYNAMIC_CONSTRAINT_ERROR status code.",
                    "is_commissioning": false,
                    "test_plan_number": 25
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_8",
            "desc": "[TC-AVSM-2.8] Validate Video Stream Modification functionality with Server as DUT",
            "function": "test_TC_AVSM_2_8",
            "path": "sdk/TC_AVSM_2_8",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO & (WMARK|OSD) is supported.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1. Store StreamID as aStreamID. If WMARK is supported, store WaterMarkEnabled as aWmark. If OSD is supported, store OSDEnabled as aOSD.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the VideoStreamModify command with VideoStreamID set to aStreamID. No WaterMarkEnabled or OSDEnabled provided.",
                    "expectation": "DUT responds with an INVALID_COMMAND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the VideoStreamModify command with VideoStreamID set to aStreamID + 1.",
                    "expectation": "DUT responds with an NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the VideoStreamModify command with VideoStreamID set to aStreamID. If WMARK is supported, set WaterMarkEnabled to !aWmark and if OSD is supported, set OSDEnabled to !aOSD in the command.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the following: If WMARK is supported, verify WaterMarkEnabled == !aWmark. If OSD is supported, verify OSDEnabled == !aOSD.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_AVSM_2_9",
            "desc": "[TC-AVSM-2.9] Validate Video Stream DeAllocation functionality with Server as DUT",
            "function": "test_TC_AVSM_2_9",
            "path": "sdk/TC_AVSM_2_9",
            "pics": [
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify VDO is supported. Do not run if not.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 1. Store StreamID as aStreamIDToDelete.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command with VideoStreamID set to aStreamIDToDelete + 1.",
                    "expectation": "DUT responds with a NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command with VideoStreamID set to aStreamIDToDelete.",
                    "expectation": "DUT responds with a SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify the number of allocated video streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_AVSM_StreamReuseRangeParams",
            "desc": "[TC_AVSM_StreamReuseRangeParams] Validate Snapshot Stream Allocation reuse with selection of intersection of range parameters",
            "function": "test_TC_AVSM_StreamReuseRangeParams",
            "path": "sdk/TC_AVSM_StreamReuseRangeParams",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads FeatureMap attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify SNP is supported",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads SnapshotCapabilities attribute from CameraAVStreamManagement Cluster on TH_SERVER.",
                    "expectation": "Store this value in aSnapshotCapabilities.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with valid values of ImageCodec, MaxFrameRate, MinResolution=MaxResolution=Resolution from aSnapshotCapabilities and Quality set to 90.",
                    "expectation": "DUT responds with SnapshotStreamAllocateResponse command with a valid SnapshotStreamID.",
                    "is_commissioning": "Store as aSnapshotStreamID.",
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SnapshotStreamAllocate command with a narrower range of min and max resolution.",
                    "expectation": "DUT responds with SnapshotStreamAllocateResponse command with a valid SnapshotStreamID.",
                    "is_commissioning": "Verify that this SnapshotStreamID is the same as aSnapshotStreamID.",
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads AllocatedSnapshotStreams attribute from CameraAVStreamManagement Cluster on TH_SERVER",
                    "expectation": "Verify the number of allocated snapshot streams in the list is 1.",
                    "is_commissioning": "Verify the min and max resolution matches the new narrow range in the allocated snapshot stream.",
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_1",
            "desc": "[TC-AVSUM-2.1] Attributes with DUT as Server",
            "function": "test_TC_AVSUM_2_1",
            "path": "sdk/TC_AVSUM_2_1",
            "pics": [
                "AVSUM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read and verify that one of MTILT, MPAN, MZOOM, or DPTZ is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read and verify ZoomMax attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read and verify TiltMin attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read and verify TiltMax attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read and verify PanMin attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read and verify PanMax attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read and verify MPTZPosition attribute, if supported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read and verify the MovementState attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read and verify MaxPresets attribute, if supported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read and verify MPTZPresets attribute, if supported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Verify the DPTZStreams attribute is present if the DPTZ feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Ensure that a video stream has been allocated, store the streamID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read the DPTZStreams attribute. Verify the streamIDs are unique, and the allocated streamID is present",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_2",
            "desc": "[TC-AVSUM-2.2] MptzSetPosition Command Validation",
            "function": "test_TC_AVSUM_2_2",
            "path": "sdk/TC_AVSUM_2_2",
            "pics": [
                "AVSUM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read and verify MPTZPosition attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send an MPTZSetPosition command with no fields. Verify failure response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Establish a subscription to the MovementState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If Pan is supported, read and verify the PanMin attribute. If not skip to step 15",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read and verify the PanMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Create a valid value for a Pan",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Set the new Pan value via the MPTZSetPosition command. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Once the MovementState has returned to Idle, read MPTZPosition. Verify the Pan value is that set in Step 8. Verify that Tilt and Zoom are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If PIXIT.CANBEMADEBUSY is set, place the DUT into a state where it cannot accept a command. Else jump to step 12.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send an MPTZSetPositionCommand with the previously set Pan value. Verify failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Create an invalid value for a Pan.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Set the invalid value via the MPTZSetPosition command. Verify failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read MPTZPosition. Verify the Pan value is that set in Step 8.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "If Tilt is supported, read and verify the TiltMin and TiltMax attributes. If not skip to step 23",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Read and verify the TiltMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Create a valid value for a Tilt different from the initial value.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Set the new Tilt value via the MPTZSetPosition command. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Once the MovementState has returned to Idle, read MPTZPosition. Verify the Tilt value is that set in Step 18. Verify that Pan and Zoom are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Create an invalid value for a Tilt.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Set the invalid value via the MPTZSetPosition command. Verify failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "Read MPTZPosition. Verify the Tilt value is that set in Step 18.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "If Zoom is supported, read and verify the ZoomMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Create a valid value for Zoom.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "Set the new Zoom value via the MPTZSetPosition command. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "Once the MovementState has returned to Idle, read MPTZPosition. Verify the Zoom value is that set in Step 25. Verify that Pan and Tilt are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "Create an invalid value for a Zoom.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "Set the invalid value via the MPTZSetPosition command. Verify failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "Read MPTZPosition. Verify the Zoom value is that set in Step 25.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_3",
            "desc": "[TC-AVSUM-2.3] MptzRelativeMove Command Validation",
            "function": "test_TC_AVSUM_2_3",
            "path": "sdk/TC_AVSUM_2_3",
            "pics": [
                "AVSUM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read and verify MPTZPosition attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send an MPTZRelativeMove command with no fields. Verify failure response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Establish a subscription to the MovementState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If Pan is supported, read and verify the PanMin attribute. If not skip to step 13",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read and verify the PanMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Create a valid value for a Pan, calculate the relative distance from the current Pan.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Set via MPTZRelativeMove command the relative Pan. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Pan value is that set in Step 8. Verify that Tilt and Zoom are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Create an invalid value for a relative Pan that would exceed PanMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Set via MPTZSetRelativeMove command the invalid relative Pan. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Pan value is set to PanMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "If Tilt is supported, read and verify the TiltMin attribute. If not skip to step 21",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read and verify the TiltMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Create a valid value for a Tilt, calculate the relative distance from the current Tilt.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Set via MPTZRelativeMove command the relative Tilt. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Tilt value is that set in Step 16. Verify that Pan and Zoom are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Create an invalid value for a relative Tilt that would exceed TiltMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Set via MPTZSetRelativeMove command the relative Tilt. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Tilt value is set to TiltMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "If Zoom is supported, read and verify the ZoomMax attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "Create a valid value for a Zoom, calculate the relative distance from the current Zoom.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "Set via MPTZRelativeMove command the relative Zoom. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Zoom value is that set in Step 23. Verify that Pan and Tilt are unchanged.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "Create an invalid value for a relative Zoom that would exceed ZoomMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "Set via MPTZSetRelativeMove command the relative Zoom. Verify success response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then read MPTZPosition. Verify the Zoom value is set to ZoomMax.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "If PIXIT.CANBEMADEBUSY is set, place the DUT into a state where it cannot accept a command. Else end the test cse.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "Send an MPTZRelativeMove Command with any previously set relative value. Verify busy failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_4",
            "desc": "[TC-AVSUM-2.4] MPTZMoveToPreset command validation",
            "function": "test_TC_AVSUM_2_4",
            "path": "sdk/TC_AVSUM_2_4",
            "pics": [
                "AVSUM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the value of MaxPresets, fail if unsupported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the value of MPTZPresets, fail if unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send a MPTZMovePreset command with a presetID of MaxPresets+1. Verify Constraint Error failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Establish a subscription to the MovementState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "If MPTZPresets is empty, jump to step 11",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verify that the size of the Presets List is not greater than MaxPresets",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Loop over the supported presets, for each verify the PresetID and Name are in range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "For each found preset, invoke MoveToPreset with the PresetID. Wait on the subscription report showing movement complete, then verify that the MPTZPosition is that from the Preset",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If PIXIT.CANBEMADEBUSY is set, place the DUT into a state where it cannot accept a command. Else exit the test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send an MPTZMoveToPreset Command with a valid presetID. Verify busy failure response. End the text case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Send a MPTZMovePreset command with a presetID of MaxPresets. Verify Not Found failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Create a new saved preset with PresetID of MaxPresets",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Create a new MPTZPosition that is the mid-point of all support PTZ attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Move to a the MPTZPosition created in step 13.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Move to the saved preset from step 12",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Wait on the subscription report showing movement complete, then verify that the MPTZPosition is that of the preset",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "If PIXIT.CANBEMADEBUSY is set, place the DUT into a state where it cannot accept a command. Else exit the test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Send an MPTZMoveToPreset Command with a valid presetID. Verify busy failure response.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_5",
            "desc": "[TC-AVSUM-2.5] MPTZSavePreset command validation",
            "function": "test_TC_AVSUM_2_5",
            "path": "sdk/TC_AVSUM_2_5",
            "pics": [
                "AVSUM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read and save the current value of MPTZPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the value of MaxPresets, fail if unsupported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read the value of MPTZPresets, fail if unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the size of MPTZPresets is greater than MaxPresets, fail",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Via the MPTZSavePreset command, create a new saved preset with PresetID of MaxPresets, name of 'newpreset'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read the value of MPTZPresets. Ensure it has an entry for a PresetID of MaxPresets with a name 'newpreset' that matches the saved MPTZPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Create new values of Pan, Tilt, and Zoom (as supported), update these on the DUT via MPTZSetPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Save the Preset ID created in step 6",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read the value of MPTZPresets. Ensure it has an entry for a PresetID of MaxPresets with a name 'newpreset' that matches the saved MPTZPosition from step 8",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Verify there is space in the preset list, if not, skip to step 15",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Save a new Preset via the MPTZSavePreset command, name 'newpreset-2', do not provide a PresetID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read the value of MPTZPresets. Ensure it has an entry with a name 'newpreset-2' that matches the saved MPTZPosition. Verify that all PresetIDs are unique.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Repeatedly send MPTZSavePreset commands till the number of presets equals MaxPresets",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Save a new Preset via the MPTZSavePreset command, name 'newpreset-fail', do not provide a PresetID. Verify Resource Exhausted failure. End the test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_6",
            "desc": "[TC-AVSUM-2.6] MPTZRemovePreset command validation",
            "function": "test_TC_AVSUM_2_6",
            "path": "sdk/TC_AVSUM_2_6",
            "pics": [
                "AVSUM.S",
                "AVSUM.S.F04"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the value of MaxPresets, fail if unsupported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the value of MPTZPresets, fail if unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send a MPTZRemovePreset for a value larger than MaxPresets, verify failure",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If MPTZPresets is not empty, send MPTZRemovePreset for the first item in the list. Verify it has been removed. Otherwise skip to step 8.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read MPTZPresets, verify the entry has been removed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Repeat step 5, sending a MPTZRemovePreset command for the already removed preset. Verify failurre. End the test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If MPTZPresets is empty, via the MPTZSavePreset command, create a new saved preset with PresetID of MaxPresets, name of 'newpreset'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read the value of MPTZPresets. Ensure it has an entry for a PresetID of MaxPresets with a name 'newpreset' that matches the saved MPTZPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Via MPTZRemovePreset remove the saved preset.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read MPTZPresets, verify this is empty.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Repeat step 10, sending a MPTZRemovePreset command for a PresetID of MaxPresets. Verify failure.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_7",
            "desc": "[TC-AVSUM-2.7] DPTZSetViewport command validation",
            "function": "test_TC_AVSUM_2_7",
            "path": "sdk/TC_AVSUM_2_7",
            "pics": [
                "AVSUM.S",
                "AVSUM.S.F00",
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the viewport and sensorparms from the device. Ensure the viewport is less than or equal to the sensor size",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Create a viewport smaller than the supported minimum",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send DPTZSetVieport with an unknown stream ID, verify NotFound response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send a VideoStreamAllocate command to AVStreamManagement to allocate a video stream ID. Record the returned ID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the response contains an entry with the allocated stream ID and the device viewport",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send DPTZSetVieport with a the viewport created in Step 3. Verify ConstraintError response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Create a viewport with valid aspect ratio that is larger than the camera sensor",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send DPTZSetVieport with a the viewport created in Step 6. Verify ConstraintError response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Create a valid viewport give the dimensions of the sensor and the device resolution",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send DPTZSetVieport with a the viewport created in Step 9. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the response contains an entry with the allocated stream ID and the viewport from step 10",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Modify the valid viewport so that the aspect ratio is invalid",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Send DPTZSetVieport with a the viewport created in Step 10. Verify ConstraintError response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Send a VideoStreamDeallocate command to AVStreamManagement to de-allocate the video stream allocated in step 5. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the response does not contain any entry with the allocated stream ID from step 5",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                }
            ]
        },
        {
            "class_name": "TC_AVSUM_2_8",
            "desc": "[TC-AVSUM-2.8] DPTZRelativeMove command validation",
            "function": "test_TC_AVSUM_2_8",
            "path": "sdk/TC_AVSUM_2_8",
            "pics": [
                "AVSUM.S",
                "AVSUM.S.F00",
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Send DPTZRelativeMove with an unknown stream ID, but valid Zoom Delta verify NotFound response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send a VideoStreamAllocate command to AVStreamManagement to allocate a video stream ID. Record the returned ID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send DPTZRelativeMove with the allocated stream ID, invalid Zoom Delta. Verify ConstraintError response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Create a viewport with a valid AR. Set this via DPTZSetViewport",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Setup deltaX and deltaY to move beyond the cartesian plan, send via DPTZRelativeMove. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read the DPTZStreams attribute, store the viewport associated with the allocated stream id",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Setup deltaX to move the viewport to the right, send via DPTZRelativeMove. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the new viewport is the old viewport + deltaX",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Setup deltaY to move the viewport down, send via DPTZRelativeMove. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the new viewport is the old viewport + deltaY",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Repeatedly invoke DPTZRelativeMove with a Zoom Delta of 100%, verify no error on max out of sensor size",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read the MinViewport from the device, create values of deltaX and deltaY that would result in a viewport smaller than the minimum",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Via DPTZRelativeMove send the created values of deltaX and deltaY. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Read the DPTZStreams attribute, verify that the new viewport is set to the dimensions of MinViewport",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "AccessChecker",
            "desc": "[TC-ACE-2.1] Attribute read privilege enforcement - [DUT as Server]",
            "function": "test_TC_ACE_2_1",
            "path": "sdk/TC_AccessChecker",
            "pics": [],
            "steps": [
                {
                    "description": "DUT is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH_commissioner performs a wildcard read (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_commissioner reads the ACL attribute (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Repeat steps 3a and 3b for each permission level",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kView"
                },
                {
                    "description": "TH_second_controller reads all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kView"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kProxyView"
                },
                {
                    "description": "TH_second_controller reads all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kProxyView"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kOperate"
                },
                {
                    "description": "TH_second_controller reads all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kOperate"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kManage"
                },
                {
                    "description": "TH_second_controller reads all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kManage"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kAdminister"
                },
                {
                    "description": "TH_second_controller reads all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kAdminister"
                }
            ]
        },
        {
            "class_name": "AccessChecker",
            "desc": "[TC-ACE-2.2] Attribute write privilege enforcement - [DUT as Server]",
            "function": "test_TC_ACE_2_2",
            "path": "sdk/TC_AccessChecker",
            "pics": [],
            "steps": [
                {
                    "description": "DUT is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH_commissioner performs a wildcard read (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_commissioner reads the ACL attribute (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_commissioner grants TH_second_controller admin permission",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_second_controller performs a wildcard read",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Repeat steps 5a and 5b for each permission level",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a_kView"
                },
                {
                    "description": "TH_second_commissioner writes all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b_kView"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a_kProxyView"
                },
                {
                    "description": "TH_second_commissioner writes all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b_kProxyView"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a_kOperate"
                },
                {
                    "description": "TH_second_commissioner writes all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b_kOperate"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a_kManage"
                },
                {
                    "description": "TH_second_commissioner writes all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b_kManage"
                },
                {
                    "description": "TH_commissioner gives TH_second_commissioner the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a_kAdminister"
                },
                {
                    "description": "TH_second_commissioner writes all the attributes and checks for appropriate permission errors",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b_kAdminister"
                }
            ]
        },
        {
            "class_name": "AccessChecker",
            "desc": "[TC-ACE-2.3] Command Privilege Enforcement - [DUT as Server]",
            "function": "test_TC_ACE_2_3",
            "path": "sdk/TC_AccessChecker",
            "pics": [],
            "steps": [
                {
                    "description": "DUT is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH_commissioner performs a wildcard read (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_commissioner reads the ACL attribute (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Repeat steps 3a and 3b for each permission level",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_commissioner gives TH_second_controller the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kView"
                },
                {
                    "description": "For each standard command on each standard cluster on each endpoint,\n                         TH_second_controller checks the permission requirements for that command.\n                         If the permission required for the command is HIGHER than the permission level being tested,\n                         TH_second_controller sends the command to the DUT using default values.\n                         Regardless of the command contents, the DUT should return an access error since access must be checked\n                         before the command is processed. Receipt of an UNSUPPORTED_COMMAND error is a conformance failure.",
                    "expectation": "DUT returns UNSUPPORTED_ACCESS error",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kView"
                },
                {
                    "description": "TH_commissioner gives TH_second_controller the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kProxyView"
                },
                {
                    "description": "For each standard command on each standard cluster on each endpoint,\n                         TH_second_controller checks the permission requirements for that command.\n                         If the permission required for the command is HIGHER than the permission level being tested,\n                         TH_second_controller sends the command to the DUT using default values.\n                         Regardless of the command contents, the DUT should return an access error since access must be checked\n                         before the command is processed. Receipt of an UNSUPPORTED_COMMAND error is a conformance failure.",
                    "expectation": "DUT returns UNSUPPORTED_ACCESS error",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kProxyView"
                },
                {
                    "description": "TH_commissioner gives TH_second_controller the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kOperate"
                },
                {
                    "description": "For each standard command on each standard cluster on each endpoint,\n                         TH_second_controller checks the permission requirements for that command.\n                         If the permission required for the command is HIGHER than the permission level being tested,\n                         TH_second_controller sends the command to the DUT using default values.\n                         Regardless of the command contents, the DUT should return an access error since access must be checked\n                         before the command is processed. Receipt of an UNSUPPORTED_COMMAND error is a conformance failure.",
                    "expectation": "DUT returns UNSUPPORTED_ACCESS error",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kOperate"
                },
                {
                    "description": "TH_commissioner gives TH_second_controller the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kManage"
                },
                {
                    "description": "For each standard command on each standard cluster on each endpoint,\n                         TH_second_controller checks the permission requirements for that command.\n                         If the permission required for the command is HIGHER than the permission level being tested,\n                         TH_second_controller sends the command to the DUT using default values.\n                         Regardless of the command contents, the DUT should return an access error since access must be checked\n                         before the command is processed. Receipt of an UNSUPPORTED_COMMAND error is a conformance failure.",
                    "expectation": "DUT returns UNSUPPORTED_ACCESS error",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kManage"
                },
                {
                    "description": "TH_commissioner gives TH_second_controller the specified privilege",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a_kAdminister"
                },
                {
                    "description": "For each standard command on each standard cluster on each endpoint,\n                         TH_second_controller checks the permission requirements for that command.\n                         If the permission required for the command is HIGHER than the permission level being tested,\n                         TH_second_controller sends the command to the DUT using default values.\n                         Regardless of the command contents, the DUT should return an access error since access must be checked\n                         before the command is processed. Receipt of an UNSUPPORTED_COMMAND error is a conformance failure.",
                    "expectation": "DUT returns UNSUPPORTED_ACCESS error",
                    "is_commissioning": false,
                    "test_plan_number": "3b_kAdminister"
                }
            ]
        },
        {
            "class_name": "TC_BINFO_3_2",
            "desc": "[TC-BINFO-3.2] Attributes with DUT as Server",
            "function": "test_TC_BINFO_3_2",
            "path": "sdk/TC_BINFO_3_2",
            "pics": [
                "BINFO.S",
                "BINFO.S.M.DeviceConfigurationChange"
            ],
            "steps": [
                {
                    "description": "TH reads ConfigurationVersion from the DUT and stores the value as initialConfigurationVersion",
                    "expectation": "Verify that the value is in the inclusive range of 1 to 4294967295",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Change the configuration version in a way which results in functionality to be added or removed (e.g. rewire thermostat to support a new mode)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads ConfigurationVersion from the DUT",
                    "expectation": "Verify that the value is higher than the value of initialConfigurationVersion",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_2_1",
            "desc": "[TC-BOOLCFG-2.1] Attributes with DUT as Server",
            "function": "test_TC_BOOLCFG_2_1",
            "path": "sdk/TC_BOOLCFG_2_1",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read attribute list to determine supported attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read SupportedSensitivityLevels attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read CurrentSensitivityLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read DefaultSensitivityLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read AlarmsActive attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read AlarmsSuppressed attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read AlarmsEnabled attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read AlarmsSupported attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read SensorFault attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_3_1",
            "desc": "[TC-BOOLCFG-3.1] SensitivityLevel with DUT as Server",
            "function": "test_TC_BOOLCFG_3_1",
            "path": "sdk/TC_BOOLCFG_3_1",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Verify SENSLVL feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Read SupportedSensitivityLevels attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read DefaultSensitivityLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read CurrentSensitivityLevel attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH loops through the number of supported sensitivity levels",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Write CurrentSensitivityLevel attribute to non-default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Write CurrentSensitivityLevel attribute to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Write CurrentSensitivityLevel attribute to 10",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Write CurrentSensitivityLevel attribute to 255",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Write CurrentSensitivityLevel attribute to the initial current value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_4_1",
            "desc": "[TC-BOOLCFG-4.1] AlarmsSupported attribute with DUT as Server",
            "function": "test_TC_BOOLCFG_4_1",
            "path": "sdk/TC_BOOLCFG_4_1",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read AlarmsSupported attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verify AlarmsSupported attribute bit 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Verify AlarmsSupported attribute bit 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Verify AlarmsSupported attribute bit 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Verify AlarmsSupported attribute bit 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_4_2",
            "desc": "[TC-BOOLCFG-4.2] AlarmsActive attribute with DUT as Server",
            "function": "test_TC_BOOLCFG_4_2",
            "path": "sdk/TC_BOOLCFG_4_2",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Create variable named enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "If VIS is supported, set bit 0 to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "If AUD is supported, set bit 1 to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using EnableDisableAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verify VIS alarm is active, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Verify VIS alarm is not active, if not supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Verify AUD alarm is active, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Verify AUD alarm is not active, if not supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_4_3",
            "desc": "[TC-BOOLCFG-4.3] AlarmsEnabled functionality for inactive alarms with DUT as Server",
            "function": "test_TC_BOOLCFG_4_3",
            "path": "sdk/TC_BOOLCFG_4_3",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Verify AlarmsEnabled is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Create enabledAlarms and set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Enable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Set enabledAlarms to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Enable AUD alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Set enabledAlarms to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_4_4",
            "desc": "[TC-BOOLCFG-4.4] AlarmsEnabled functionality for active alarms with DUT as Server",
            "function": "test_TC_BOOLCFG_4_4",
            "path": "sdk/TC_BOOLCFG_4_4",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Verify AlarmsEnabled is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Create enabledAlarms and set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Enable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Enable AUD alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Verify VIS alarm is active",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Disable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Verify AUD alarm is active",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Disable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_5_1",
            "desc": "[TC-BOOLCFG-5.1] SuppressAlarm functionality for inactive alarms with DUT as Server",
            "function": "test_TC_BOOLCFG_5_1",
            "path": "sdk/TC_BOOLCFG_5_1",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verify SPRS feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Create enabledAlarms and set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Enable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Enable AUD alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Suppress VIS alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Suppress VIS alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Read AlarmsSuppressed attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Suppress AUD alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Suppress AUD alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Read AlarmsSuppressed attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_BOOLCFG_5_2",
            "desc": "[TC-BOOLCFG-5.2] SuppressAlarm functionality for active alarms with DUT as Server",
            "function": "test_TC_BOOLCFG_5_2",
            "path": "sdk/TC_BOOLCFG_5_2",
            "pics": [
                "BOOLCFG.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verify SPRS feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Create enabledAlarms and set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Enable VIS alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Enable AUD alarm in enabledAlarms",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Set AlarmsEnabled attribute to value of enabledAlarms using AlarmsToEnableDisable command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Send TestEventTrigger with SensorTrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Suppress VIS alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read AlarmsSuppressed attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Suppress AUD alarm using SuppressAlarm command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read AlarmsActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send TestEventTrigger with SensorUntrigger event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_BRBINFO_3_2",
            "desc": "[TC-BRBINFO-3.2] Attributes with DUT as Server",
            "function": "test_TC_BRBINFO_3_2",
            "path": "sdk/TC_BRBINFO_3_2",
            "pics": [
                "BRBINFO.S",
                "BRBINFO.S.A.A0018",
                "BRBINFO.S.M.DeviceConfigurationChange"
            ],
            "steps": [
                {
                    "description": "TH reads ConfigurationVersion and stores the value as initialConfigurationVersion",
                    "expectation": "Verify that the value is in the inclusive range of 1 to 4294967295",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "On the corresponding bridged device, change the configuration version in a way which results in functionality to be added or removed (e.g. rewire thermostat to support a new mode)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads ConfigurationVersion from the DUT (same endpoint as in step 1)",
                    "expectation": "Verify that the value is higher than the value of initialConfigurationVersion",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_BRBINFO_4_1",
            "desc": "[TC_BRBINFO_4_1] Verification of KeepActive Command [DUT-Server]",
            "function": "test_TC_BRBINFO_4_1",
            "path": "sdk/TC_BRBINFO_4_1",
            "pics": [],
            "steps": [
                {
                    "description": "DUT commissioned and preconditions",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "0"
                },
                {
                    "description": "TH reads from the ICD the A_IDLE_MODE_DURATION, A_ACTIVE_MODE_DURATION, and ACTIVE_MODE_THRESHOLD attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "Setting up subscribe to ActiveChange event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Check TimeoutMs too low fails",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Check TimeoutMs too high fails",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "Check KeepActive successful with valid command parameters lowest possible TimeoutMs",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "Validate previous command results in ActiveChanged event shortly after ICD device checks-in",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "Check KeepActive successful with valid command parameters highest possible TimeoutMs",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "Validate previous command results in ActiveChanged event shortly after ICD device checks-in",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "Send multiple KeepActive commands during window where ICD device will not check in",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "Validate previous command results in single ActiveChanged event shortly after ICD device checks-in",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "Validate we received no additional ActiveChanged event after subsequent ICD check in",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "Send KeepActive command with shortest TimeoutMs value while TH_ICD is prevented from sending check-ins",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH allows TH_ICD to resume sending check-ins after timeout should have expired",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "Wait for TH_ICD to check into TH twice, then confirm we have had no new ActiveChanged events reported from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "Send KeepActive command with shortest TimeoutMs value while TH_ICD is prevented from sending check-ins",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "Wait 15 seconds then send second KeepActive command with double the TimeoutMs value of the previous step",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH allows TH_ICD to resume sending check-ins after timeout from step 15 expired but before second timeout from step 16 still valid",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "Wait for TH_ICD to check into TH, then confirm we have received new event from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_11",
            "desc": "test_TC_CADMIN_1_11",
            "function": "test_TC_CADMIN_1_11",
            "path": "sdk/TC_CADMIN_1_11",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 gets the MaxCumulativeFailsafeSeconds value from BasicCommissioningInfo attribute in GeneralCommissioning Cluster",
                    "expectation": "Should set the MaxCumulativeFailsafeSeconds value from BasicCommissioningInfo attribute to timeout",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 opens commissioning window on DUT with duration set to value for MaxCumulativeFailsafeSeconds",
                    "expectation": "Commissioning window should open with timeout set to MaxCumulativeFailsafeSeconds",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR2 fully commissions the DUT",
                    "expectation": "DUT should fully commission",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 opens commissioning window on DUT with duration set to value from BasicCommissioningInfo",
                    "expectation": "New commissioning window should open and be set to timeout",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 sends an OpenCommissioningWindow command to the DUT and attempts to open another commissioning window",
                    "expectation": "Commissioning window should fail to be opened due to being busy",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR2 sends an OpenCommissioningWindow command to the DUT and attempts to open another commissioning window",
                    "expectation": "Commissioning window should fail to be opened due to being busy",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR1 sends an RevokeCommissioning command to the DUT",
                    "expectation": "Commissioning window should be closed",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH_CR1 reads the FeatureMap from the Administrator Commissioning Cluster to check to see if BC is supported on DUT",
                    "expectation": "FeatureMap should be checked to see if BC enum is available feature, if not then test steps 9a-9d will be skipped",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH_CR1 opens commissioning window on DUT with duration set to value from BasicCommissioningInfo",
                    "expectation": "Opens basic commissioning window on the DUT for timeout set to value of MaxCumulativeFailsafeSeconds",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH_CR1 sends an OpenBasicCommissioningWindow command to the DUT and attempts to open another commissioning window",
                    "expectation": "Commissioning window should fail to be opened due to being busy",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH_CR2 sends an OpenBasicCommissioningWindow command to the DUT and attempts to open another commissioning window",
                    "expectation": "Commissioning window should fail to be opened due to being busy",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH_CR1 sends a RevokeCommissioning command to the DUT",
                    "expectation": "Commissioning window should be closed",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "TH_CR2 reads the CurrentFabricIndex attribute from the Operational Credentials cluster and saves as th2_idx",
                    "expectation": "th2_idx set to value for CurrentFabricIndex attribute from TH_CR2",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR1 sends the RemoveFabric command to the DUT with the FabricIndex set to th2_idx",
                    "expectation": "TH_CR1 removes TH_CR2 fabric using th2_idx",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_15",
            "desc": "test_TC_CADMIN_1_15",
            "function": "test_TC_CADMIN_1_15",
            "path": "sdk/TC_CADMIN_1_15",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 gets the MaxCumulativeFailsafeSeconds value from BasicCommissioningInfo attribute in GeneralCommissioning Cluster",
                    "expectation": "Should set the MaxCumulativeFailsafeSeconds value from BasicCommissioningInfo attribute to timeout",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read. Save the number of fabrics in the list as initial_number_of_fabrics",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR1 opens commissioning window on DUT with duration set to value for MaxCumulativeFailsafeSeconds",
                    "expectation": "Commissioning window should open with timeout set to MaxCumulativeFailsafeSeconds",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR2 fully commissions DUT_CE",
                    "expectation": "DUT should fully commission",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 opens commissioning window on DUT with duration set to value from BasicCommissioningInfo",
                    "expectation": "New commissioning window should open and be set to timeout",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR3 fully commissions DUT_CE",
                    "expectation": "DUT should fully commission to TH_CR3",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR2 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read",
                    "expectation": "Verify the list shows initial_number_of_fabrics + 2 fabrics",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Verify DUT_CE is now discoverable over DNS-SD with 3 Operational service records (_matter._tcp SRV records).",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH_CR2 reads the CurrentFabricIndex from the Node Operational Credentials cluster and saves as fabric_idx_cr2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR2 sends RemoveFabric with FabricIndex = fabric_idx_cr2 command to DUT_CE",
                    "expectation": "Verify DUT_CE responses with NOCResponse with a StatusCode OK",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH_CR2 reads the Basic Information Cluster\u2019s NodeLabel attribute of DUT_CE",
                    "expectation": "Verify read/write commands fail as expected since the DUT_CE is no longer on the network",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "expectation": "Verify the list shows initial_number_of_fabrics + 1 fabrics and fabric_idx_cr2 is not included.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH_CR1 sends a OpenCommissioningWindow command to DUT_CE using a commissioning timeout of max_window_duration",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH_CR2 commissions DUT_CE",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH_CR2 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read",
                    "expectation": "Verify the list shows initial_number_of_fabrics + 2 fabrics and fabric_idx_cr2 is not included, since a new fabric index should have been allocated.",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH_CR2 reads the CurrentFabricIndex from the Node Operational Credentials cluster and saves as fabric_idx_cr2_2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH_CR3 reads the CurrentFabricIndex from the Node Operational Credentials cluster and saves as fabric_idx_cr3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH_CR1 sends RemoveFabric with FabricIndex = fabric_idx_cr2_2 command to DUT_CE",
                    "expectation": "Verify DUT_CE responses with NOCResponse with a StatusCode OK",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH_CR1 sends RemoveFabric with FabricIndex = fabric_idx_cr3 command to DUT_CE",
                    "expectation": "Verify DUT_CE responses with NOCResponse with a StatusCode OK",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "expectation": "Verify the list shows initial_number_of_fabrics fabrics.",
                    "is_commissioning": false,
                    "test_plan_number": 21
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_19",
            "desc": "test_TC_CADMIN_1_19",
            "function": "test_TC_CADMIN_1_19",
            "path": "sdk/TC_CADMIN_1_19",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 reads the BasicCommissioningInfo attribute from the General Commissioning cluster and saves the MaxCumulativeFailsafeSeconds field as max_window_duration.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read. Save the number of fabrics in the list as initial_number_of_fabrics",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR1 reads the SupportedFabrics attribute from the Node Operational Credentials cluster. Save max_fabrics",
                    "expectation": "Verify that max_fabrics is larger than initial_number_of_fabrics. If not, instruct the tester to remove one non-test-harness fabric and re-start the test.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Repeat the following steps (5a and 5b) max_fabrics - initial_number_of_fabrics times",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 send an OpenCommissioningWindow command to DUT_CE using a commissioning timeout of max_window_duration",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH creates a controller on a new fabric and commissions DUT_CE using that controller",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "The controller reads the CurrentFabricIndex from the Node Operational Credentials cluster. Save all fabrics in a list as fabric_idxs.",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Shutdown the fabrics created during test step 5b from TH only so that it does not fill up the fabric table",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "TH reads the CommissionedFabrics attributes from the Node Operational Credentials cluster.",
                    "expectation": "Verify this is equal to max_fabrics",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR1 send an OpenCommissioningWindow command to DUT_CE using a commissioning timeout of max_window_duration",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH creates a controller on a new fabric and commissions DUT_CE using that controller",
                    "expectation": "Verify DUT_CE responds with NOCResponse with a StatusCode field value of TableFull(5)",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH_CR1 sends the RemoveFabric command in to DUT_CE to remove fabrics saved on device using fabric_idxs",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads the CommissionedFabrics attributes from the Node Operational Credentials cluster.",
                    "expectation": "Verify this is equal to initial_number_of_fabrics.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH subscribes to the window status attribute",
                    "expectation": "Success",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the RevokeCommissioning command",
                    "expectation": "Success",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH waits to receive an attribute report that indicates the window status is closed",
                    "expectation": "Report is received",
                    "is_commissioning": false,
                    "test_plan_number": 13
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_22_24",
            "desc": "test_TC_CADMIN_1_22",
            "function": "test_TC_CADMIN_1_22",
            "path": "sdk/TC_CADMIN_1_22",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 900 seconds",
                    "expectation": "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 sends an RevokeCommissioning command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "expectation": "DUT_CE windows status shows the window is closed",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 901 seconds",
                    "expectation": "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "expectation": "DUT_CE windows status shows the window is closed",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 180 seconds",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR1 sends a RevokeCommissioning command to the DUT_CE",
                    "expectation": "Result is SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 179 seconds",
                    "expectation": "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "expectation": "DUT_CE windows status shows the window is closed",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_25",
            "desc": "test_TC_CADMIN_1_25",
            "function": "test_TC_CADMIN_1_25",
            "path": "sdk/TC_CADMIN_1_25",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 subscribes to WindowStatus attribute on DUT_CE",
                    "expectation": "Verify TH_CR1 receives WindowStatus subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "expectation": "Verify TH_CR1 receives AdminFabricIndex subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR1 subscribes to AdminVendorId attribute on DUT_CE",
                    "expectation": "Verify TH_CR1 receives AdminVendorId subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 reads the BasicCommissioningInfo attribute from the General Commissioning cluster and saves the MaxCumulativeFailsafeSeconds field as `max_window_duration`.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 send an OpenCommissioningWindow command to DUT_CE using a commissioning timeout of `max_window_duration`",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR2 starts a commissioning process with DUT_CE",
                    "expectation": "DUT_CE is commissioned by TH_CR2",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH_CR2 subscribes to WindowStatus attribute on DUT_CE",
                    "expectation": "Verify TH_CR2 receives WindowStatus subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR2 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "expectation": "Verify TH_CR2 receives AdminFabricIndex subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH_CR2 subscribes to AdminVendorId attribute on DUT_CE",
                    "expectation": "Verify TH_CR2 receives AdminVendorId subscription notification",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH_CR1 sends an OpenCommissioningWindow command to DUT_CE using a commissioning timeout of `max_window_duration`",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "expectation": "Verify DUT_CE closes its Commissioning window",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH_CR2 opens a commissioning window on DUT_CE using ECM with commissioning timeout of `max_window_duration`",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "expectation": "Verify DUT_CE closes its Commissioning window",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH_CR2 send an OpenCommissioningWindow command to DUT_CE using ECM with a commissioning timeout of `max_window_duration`",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2's fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "Before expiration of `max_window_duration` set in step 25, TH_CR1 sends RemoveFabric command to DUT_CE with FabricIndex set to the fabric index of TH_CR2's fabric",
                    "expectation": "Verify DUT_CE responses with NOCResponse with a StatusCode OK (note that expecting OK should ONLY work if an administrator/commissioner on another fabric than the one being removed is invoking RemoveFabric).",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show AdminFabricIndex value to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "expectation": "verify the value to be 1 indicating the window is still open",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH_CR1 reads AdminVendorID attribute from DUT_CE",
                    "expectation": "verify the value to be the same as the Admin Vendor ID of the Fabrics attribute list entry corresponding to TH_CR2's fabric",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "expectation": "Verify DUT_CE closes its Commissioning window",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminVendorId to be null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_27",
            "desc": "test_TC_CADMIN_1_27",
            "function": "test_TC_CADMIN_1_27",
            "path": "sdk/TC_CADMIN_1_27",
            "pics": [],
            "steps": [
                {
                    "description": "[PRECONDITION 2] Verify NOCs of both JF-Admin apps from Ecosystem A and Ecosystem B have the Anchor CAT and Administrator CAT",
                    "expectation": "Expect each Admin app to generate the correct CATs",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "[PRECONDITION 3] Verify VID on the JFAdmin app on both Ecosystems",
                    "expectation": "Expect the VID to be the one configured by the jfc-app on each fabric",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Commission a server app in Ecosystem A",
                    "expectation": "Check the correct Vendor ID and Administrator CATs have been installed on the server app",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Commission a server app in Ecosystem B",
                    "expectation": "Check the correct Vendor ID and Administrator CATs have been installed on the server app",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "Open Joint Commissioning Window on Ecosystem B Administrator",
                    "expectation": "OCJW is executed with success",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "[Test Plan steps 4-10] DUT start the Joint Commissioning Method with Ecosystem B Administrator",
                    "expectation": "EcoB Admin is successfully commissioned into Fabric A",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "EcoA CTRL read ProductID from EcoB Harness device",
                    "expectation": "Verify value is in range [1,65534]",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "EcoA CTRL commission a new Harness device TH3 into Joint Fabric",
                    "expectation": "TH3 is commissioned with success",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "EcoA CTRL read ProductID from EcoB TH3 device",
                    "expectation": "Verify value is in range [1,65534]",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_28",
            "desc": "test_TC_CADMIN_1_28",
            "function": "test_TC_CADMIN_1_28",
            "path": "sdk/TC_CADMIN_1_28",
            "pics": [],
            "steps": [
                {
                    "description": "On Ecosystem B, use jfc-app for opening a joint commissioning window in jfa-app using Python ControllerCheck this Commissioning Window opens successfully with correct parameters",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "[Test Plan steps 4-8] On Ecosystem A, use jfc-app for commissioning jfa-app at EcosystemB using Python ControllerVerify Joint Commissioning completes successfully with --jcm functionality",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "On jfc-app@EcoB used a non-filtered fabric read for reading the NOC from Fabric Index=2Parse the NOC bytes and Checked that it contains the Administrator CAT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "EcoA CTRL read ProductID from EcoB Harness device",
                    "expectation": "Verify value is in range [1,65534]",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                }
            ]
        },
        {
            "class_name": "TC_CADMIN",
            "desc": "test_TC_CADMIN_1_3",
            "function": "test_TC_CADMIN_1_3",
            "path": "sdk/TC_CADMIN_1_3_4",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "TH_CR1 starts a commissioning process with DUT_CE",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 reads the BasicCommissioningInfo attribute from the General Commissioning cluster and saves the MaxCumulativeFailsafeSeconds field as max_window_duration.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of max_window_duration using ECM",
                    "expectation": "DUT_CE opens its Commissioning window to allow a second commissioning.",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "DNS-SD records shows DUT_CE advertising",
                    "expectation": "Verify that the DNS-SD advertisement shows CM=2",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "expectation": "Verify DUT_CE responds to both write/read with a success",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH creates a controller (TH_CR2) on a new fabric and commissions DUT_CE using that controller. TH_CR2 should commission the device using a different NodeID than TH_CR1.",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 reads the Fabrics attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the RootPublicKey matches the root public key for TH_CR1 and the NodeID matches the node ID used when TH_CR1 commissioned the device.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR2 reads the Fabrics attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the RootPublicKey matches the root public key for TH_CR2 and the NodeID matches the node ID used when TH_CR2 commissioned the device.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "expectation": "Verify DUT_CE responds to both write/read with a success",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR2 reads, writes and then reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "expectation": "Verify the initial read reflect the value written in the above step. Verify DUT_CE responds to both write/read with a success",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH_CR2 opens a commissioning window on DUT_CE for 180 seconds using ECM",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Wait for the commissioning window in step 9 to timeout",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR2 reads the window status to verify the DUT_CE window is closed",
                    "expectation": "DUT_CE windows status shows the window is closed",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH_CR2 opens a commissioning window on DUT_CE using ECM",
                    "expectation": "DUT_CE opens its Commissioning window to allow a new commissioning",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH_CR1 starts a commissioning process with DUT_CE before the timeout from step 12",
                    "expectation": "Since DUT_CE was already commissioned by TH_CR1 in step 1, AddNOC fails with NOCResponse with StatusCode field set to FabricConflict (9)",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH_CR1 sends an RevokeCommissioning command to the DUT to cleanup step 13",
                    "expectation": "Successfully revoked commissioning",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH_CR2 reads the CurrentFabricIndex attribute from the Operational Credentials cluster and saves as th2_idx, TH_CR1 sends the RemoveFabric command to the DUT with the FabricIndex set to th2_idx",
                    "expectation": "TH_CR1 removes TH_CR2 fabric using th2_idx",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "TC_CADMIN",
            "desc": "test_TC_CADMIN_1_4",
            "function": "test_TC_CADMIN_1_4",
            "path": "sdk/TC_CADMIN_1_3_4",
            "pics": [
                "CADMIN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH_CR1 starts a commissioning process with DUT_CE",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 reads the BasicCommissioningInfo attribute from the General Commissioning cluster and saves the MaxCumulativeFailsafeSeconds field as max_window_duration.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of max_window_duration using BCM",
                    "expectation": "DUT_CE opens its Commissioning window to allow a second commissioning.",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "DNS-SD records shows DUT_CE advertising",
                    "expectation": "Verify that the DNS-SD advertisement shows CM=1",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "expectation": "Verify DUT_CE responds to both write/read with a success",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH creates a controller (TH_CR2) on a new fabric and commissions DUT_CE using that controller. TH_CR2 should commission the device using a different NodeID than TH_CR1.",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 reads the Fabrics attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the RootPublicKey matches the root public key for TH_CR1 and the NodeID matches the node ID used when TH_CR1 commissioned the device.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR2 reads the Fabrics attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the RootPublicKey matches the root public key for TH_CR2 and the NodeID matches the node ID used when TH_CR2 commissioned the device.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR2 reads the CurrentFabricIndex attribute from the Operational Credentials cluster and saves as th2_idx, TH_CR1 sends the RemoveFabric command to the DUT with the FabricIndex set to th2_idx",
                    "expectation": "TH_CR1 removes TH_CR2 fabric using th2_idx",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_5",
            "desc": "test_TC_CADMIN_1_5",
            "function": "test_TC_CADMIN_1_5",
            "path": "sdk/TC_CADMIN_1_5",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH_CR1 finds DUT_CE advertising as a commissionable node on DNS-SD",
                    "expectation": "Verify that the DNS-SD advertisement TXT record shows CM=2",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_CR2 attempts to start a commissioning process with DUT_CE after 190 seconds",
                    "expectation": "TH_CR2 should fail to commission the DUT since the window should be closed. This may be a failure to find the commissionable node or a failure to establish a PASE connection.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "expectation": "{resDutSuccess}",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH_CR2 attempts to start a commissioning process with DUT_CE",
                    "expectation": "TH_CR2 should fail to commission the DUT since the window should be closed. This may be a failure to find the commissionable node or a failure to establish a PASE connection.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command.",
                    "expectation": "Verify this command fails with the cluster specific status code of WindowNotOpen",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM with the iterations set to 999",
                    "expectation": "Verify DUT_CE fails to open Commissioning window with status code 3 (PakeParameterError)",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM with the iterations set to 100001",
                    "expectation": "Verify DUT_CE fails to open Commissioning window with status code 3 (PakeParameterError)",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM with the salt set to 'too_short'",
                    "expectation": "Verify DUT_CE fails to open Commissioning window with status code 3 (PakeParameterError)",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of 180 seconds using ECM with the salt set to 'this pake salt very very very long'",
                    "expectation": "Verify DUT_CE fails to open Commissioning window with status code 3 (PakeParameterError)",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of {PIXIT_CWDURATION} seconds using ECM",
                    "expectation": "Verify DUT_CE opens its Commissioning window to allow a second commissioning",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH_CR1 opens another commissioning window on DUT_CE using a commissioning timeout of {PIXIT_CWDURATION} seconds using ECM",
                    "expectation": "Verify DUT_CE fails to open Commissioning window with status code 2 (Busy)",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH_CR2 starts a commissioning process with DUT_CE",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH_CR1 tries to revoke the commissioning window on DUT_CE using RevokeCommissioning command",
                    "expectation": "Verify DUT_CE fails to revoke giving status code 4 (WindowNotOpen) as there was no window open",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH_CR1 sends the RemoveFabric command to the DUT to remove TH_CR2 fabric",
                    "expectation": "TH_CR1 removes TH_CR2 fabric",
                    "is_commissioning": false,
                    "test_plan_number": 17
                }
            ]
        },
        {
            "class_name": "TC_CADMIN_1_9",
            "desc": "test_TC_CADMIN_1_9",
            "function": "test_TC_CADMIN_1_9",
            "path": "sdk/TC_CADMIN_1_9",
            "pics": [
                "CADMIN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 opens commissioning window on DUT with duration set to value for maxCumulativeFailsafeSeconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH2 attempts to connect 20 times to endpoint with incorrect passcode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 attempts to connect to endpoint with correct passcode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 opening Commissioning Window one more time to validate ability to do so",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 revoking Commissioning Window",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_CCTRL_2_1",
            "desc": "test_TC_CCTRL_2_1",
            "function": "test_TC_CCTRL_2_1",
            "path": "sdk/TC_CCTRL_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "Read MCORE.FS PICS code",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Validate SupportedDeviceCategories is set accordingly based on MCORE.FS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_CCTRL_2_2",
            "desc": "test_TC_CCTRL_2_2",
            "function": "test_TC_CCTRL_2_2",
            "path": "sdk/TC_CCTRL_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Get number of fabrics from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Reading Attribute VendorId from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Reading Attribute ProductId from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Reading Event CommissioningRequestResult from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send OpenCommissioningWindow command on Administrator Commissioning Cluster to DUT with CASE session",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send CommissionNode command to DUT with PASE session",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Send RequestCommissioningApproval command to DUT with PASE session",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send RevokeCommissioning command on Administrator Commissioning Cluster to DUT with CASE session",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Reading Event CommissioningRequestResult from DUT, confirm no new events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send RequestCommissioningApproval command to DUT with CASE session with incorrect vendorID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "(Manual Step) Approve Commissioning Approval Request on DUT using method indicated by the manufacturer",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Reading Event CommissioningRequestResult from DUT, confirm one new event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with invalid RequestId",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with invalid ResponseTimeoutSeconds too low",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with invalid ResponseTimeoutSeconds too high",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with valid parameters",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Send OpenCommissioningWindow command on Administrator Commissioning Cluster sent to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Wait for DUT to fail commissioning TH_SERVER, 30 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Get number of fabrics from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Send RevokeCommissioning command on Administrator Commissioning Cluster sent to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "Send RequestCommissioningApproval command to DUT with CASE session with correct vendorID",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "(Manual Step) Approve Commissioning Approval Request on DUT using method indicated by the manufacturer",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Reading Event CommissioningRequestResult from DUT, confirm one new event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with valid parameters",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "Send OpenCommissioningWindow command on Administrator Commissioning Cluster sent to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "Get number of fabrics from TH_SERVER, verify DUT successfully commissioned TH_SERVER (up to 30 seconds)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                }
            ]
        },
        {
            "class_name": "TC_CCTRL_2_3",
            "desc": "test_TC_CCTRL_2_3",
            "function": "test_TC_CCTRL_2_3",
            "path": "sdk/TC_CCTRL_2_3",
            "pics": [],
            "steps": [
                {
                    "description": "Get number of fabrics from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Reading Attribute VendorId from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Reading Attribute ProductId from TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send RequestCommissioningApproval command to DUT with CASE session with correct VendorId and ProductId",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "(Manual Step) Approve Commissioning Approval Request on DUT using method indicated by the manufacturer",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Reading Event CommissioningRequestResult from DUT, confirm one new event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send another RequestCommissioningApproval command to DUT with CASE session with same RequestId as the previous one",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Send CommissionNode command to DUT with CASE session, with valid parameters",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send another CommissionNode command to DUT with CASE session, with with same RequestId as the previous one",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Send OpenCommissioningWindow command on Administrator Commissioning Cluster sent to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Get number of fabrics from TH_SERVER, verify DUT successfully commissioned TH_SERVER (up to 30 seconds)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_CC_10_1",
            "desc": "4.2.29. [TC_CC_10_1] Scenes Management Cluster Interaction with DUT as Server",
            "function": "test_TC_CC_10_1",
            "path": "sdk/TC_CC_10_1",
            "pics": [
                "CC.S",
                "S.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "0"
                },
                {
                    "description": "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows: GroupKeySetID: 0x01a1, GroupKeySecurityPolicy: TrustFirst (0), EpochKey0: a0a1a2a3a4a5a6a7a8a9aaabacadaeaf, EpochStartTime0: 1110000, EpochKey1: b0b1b2b3b4b5b6b7b8b9babbbcbdbebf, EpochStartTime1: 1110001, EpochKey2: c0c1c2c3c4c5c6c7c8c9cacbcccdcecf, EpochStartTime2: 1110002",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "0a"
                },
                {
                    "description": "TH binds GroupIds 0x0001 with GroupKeySetID 0x01a1 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with two entries as follows: * List item 1: - FabricIndex: 1 - GroupId: 0x0001 - GroupKeySetId: 0x01a1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "0b"
                },
                {
                    "description": "TH sends a _RemoveAllGroups_ command to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "0c"
                },
                {
                    "description": "TH sends a _AddGroup_ command to DUT with the _GroupID_ field set to _G~1~_.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH sends a _RemoveAllScenes_ command to DUT with the _GroupID_ field set to _G~1~_.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH sends a _GetSceneMembership_ command to DUT with the _GroupID_ field set to _G~1~_.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1c"
                },
                {
                    "description": "TH reads ColorTempPhysicalMinMireds attribute from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1d"
                },
                {
                    "description": "TH reads ColorTempPhysicalMaxMireds attribute from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1e"
                },
                {
                    "description": "TH sends _MoveToHueAndSaturation command_ to DUT with _Hue_=200, _Saturation_=50 and _TransitionTime_=0 (immediately).",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads _CurrentHue and CurrentSaturation attributes_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends _MoveToColor command_ to DUT, with: ColorX = 32768/0x8000 (x=0.5) (purple), ColorY = 19660/0x4CCC (y=0.3), TransitionTime = 0 (immediate)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads _CurrentX and CurrentY attributes_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH sends _MoveToColorTemperature command_ to DUT with _ColorTemperatureMireds_=(_ColorTempPhysicalMinMireds_ + _ColorTempPhysicalMaxMireds_)/2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "TH sends _MoveColorTemperature command_ to DUT with _MoveMode_ = 0x01 (up), _Rate_ = (_ColorTempPhysicalMaxMireds_ - _ColorTempPhysicalMinMireds_)/40",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "After 10 seconds, TH reads _ColorTemperatureMireds attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "TH sends _EnhancedMoveToHueAndSaturation command_ to DUT with _EnhancedHue_=20000, _Saturation_=50 and _TransitionTime_=0 (immediately).",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "TH reads _EnhancedCurrentHue and CurrentSaturation attributes_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "TH sends a _StoreScene_ command to DUT with the _GroupID_ field set to _G~1~_ and the _SceneID_ field set to 0x01.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends a _ViewScene_ command to DUT with the _GroupID_ field set to _G~1~_ and the _SceneID_ field set to 0x01.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends a _AddScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x02, the TransitionTime field set to 0 and the ExtensionFieldSetStructs set to: '[{ ClusterID: 0x0300, AttributeValueList: [{ AttributeID: 0x4001, ValueUnsigned8: 0x00 }, { AttributeID: 0x0001, ValueUnsigned8: 0xFE }]}]'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends a _RecallScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x02 and the _TransitionTime_ omitted.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH reads the _CurrentSaturation attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends a _AddScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x03, the TransitionTime field set to 0 and the ExtensionFieldSetStructs set to: '[{ ClusterID: 0x0300, AttributeValueList: [{ AttributeID: 0x4001, ValueUnsigned8: 0x01 }, { AttributeID: 0x0003, ValueUnsigned16: 16334 },{ AttributeID: 0x0004, ValueUnsigned16: 13067 }]}]'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends a _RecallScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x03 and the _TransitionTime_ omitted.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH reads _CurrentX and CurrentY attributes_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH sends a _AddScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x04, the TransitionTime field set to 0 and the ExtensionFieldSetStructs set to: '[{ ClusterID: 0x0300, AttributeValueList: [{ AttributeID: 0x4001, ValueUnsigned8: 0x02 }, { AttributeID: 0x0007, ValueUnsigned16: 175 }]}]'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends a _RecallScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x04 and the _TransitionTime_ omitted.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads _ColorTemperatureMireds attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH sends a _AddScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x05, the TransitionTime field set to 0 and the ExtensionFieldSetStructs set to: '[{ ClusterID: 0x0300, AttributeValueList: [{ AttributeID: 0x4001, ValueUnsigned8: 0x03 }, { AttributeID: 0x4000, ValueUnsigned16: 12000 }, { AttributeID: 0x0001, ValueUnsigned16: 70 }]}]'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends a _RecallScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x05 and the _TransitionTime_ omitted.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH reads _EnhancedCurrentHue and CurrentSaturation attributes_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH sends a _AddScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x06, the TransitionTime field set to 0 and the ExtensionFieldSetStructs set to: '[{ ClusterID: 0x0300, AttributeValueList: [{ AttributeID: 0x4002, ValueUnsigned16: 1 }, { AttributeID: 0x4002, ValueUnsigned16: 1 }, { AttributeID: 0x4004, ValueUnsigned16: 5 }]}]'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH sends a _RecallScene_ command to DUT with the _GroupID_ field set to _G~1~_, the _SceneID_ field set to 0x05 and the _TransitionTime_ omitted.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH read _ColorLoopActive attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH read _ColorLoopDirection attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "TH read _ColorLoopTime attribute_ from DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                }
            ]
        },
        {
            "class_name": "TC_CC_2_1",
            "desc": "25.2.1. [TC-CC-2.1] Attributes with server as DUT",
            "function": "test_TC_CC_2_1",
            "path": "sdk/TC_CC_2_1",
            "pics": [
                "CC.S"
            ],
            "steps": [
                {
                    "description": "Wait for the commissioned device to be retrieved",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the (0x0000) CurrentHue attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the (0x0001) CurrentSaturation attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the (0x0002) RemainingTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the (0x0003) CurrentX attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the (0x0004) CurrentY attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the (0x0005) DriftCompensation attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the (0x0006) CompensationText attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the (0x0007) ColorTemperatureMireds attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads from the DUT the (0x0008) ColorMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the (0x000f) Options attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads from the DUT the (0x4000) EnhancedCurrentHue attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads from the DUT the (0x4001) EnhancedColorMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads from the DUT the (0x4002) ColorLoopActive attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH reads from the DUT the (0x4003) ColorLoopDirection attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH reads from the DUT the (0x4004) ColorLoopTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH reads from the DUT the (0x4005) ColorLoopStartEnhancedHue attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads from the DUT the (0x4006) ColorLoopStoredEnhancedHue attributeT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Saving for comparision in step 19 reads FeatureMap attribute from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18.a"
                },
                {
                    "description": "TH reads from the DUT the (0x400a) ColorCapabilities attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads from the DUT the (0x400b) ColorTempPhysicalMinMireds attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH reads from the DUT the (0x400c) ColorTempPhysicalMaxMireds attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH reads from the DUT the (0x400d) CoupleColorTempToLevelMinMireds attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH reads from the DUT the (0x4010) StartUpColorTemperatureMireds attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH reads from the DUT the (0x0010) NumberOfPrimaries attribute and verify that the DUT response contains an uint8 and value SHALL be in range from 0..6. NumberOfPrimaries attribute is consistent with the PrimaryN<X,Y,Intensity> attributes provided",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH reads Primary1X attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 1 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH reads Primary1Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 1 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH reads Primary1Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 1 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH reads Primary2X attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 2 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH reads Primary2Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 2 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH reads Primary2Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 2 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH reads Primary3X attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 3 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH reads Primary3Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 3 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH reads Primary3Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 3 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH reads Primary4X attribute from DUT Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 4 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH reads Primary4Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 4 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH reads Primary4Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 4 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH reads Primary5X attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 5 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH reads Primary5Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 5 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH reads Primary5Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 5 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH reads Primary6X attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 6 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH reads Primary6Y attribute from DUT and Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] if NumberOfPrimaries is 6 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH reads Primary6Intensity attribute from DUT and Verify that the DUT response contains an uint8 if NumberOfPrimaries is 6 or more",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH reads from the DUT the (0x0030) WhitePointX attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "TH reads from the DUT the (0x0031) WhitePointY attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 44
                },
                {
                    "description": "TH reads from the DUT the (0x0032) ColorPointRX attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 45
                },
                {
                    "description": "TH reads from the DUT the (0x0033) ColorPointRY attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 46
                },
                {
                    "description": "TH reads from the DUT the (0x0034) ColorPointRIntensity attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 47
                },
                {
                    "description": "TH reads from the DUT the (0x0036) ColorPointGX attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 48
                },
                {
                    "description": "TH reads from the DUT the (0x0037) ColorPointGY attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 49
                },
                {
                    "description": "TH reads from the DUT the (0x0038) ColorPointGIntensity attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 50
                },
                {
                    "description": "TH reads from the DUT the (0x003a) ColorPointBX attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 51
                },
                {
                    "description": "TH reads from the DUT the (0x003b) ColorPointBY attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 52
                },
                {
                    "description": "TH reads from the DUT the (0x003c) ColorPointBIntensity attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 53
                }
            ]
        },
        {
            "class_name": "TC_CC_2_3",
            "desc": "test_TC_CC_2_2",
            "function": "test_TC_CC_2_2",
            "path": "sdk/TC_CC_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "reads the FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "reads the AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "reads the ServerList attribute from Descriptor",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If OnOff cluster is present in _ServerList_, Test Harness sends the On command on OnOff cluster",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set up a subscription wildcard subscription for the Color Control Cluster, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 30 and KeepSubscriptions set to false",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If the CT feature is not supported, skip step 8 to 12",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Test Harness sends the MoveColorTemperature with _MoveMode_ field set to Down, _Rate_ field set to 65535 and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the ColorTempPhysicalMaxMireds and stores the returned value as colorTempPhysicalMaxMireds",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Test Harness sends the MoveToColorTemperature with ColorTemperatureMireds field set to the value of colorTempPhysicalMaxMireds, TransitionTime field set to 100, remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH stores the reported values of _ColorTemperatureMireds_ in all incoming reports for _ColorTemperatureMireds_ attribute, that contains data in _reportedColorTemperatureMiredsValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH verifies that _reportedColorTemperatureMiredsValuesList_ does not contain more than 12 entries for _ColorTemperatureMireds_",
                    "expectation": "_reportedColorTemperatureMiredsValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "If the HS feature is not supported, skip step 14 to 21",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Test Harness sends the MoveHue with _MoveMode_ field set to Down, _Rate_ field set to 255 and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Test Harness sends the MoveSaturation with _MoveMode_ field set to Down, _Rate_ field set to 255 and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Test Harness sends the MoveToHue with _Hue_ field set to 254, _TransitionTime_ field set to 100, _Direction_ field set to Shortest and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH stores the reported values of _CurrentHue_ in all incoming reports for _CurrentHue_ attribute, that contains data in _reportedCurrentHueValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH verifies that _reportedCurrentHueValuesList_ does not contain more than 12 entries for _CurrentHue_",
                    "expectation": "_reportedCurrentHueValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Test Harness sends the MoveToSaturation with _Saturation_ field set to 254, _TransitionTime_ field set to 100 and remaining fields set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH stores the reported values of _CurrentSaturation_ in all incoming reports for _CurrentSaturation_ attribute, that contains data in _reportedCurrentSaturationValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH verifies that _reportedCurrentSaturationValuesList_ does not contain more than 12 entries for _CurrentSaturation_",
                    "expectation": "_reportedCurrentSaturationValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "If XY feature is not supported, skip steps 23-28",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "Test Harness sends the MoveToColor with _ColorX_ field set to 32768, _ColorY_ set to 19660, _TransitionTime_ field set to 0 and remaining fields set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Test Harness sends the MoveToColor with _ColorX_ field set to 13107, _ColorY_ set to 13107, _TransitionTime_ field set to 100 and remaining fields set to 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH stores the reported values of _CurrentX_ in all incoming reports for _CurrentX_ attribute, that contains data in _reportedCurrentXValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH stores the reported values of _CurrentY_ in all incoming reports for _CurrentY_ attribute, that contains data in _reportedCurrentYValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH verifies that _reportedCurrentXValuesList_ does not contain more than 12 entries for _CurrentX_",
                    "expectation": "_reportedCurrentXValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH verifies that _reportedCurrentYValuesList_ does not contain more than 12 entries for _CurrentY_",
                    "expectation": "_reportedCurrentYValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "If the EHUE feature is not supported, skip steps 30 to 32",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "Test Harness sends the EnhancedMoveToHue with _EnhancedHue_ field set to 0, _TransitionTime_ field set to 100, _Direction_ field set to Shortest and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH stores the reported values of _EnhancedCurrentHue_ in all incoming reports for _EnhancedCurrentHue_ attribute, that contains data in _reportedEnhancedCurrentHueValuesList_, over a period of 20 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH verifies that _reportedEnhancedCurrentHueValuesList_ does not contain more than 12 entries for _EnhancedCurrentHue_",
                    "expectation": "_reportedEnhancedCurrentHueValuesList_ has 12 or less entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "If the RemainingTime attribute is not supported or the CT feature is not supported, skip the remaining steps and end test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "Test Harness sends the MoveColorTemperature with MoveMode field set to Down, Rate field set to 65535 and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH stores the reported values of RemainingTime in all incoming reports for RemainingTime attribute, for steps 36 to 39 that contains data in reportedRemainingTimeValuesList.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "Test Harness sends the MoveToColorTemperature with ColorTemperatureMireds field set to the value of colorTempPhysicalMaxMireds / 2, TransitionTime field set to 100, remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "Wait for 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "Test Harness sends the MoveToColorTemperature with ColorTemperatureMireds field set to the value of colorTempPhysicalMaxMireds, TransitionTime field set to 150, remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "Wait for 20 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH verifies _reportedRemainingTimeValuesList_ contains three entries",
                    "expectation": "_reportedRemainingTimeValuesList_ has 3 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH verifies the first entry in _reportedRemainingTimeValuesList_ is 100",
                    "expectation": "The first entry in reportedRemainingTimeValuesList is in the range of 95 to 100",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH verifies the second entry in _reportedRemainingTimeValuesList_ is approximately 150",
                    "expectation": "The second entry in reportedRemainingTimeValuesList is in the range of 145 to 150",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH verifies the third entry in _reportedRemainingTimeValuesList_ is 0",
                    "expectation": "The third entry in _reportedRemainingTimeValuesList_ is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 43
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_10",
            "desc": "[TC-CGEN-2.10] Verification that required terms can't be unset from TCAcknowledgements with SetTCAcknowledgements [DUT as Server]",
            "function": "test_TC_CGEN_2_10",
            "path": "sdk/TC_CGEN_2_10",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion. Store the value as acceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements. Store the value as userAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Sends the SetTCAcknowledgements command to the DUT with the fields set as follows:\n* TCVersion: 0\n* TCUserResponse: 65535",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH Sends the SetTCAcknowledgements command to the DUT with the fields set as follows:\n* TCVersion: acceptedVersion + 1\n* TCUserResponse: 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_11",
            "desc": "[TC-CGEN-2.11] Verification that TCAcknowledgements and TCAcceptedVersion can be updated after being commissioned [DUT as Server]",
            "function": "test_TC_CGEN_2_11",
            "path": "sdk/TC_CGEN_2_11",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH begins commissioning the DUT and performs the following steps in order:\n* Security setup using PASE\n* Setup fail-safe timer, with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1\n* Configure information- UTC time, regulatory, etc.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: PIXIT.CGEN.TCRevision\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Sends the SetTCAcknowledgements command to the DUT with the fields set as follows:\n* TCVersion: PIXIT.CGEN.TCRevision + 1\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH Sends the SetTCAcknowledgements command to the DUT with the fields set as follows:\n* TCVersion: PIXIT.CGEN.TCRevision + 1\n* TCUserResponse: 65535",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_2",
            "desc": "[TC-CGEN-2.2] ArmFailSafe command verification [DUT - Server]",
            "function": "test_TC_CGEN_2_2",
            "path": "sdk/TC_CGEN_2_2",
            "pics": [
                "CGEN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster\n                     and saves the number of list items as numTrustedRootsOriginal.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads the BasicCommissioningInfo attribute\n                     and saves the MaxCumulativeFailsafeSeconds as maxFailsafe.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "The failsafe timer is set based on PIXIT.CGEN.FailsafeExpiryLengthSeconds if provided;\n                     otherwise, it defaults to 20 seconds, ensuring flexibility and preventing delays in test execution.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH1 execute function run_steps_3_to_5 to run steps #3 through #5.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3-5"
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds\n                     and the Breadcrumb value as 1.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 reads the Breadcrumb attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1.\n                     TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 reads the TrustedRootCertificate attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 sends an ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 1 and the Breadcrumb value as 2.\n                     TH1 then waits 1 seconds to ensure the failsafe timer has expired",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 execute function run_steps_8_to_9 to run steps #8 through #9.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8-9"
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 reads the Breadcrumb attribute and verify that the breadcrumb attribute is 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 repeats steps #3 through #5 using function run_steps_3_to_5.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 Repeat steps 8 through 9.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 sends the OpenCommissioningWindow command to the Administrator Commissioning cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH2 opens a PASE connection to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH2 obtains or generates a TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1.\n                     TH2 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH2 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a non-fabric-filtered read\n                     and saves the returned list as nocs.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read\n                     and saves the returned list as fabrics.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster\n                     and saves the returned list as trustedroots.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH2 starts commissioning the DUT. It performs all steps up to establishing a CASE connection,\n                     but DOES NOT send the CommissioningComplete command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH2 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a non-fabric-filtered read.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH2 fully commissions the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH2 obtains or generates a TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1.\n                     TH2 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds\n                     and the Breadcrumb value as 1.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH1 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1.\n                     TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to maxFailsafe.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "TH1 waits for PIXIT.CGEN.FailsafeExpiryLengthSeconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "TH2 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds\n                     and the Breadcrumb value as 1.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to maxFailsafe.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "TH1 saves the current wall time clock in seconds as Tstart,",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "TH1 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1.\n                      TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "TH1 waits until the current wall time clock is Tstart + maxFailsafe/2.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to maxFailsafe.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "TH1 waits until the current wall time clock is Tstart + maxFailsafe. maxFailsafe is the maximum amount of time a failsafe can be armed for,\n                     so the failsafe is required to time out at this point, despite having been re-armed in step 42.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 44
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_4",
            "desc": "test_TC_CGEN_2_4",
            "function": "test_TC_CGEN_2_4",
            "path": "sdk/TC_CGEN_2_4",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_5",
            "desc": "[TC-CGEN-2.5] Verification for SetTCAcknowledgements [DUT as Server]",
            "function": "test_TC_CGEN_2_5",
            "path": "sdk/TC_CGEN_2_5",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH begins commissioning the DUT and performs the following steps in order:\n* Security setup using PASE\n* Setup fail-safe timer, with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1\n* Configure information- UTC time, regulatory, etc.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads TCAcknowledgementsRequired attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads TCUpdateDeadline attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the FeatureMap from the General Commissioning Cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: PIXIT.CGEN.TCRevision\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads TCAcknowledgementsRequired attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH continues commissioning with the DUT and performs the steps from 'Operation CSR exchange' through 'Security setup using CASE'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the attribute TCMinRequiredVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgementsRequired.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_6",
            "desc": "[TC-CGEN-2.6] Verification for CommissioningComplete no terms accepted when required [DUT as Server]",
            "function": "test_TC_CGEN_2_6",
            "path": "sdk/TC_CGEN_2_6",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH starts commissioning the DUT. It performs all commissioning steps from 'Device discovery and establish commissioning channel' to 'Security setup using CASE', except for TC configuration with SetTCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_7",
            "desc": "[TC-CGEN-2.7] Verification for CommissioningComplete when SetTCAcknowledgements provides invalid terms [DUT as Server]",
            "function": "test_TC_CGEN_2_7",
            "path": "sdk/TC_CGEN_2_7",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH begins commissioning the DUT and performs the following steps in order:\n* Security setup using PASE\n* Setup fail-safe timer, with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1\n* Configure information- UTC time, regulatory, etc.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the attribute TCMinRequiredVersion. Store the value as minVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: minVersion\n* TCUserResponse: 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH continues commissioning with the DUT and performs the steps from 'Operation CSR exchange' through 'Security setup using CASE'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: PIXIT.CGEN.TCRevision\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_8",
            "desc": "[TC-CGEN-2.8] Verification that TCAcknowledgements is reset after Factory Reset [DUT as Server]",
            "function": "test_TC_CGEN_2_8",
            "path": "sdk/TC_CGEN_2_8",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH begins commissioning the DUT and performs the following steps in order:\n* Security setup using PASE\n* Setup fail-safe timer, with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1\n* Configure information- UTC time, regulatory, etc.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: PIXIT.CGEN.TCRevision\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH continues commissioning steps with the DUT and performs steps 'Operation CSR exchange' through 'Security setup using CASE'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "DUT is factory reset.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Perform the necessary actions to put the DUT into a commissionable state.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH begins commissioning the DUT and performs the steps 'Device discovery and establish commissioning channel' through 'Security setup using CASE', skipping 'Configure information- TC Acknowledgements'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcceptedVersion.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgements.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads from the DUT the attribute TCAcknowledgementsRequired.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_CGEN_2_9",
            "desc": "[TC-CGEN-2.9] Verification that TCAcknowledgements is reset after all fabrics removed [DUT as Server]",
            "function": "test_TC_CGEN_2_9",
            "path": "sdk/TC_CGEN_2_9",
            "pics": [
                "CGEN.S",
                "CGEN.S.F00"
            ],
            "steps": [
                {
                    "description": "TH begins commissioning the DUT and performs the following steps in order:\n* Security setup using PASE\n* Setup fail-safe timer, with ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1\n* Configure information- UTC time, regulatory, etc.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends SetTCAcknowledgements to DUT with the following values:\n* TCVersion: PIXIT.CGEN.TCRevision\n* TCUserResponse: PIXIT.CGEN.RequiredTCAcknowledgements",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH continues commissioning with the DUT and performs the steps from 'Operation CSR exchange' through 'Security setup using CASE'",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH removes all fabrics from DUT with RemoveFabric.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Perform the necessary actions to put the DUT into a commissionable state.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH begins commissioning the DUT and performs all steps from 'Device discovery and establish commissioning channel' through 'Security setup using CASE', skipping the 'Configure TC acknowledgements' step",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends CommissioningComplete to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_CHIME_2_1",
            "desc": "[TC-CHIME-2.1] Attributes with DUT as Server",
            "function": "test_TC_CHIME_2_1",
            "path": "sdk/TC_CHIME_2_1",
            "pics": [
                "CHIME.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read InstalledChimeSounds, verify list and field value conformance",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verify that all of the ChimeIDs in InstalledChimeSounds are unique",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verify that all of the Names in InstalledChimeSounds are unique",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read and verify SelectedChime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read and verify Enabled attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_CHIME_2_2",
            "desc": "[TC-CHIME-2.2] Verify that Chime can be enabled",
            "function": "test_TC_CHIME_2_2",
            "path": "sdk/TC_CHIME_2_2",
            "pics": [
                "CHIME.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the Enabled attribute, store as myEnabled",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Write to the DUT a new value that is !myEnabled",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read the Enabled attribute, verify it was as written in Step 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                }
            ]
        },
        {
            "class_name": "TC_CHIME_2_3",
            "desc": "[TC-CHIME-2.3] Verify that the SelectedChime can be changed",
            "function": "test_TC_CHIME_2_3",
            "path": "sdk/TC_CHIME_2_3",
            "pics": [
                "CHIME.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the InstalledChimeSounds attribute, store as myChimeSounds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the SelectedChime attribute, store as mySelectedChime",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If myChimeSounds has only 1 value, jump to step 7.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Write to SelectedChime a new value from myChimeSounds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read the SelectedChime attribute, verfy that it's the same as the value written in step 5",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Write to SelectedChime a value not found in myChimeSounds. Verify a NotFound error response",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read the SelectedChime attribute, verfy that it's unchanged",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_CHIME_2_4",
            "desc": "[TC-CHIME-2.4] Verify functionality of the PlayChimeSound command",
            "function": "test_TC_CHIME_2_4",
            "path": "sdk/TC_CHIME_2_4",
            "pics": [
                "CHIME.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Write the value of False to the Enabled attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Invoke the PlayChimeSound command. Verify a success response, and no chime is played.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Write the value of True to the Enabled attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Invoke the PlayChimeSound command. Verify a success response, and a chime is played.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Ensure that the SelectedChime is the longest chime available on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Invoke PlayChimeSound three (3) times in rapid succession. Ensure success responses. Ensure no more than two were audible",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If there is more than one chime sound supported, proceed to step 9, otherwise end the test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Invoke PlayChimeSound on the DUT. Verify success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Write a new supported chime sound to SelectedChime",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Obtain manual verification that the chime sound from step 9 is complete",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Invoke PlayChimeSound on the DUT. Verify that a different sound from the one played in step 9 is heard",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_2_1",
            "desc": "[TC-CLCTRL-2.1] Attributes with Server as DUT",
            "function": "test_TC_CLCTRL_2_1",
            "path": "sdk/TC_CLCTRL_2_1",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the AttributeList attribute to determine supported attributes",
                    "expectation": "AttributeList of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the FeatureMap attribute to determine supported features",
                    "expectation": "FeatureMap of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read the CountdownTime attribute",
                    "expectation": "CountdownTime is returned by the DUT if it is supported, otherwise skip",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read the MainState attribute",
                    "expectation": "MainState of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read the CurrentErrorList attribute",
                    "expectation": "CurrentErrorList of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT and the fields of the struct are validated",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read the OverallTargetState attribute",
                    "expectation": "OverallTargetState of the ClosureControl cluster is returned by the DUT and the fields of the struct are validated",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read the LatchControlModes attribute",
                    "expectation": "LatchControlModes of the ClosureControl cluster is returned by the DUT if the LT feature is supported",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_3_1",
            "desc": "[TC_CLCTRL_3_1] Calibrate Command Primary Functionality with DUT as Server",
            "function": "test_TC_CLCTRL_3_1",
            "path": "sdk/TC_CLCTRL_3_1",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the (0xFFFC) FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If the CL feature is not supported on the cluster, skip remaining steps and end test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH establishes a wildcard subscription to all attributes on the Closure Control Cluster, with MinIntervalFloor = 0, MaxIntervalCeiling = 30 and KeepSubscriptions = false.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads from the DUT the (0xFFFB) AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Wait until the TH receives a subscription report for the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Wait until the TH receives a subscription report for the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "If the LT feature is not supported on the cluster, skip steps 5b to 5i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "If the attribute is supported on the cluster, TH reads from the DUT the LatchControlModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "If CurrentLatch = False, skip steps 5e to 5i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip step 5f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 5h.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5g"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5h"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5i"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5j"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 5l to 5m.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5k"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5l"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5m"
                },
                {
                    "description": "TH sends command MoveTo to DUT with Position = MoveToFullyOpen",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Wait until the TH receives a subscription report for the OverallCurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends command MoveTo to DUT with Position = MoveToFullyClosed",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_4_1",
            "desc": "[TC_CLCTRL_4_1] MoveTo Command Position Functionality with DUT as Server",
            "function": "test_TC_CLCTRL_4_1",
            "path": "sdk/TC_CLCTRL_4_1",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the (0xFFFC) FeatureMap attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If the PS feature is not supported on the cluster, skip remaining steps and end test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH reads TestEventTrigger attribute from the General Diagnostic Cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads from the DUT the (0xFFFB) AttributeList attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH establishes a wildcard subscription to all attributes on the Closure Control Cluster, with MinIntervalFloor = 0, MaxIntervalCeiling = 30 and KeepSubscriptions = false.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 3c to 3d.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "If the LT feature is not supported on the cluster, skip steps 3f to 5e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3e"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3f"
                },
                {
                    "description": "If the attribute is supported on the cluster, TH reads from the DUT the LatchControlModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3g"
                },
                {
                    "description": "If CurrentLatch = True, skip steps 3i to 3m.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3h"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 0 (RemoteLatching = False), skip step 3j.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3i"
                },
                {
                    "description": "TH sends command MoveTo with Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3j"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 1 (RemoteLatching = True), skip step 3l.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3k"
                },
                {
                    "description": "Latch the DUT manually to set OverallCurrentState.Latch to True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3l"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3m"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3n"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip step 5b.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 5d.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "If the SP feature is not supported on the cluster, skip steps 6b to 6e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "If CurrentSpeed = Low, skip steps 6d to 6e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH sends command MoveTo with Speed = Low.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Speed = Low.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToSignaturePosition.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = OpenedAtSignature.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "If VT feature is not supported on the cluster, skip steps 8b to 8i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 8d to 8e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8e"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToVentilationPosition.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8f"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8g"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = OpenedForVentilation.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8h"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8i"
                },
                {
                    "description": "If PD feature is not supported on the cluster, skip steps 9b to 9i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 9d to 9e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToPedestrianPosition.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9f"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9g"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = OpenedForPedestrian.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9h"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9i"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 10c to 10d.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10e"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10f"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyOpened.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10g"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10h"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11d"
                },
                {
                    "description": "If SP feature is not supported on the cluster, skip steps 12b to 12g.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH sends command MoveTo with Speed = High.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12c"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Speed = High.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12d"
                },
                {
                    "description": "TH sends command MoveTo with Speed = Low.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12e"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12f"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Speed = Low.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12g"
                },
                {
                    "description": "If PT feature is not supported on the cluster, skip steps 13b to 13f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Protected Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState Test Event Clear.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13e"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13f"
                },
                {
                    "description": "If MO feature is not supported on the cluster, skip steps 14b to 14f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Disengaged Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState Test Event Clear.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14e"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14f"
                },
                {
                    "description": "If IS feature is not supported on the cluster, skip steps 15b to 15i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15c"
                },
                {
                    "description": "Wait 2 seconds and TH reads from the DUT the OverallCurrentState.Position = FullyOpened.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15d"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15e"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15f"
                },
                {
                    "description": "TH reads from the DUT the OverallTargetState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15g"
                },
                {
                    "description": "Wait 2 seconds and TH reads from the DUT the OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15h"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15i"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_4_2",
            "desc": "[TC-CLCTRL-4.2] MoveTo Command Latching Functionality with DUT as Server",
            "function": "test_TC_CLCTRL_4_2",
            "path": "sdk/TC_CLCTRL_4_2",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the FeatureMap attribute to determine supported features",
                    "expectation": "FeatureMap of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If the LT feature is not supported, skip remaining steps and end test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read the LatchControlModes attribute",
                    "expectation": "LatchControlModes of the ClosureControl cluster is returned by the DUT; Value saved as LatchControlModes",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Latching field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Establish a wildcard subscription to all attributes on the ClosureControl cluster",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "Preparing Latch-State: If CurrentLatch is False, skip steps 2g to 2k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 2h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 2j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Handle Latch with LatchControlModes = 0 (Bit 0 = 0, Bit 1 = 0), else skip steps 3b to 3e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive INVALID_IN_STATE error from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Manually latch the device and wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive INVALID_IN_STATE error from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "Manually unlatch the device and wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "3e"
                },
                {
                    "description": "Handle Latch with LatchControlModes = 1 (Bit 0 = 1, Bit 1 = 0), else skip steps 4b to 4h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Wait until a subscription report with OverallTargetState is received",
                    "expectation": "OverallTargetState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Moving",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState is received",
                    "expectation": "OverallCurrentState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "4f"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive INVALID_IN_STATE error from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4g"
                },
                {
                    "description": "Manually unlatch the device and wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "4h"
                },
                {
                    "description": "Handle Latch with LatchControlModes = 2 (Bit 0 = 0, Bit 1 = 1), else skip steps 5b to 5h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive INVALID_IN_STATE error from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Manually latch the device and wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Wait until a subscription report with OverallTargetState.Latch is received",
                    "expectation": "OverallTargetState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Moving",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "5g"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "5h"
                },
                {
                    "description": "Handle Latch with LatchControlModes = 3 (Bit 0 = 1, Bit 1 = 1), else skip steps 6b to 6k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Wait until a subscription report with OverallTargetState is received",
                    "expectation": "OverallTargetState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Moving",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState is received",
                    "expectation": "OverallCurrentState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "6f"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6g"
                },
                {
                    "description": "Wait until a subscription report with OverallTargetState is received",
                    "expectation": "OverallTargetState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "6h"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Moving",
                    "is_commissioning": false,
                    "test_plan_number": "6i"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "6j"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "6k"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_4_3",
            "desc": "[TC-CLCTRL-4.3] MoveTo Command Field Sanity Check with Server as DUT",
            "function": "test_TC_CLCTRL_4_3",
            "path": "sdk/TC_CLCTRL_4_3",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the FeatureMap attribute to determine supported features",
                    "expectation": "FeatureMap of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Establish a wildcard subscription to all attributes on the ClosureControl cluster",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "If LT is supported, read the LatchControlModes attribute",
                    "expectation": "LatchControlModes of the ClosureControl cluster is returned by the DUT; Value saved as LatchControlModes",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Send MoveTo command with no fields",
                    "expectation": "Receive INVALID_COMMAND response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Check PS and LT feature support",
                    "expectation": "Skip steps 4b to 4h if the PS feature is not supported or the LT feature is supported",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Position field is saved as CurrentPosition",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Preparing Position-State: If CurrentPosition is FullyClosed, skip steps 4d and 4e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyClosed",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Position is received",
                    "expectation": "OverallCurrentState.Position should be FullyClosed",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4f"
                },
                {
                    "description": "Send MoveTo command with Latch = True and Position = MoveToFullyOpen",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4g"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Position is received",
                    "expectation": "OverallCurrentState.Position should be FullyOpened",
                    "is_commissioning": false,
                    "test_plan_number": "4h"
                },
                {
                    "description": "Check PS and LT feature support",
                    "expectation": "Skip steps 5b to 5u if the PS feature is supported or the LT feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Latching field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Preparing Latch-State: If CurrentLatch is False, skip steps 5d to 5h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 5e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 5g",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5g"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "5h"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyOpen",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5i"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 0, skip step 5k and 5l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5j"
                },
                {
                    "description": "Send MoveTo command with Positon = MoveToFullyOpen and Latch = True",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5k"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be True",
                    "is_commissioning": false,
                    "test_plan_number": "5l"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Latching field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "5m"
                },
                {
                    "description": "Preparing Latch-State: If CurrentLatch is False, skip steps 5o to 5s",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5n"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 5p",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5o"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5p"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 5r",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5q"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "Wait for user input to confirm the device is unlatched",
                    "is_commissioning": false,
                    "test_plan_number": "5r"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "5s"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 1, skip step 5u",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5t"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyOpen and Latch = True",
                    "expectation": "Receive INVALID_IN_STATE response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5u"
                },
                {
                    "description": "Check SP and LT feature support",
                    "expectation": "Skip steps 6b to 6h if the LT feature is supported or the SP feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Speed field is saved as CurrentSpeed",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Preparing Speed-State: If CurrentSpeed is High, skip steps 6d and 6e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Send MoveTo command with Speed = High",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Speed is received",
                    "expectation": "OverallCurrentState.Speed should be High",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "Send MoveTo command with Latch = True",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6f"
                },
                {
                    "description": "Send MoveTo command with Latch = True and Speed = Low",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6g"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Speed is received",
                    "expectation": "OverallCurrentState.Speed should be Low",
                    "is_commissioning": false,
                    "test_plan_number": "6h"
                },
                {
                    "description": "If the PS feature is supported, send MoveTo command with Position = 6",
                    "expectation": "Receive CONSTRAINT_ERROR response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "If the SP feature is supported, send MoveTo command with Speed = 4",
                    "expectation": "Receive CONSTRAINT_ERROR response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "If the SP feature is supported, send MoveTo command with Position = 6 and Speed = High",
                    "expectation": "Receive CONSTRAINT_ERROR response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "If the SP feature is supported, send MoveTo command with Position = MoveToFullyClosed and Speed = 4",
                    "expectation": "Receive CONSTRAINT_ERROR response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "Check LT feature support",
                    "expectation": "Skip steps 8b to 8f if the LT feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Latching field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "Send MoveTo command with Latch = CurrentLatch, when CurrentLatch is True and LatchControlModes Bit 0 = 1",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "Send MoveTo command with Latch = CurrentLatch, when CurrentLatch is True and LatchControlModes Bit 0 = 0",
                    "expectation": "Receive INVALID_IN_STATE response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "Send MoveTo command with Latch = CurrentLatch, when CurrentLatch is False and LatchControlModes Bit 1 = 1",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8e"
                },
                {
                    "description": "Send MoveTo command with Latch = CurrentLatch, when CurrentLatch is False and LatchControlModes Bit 1 = 0",
                    "expectation": "Receive INVALID_IN_STATE response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8f"
                },
                {
                    "description": "Check PS feature support",
                    "expectation": "Skip steps 9b and 9i if the PS feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Position field is saved as CurrentPosition, Latch field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Preparing Latch-State: If the LT feature is not supported or CurrentLatch is False, skip steps 9d to 9h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 9e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 9g",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9f"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "Wait for user input to confirm the device is unlatched",
                    "is_commissioning": false,
                    "test_plan_number": "9g"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch has to be False",
                    "is_commissioning": false,
                    "test_plan_number": "9h"
                },
                {
                    "description": "Send MoveTo command with Position = CurrentPosition",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "9i"
                },
                {
                    "description": "Check SP feature support",
                    "expectation": "Skip steps 10b and 10i if the PS feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Speed field is saved as CurrentSpeed, Latch field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "Preparing Latch-State: If the LT feature is not supported or CurrentLatch is False, skip steps 10d to 10g",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 10e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "10e"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 10g",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10f"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "Wait for user input to confirm the device is unlatched",
                    "is_commissioning": false,
                    "test_plan_number": "10g"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch has to be False",
                    "is_commissioning": false,
                    "test_plan_number": "10h"
                },
                {
                    "description": "Send MoveTo command with Speed = CurrentSpeed",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "10i"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_4_4",
            "desc": "[TC-CLCTRL-4.4] MoveTo Command CountdownTime with Server as DUT",
            "function": "test_TC_CLCTRL_4_4",
            "path": "sdk/TC_CLCTRL_4_4",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the AttributeList attribute to determine supported attributes",
                    "expectation": "AttributeList of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Check if CountdownTime attribute is supported",
                    "expectation": "CountdownTime attribute should be present in the AttributeList",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Establish a wildcard subscription to all attributes on the ClosureControl cluster",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Read the FeatureMap attribute to determine supported features",
                    "expectation": "FeatureMap of the ClosureControl cluster is returned by the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Check if LT feature is supported",
                    "expectation": "Skip steps 2f to 2m if LT feature is not supported",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "Read the LatchControlModes attribute",
                    "expectation": "LatchControlModes of the ClosureControl cluster is returned by the DUT; Value saved as LatchControlModes",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Latching field is saved as CurrentLatch",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "Preparing Latch-State: If CurrentLatch is False, skip steps 2i to 2m",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0, skip step 2j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "Send MoveTo command with Latch = False",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1, skip step 2l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Unlatch the device manually",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2l"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Latch is received",
                    "expectation": "OverallCurrentState.Latch should be False",
                    "is_commissioning": false,
                    "test_plan_number": "2m"
                },
                {
                    "description": "Read the CountdownTime attribute when no operation is in progress",
                    "expectation": "CountdownTime should be 0 or null",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read the OverallCurrentState attribute",
                    "expectation": "OverallCurrentState of the ClosureControl cluster is returned by the DUT; Position field is saved as CurrentPosition",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Preparing Position-State: If CurrentPosition is FullyClosed, skip steps 4c and 4d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyClosed",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Wait until a subscription report with OverallCurrentState.Position is received",
                    "expectation": "OverallCurrentState.Position should be FullyClosed",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyOpen",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Moving",
                    "is_commissioning": false,
                    "test_plan_number": "4f"
                },
                {
                    "description": "Read the CountdownTime attribute",
                    "expectation": "CountdownTime should be between 1 and countdown_time_max, or null; Value saved as CurrentCountdownTime",
                    "is_commissioning": false,
                    "test_plan_number": "4g"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "4h"
                },
                {
                    "description": "If CurrentCountdownTime is null skip step 4j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4i"
                },
                {
                    "description": "Read the CountdownTime attribute",
                    "expectation": "CountdownTime should be 0",
                    "is_commissioning": false,
                    "test_plan_number": "4j"
                },
                {
                    "description": "If CurrentCountdownTime is null, skip steps 5b to 5f",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Send MoveTo command with Position = MoveToFullyOpen",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Read the CountdownTime attribute",
                    "expectation": "CountdownTime should be between 1 and countdown_time_max",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Send Stop command",
                    "expectation": "Receive SUCCESS response from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Wait until a subscription report with MainState is received",
                    "expectation": "MainState should be Stopped",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "Read the CountdownTime attribute",
                    "expectation": "CountdownTime should be 0",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_5_1",
            "desc": "[TC_CLCTRL_5_1] Stop Command Primary Functionality with DUT as Server",
            "function": "test_TC_CLCTRL_5_1",
            "path": "sdk/TC_CLCTRL_5_1",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the (0xFFFC) FeatureMap attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If the IS feature is supported on the cluster, skip remaining steps and end test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads from the DUT the (0xFFFB) AttributeList attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH establishes a wildcard subscription to all attributes on the Closure Control Cluster, with MinIntervalFloor = 0, MaxIntervalCeiling = 30 and KeepSubscriptions = false.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "If the LT feature is not supported on the cluster, skip steps 3a to 3j.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState.Latch attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "If the attribute is supported on the cluster, TH reads from the DUT the LatchControlModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "If CurrentLatch = True, skip steps 3e to 3i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 0 (RemoteLatching = False), skip step 3f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3e"
                },
                {
                    "description": "TH sends command MoveTo with Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3f"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 1 (RemoteLatching = True), skip step 3h.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3g"
                },
                {
                    "description": "Latch the DUT manually to set OverallCurrentState.Latch to True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3h"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3i"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3j"
                },
                {
                    "description": "If the LT feature is not supported on the cluster, skip steps 4b to 4i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip steps 4c to 4f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends command Stop to DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState.Latch attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4f"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 4h.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4g"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4h"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4i"
                },
                {
                    "description": "If the PS feature is not supported on the cluster, skip steps 5b to 5e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "If CurrentPosition is FullyClosed, skip steps 5d and 5e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "If the PS feature is not supported on the cluster, skip steps 6b to 6e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends command MoveTo to DUT, with Position = MoveToFullyOpen",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH sends command Stop to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "If the CL feature is not supported on the cluster, skip steps 7b to 7e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH sends command Stop to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is SetupRequired Test Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends command Stop to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "If the PT feature is not supported on the cluster, skip steps 9b to 9e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Protected Test Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH sends command Stop to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                },
                {
                    "description": "If the MO feature is not supported on the cluster, skip steps 10b to 10e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Disengaged Test Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH sends command Stop to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10e"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostic Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState Test Event Clear",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "If the CL feature is not supported on the cluster, skip steps 12b to 12d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH sends command Calibrate to DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH reads from the DUT the MainState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12c"
                },
                {
                    "description": "Wait until TH receives a subscription report with MainState = Stopped.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12d"
                }
            ]
        },
        {
            "class_name": "TC_CLCTRL_6_1",
            "desc": "[TC_CLCTRL_6_1] Event Functionality with DUT as Server",
            "function": "test_TC_CLCTRL_6_1",
            "path": "sdk/TC_CLCTRL_6_1",
            "pics": [
                "CLCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the (0xFFFC) FeatureMap attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads TestEventTriggerEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH reads from the DUT the (0xFFFB) AttributeList attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH establishes a wildcard subscription to all attributes on the Closure Control Cluster, with MinIntervalFloor = 0, MaxIntervalCeiling = 30 and KeepSubscriptions = false.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "If the LT feature is not supported on the cluster, skip steps 3b to 3i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState.Latch attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "If the attribute is supported on the cluster, TH reads from the DUT the LatchControlModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "If CurrentLatch = False, skip steps 3e to 3i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip step 3f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3e"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3f"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 3h.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3g"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3h"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3i"
                },
                {
                    "description": "If the PS feature is not supported on the cluster, skip steps 3k to 3n.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3j"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3k"
                },
                {
                    "description": "If CurrentPosition = FullyClosed, skip steps 3m to 3n.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3l"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3m"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3n"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_ENABLE_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Error(3) Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Verify that the DUT has emitted the OperationalError event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the CurrentErrorList attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_ENABLE_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState Test Event Clear.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "If PS feature is not supported on the cluster or IS feature is supported on the cluster, skip steps 5b to 5f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Position = FullyOpened.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Verify that the DUT has emitted the MovementCompleted event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "TH reads from the DUT the Mainstate attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                },
                {
                    "description": "If MO feature is not supported on the cluster, skip steps 6b to 6e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_ENABLE_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState is Disengaged(6) Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Verify that the DUT has emitted the EngageStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER_ENABLE_KEY and EventTrigger field set to PIXIT.CLCTRL.TEST_EVENT_TRIGGER for MainState Test Event Clear.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Verify that the DUT has emitted the EngageStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "If LT feature is supported on the cluster or PS feature is not supported on the cluster, skip steps 7b to 7f.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the OverallCurrentState attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyClosed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "If LT feature is not supported on the cluster or PS feature is supported on the cluster, skip steps 8b to 8l.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 0 (RemoteLatching = False), skip step 8c.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends command MoveTo with Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 1 (RemoteLatching = True), skip step 8e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "Latch the DUT manually to set OverallCurrentState.Latch to True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8e"
                },
                {
                    "description": "Wait until TH receives a subscription report with OverallCurrentState.Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8f"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8g"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip step 8i.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8h"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8i"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 8k.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8j"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8k"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8l"
                },
                {
                    "description": "If LT feature is not supported on the cluster or PS feature is not supported on the cluster, skip steps 9b to 9l.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 0 (RemoteLatching = False), skip step 9c.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH sends command MoveTo with Latch = True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "If LatchControlModes Bit 0 = 1 (RemoteLatching = True), skip step 9e.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "Latch the DUT manually to set OverallCurrentState.Latch to True.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9f"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 0 (RemoteUnlatching = False), skip step 9h.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9g"
                },
                {
                    "description": "TH sends command MoveTo with Latch = False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9h"
                },
                {
                    "description": "If LatchControlModes Bit 1 = 1 (RemoteUnlatching = True), skip step 9j.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9i"
                },
                {
                    "description": "Unlatch the DUT manually to set OverallCurrentState.Latch to False.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9j"
                },
                {
                    "description": "TH sends command MoveTo with Position = MoveToFullyOpen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9k"
                },
                {
                    "description": "Verify that the DUT has emitted the SecureStateChanged event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9l"
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_2_1",
            "desc": "[TC_CLDIM_2_1] Attributes with DUT as Server",
            "function": "test_TC_CLDIM_2_1",
            "path": "sdk/TC_CLDIM_2_1",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read feature map determine supported features",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Read CurrentState attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read TargetState attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read Resolution attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read StepValue attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read Unit attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read UnitRange attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read LimitRange attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read TranslationDirection attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read RotationAxis attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read Overflow attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read ModulationType attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read LatchControlModes attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_3_1",
            "desc": "[TC-CLDIM-3.1] SetTarget Command Positioning Functionality with DUT as Server",
            "function": "test_TC_CLDIM_3_1",
            "path": "sdk/TC_CLDIM_3_1",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If Positioning feature is not supported, skip remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read LimitRange attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Establish wilcard subscription to all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "If Latching feature is not supported or state is unlatched, skip steps 2g to 2l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "Read LatchControlModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "If LatchControlModes is manual unlatching, skip step 2i",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "If LatchControlModes is remote unlatching, skip step 2k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "Manually unlatch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Wait for CurrentState.Latched to be False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2l"
                },
                {
                    "description": "If Position = MaxPosition, skip steps 3b to 3d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Set Position to MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "If Speed feature is not supported or if current speed = Medium, skip steps 4b to 4d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Set Speed to Medium",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Wait for CurrentState.Speed to be updated to Medium",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Set Position to min_position",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to MinPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "If Speed feature is not supported, skip step 6b to 6d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Set Position to MaxPosition and Speed to High",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to MaxPosition and CurrentState.Speed to High",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_3_2",
            "desc": "[TC-CLDIM-3.2] SetTarget Command Latching Functionality with DUT as Server",
            "function": "test_TC_CLDIM_3_2",
            "path": "sdk/TC_CLDIM_3_2",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If MotionLatching feature is not supported, skip remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read LimitRange attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Read LatchControlModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Establish wilcard subscription to all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "If state is unlatched, skip steps 2h to 2l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "If LatchControlModes is manual unlatching, skip step 2i",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "If LatchControlModes is remote unlatching, skip step 2k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "Manually unlatch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Wait for CurrentState.Latched to be False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2l"
                },
                {
                    "description": "If manual latching is required, skip steps 3b and 3c",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Send SetTarget command with Latch=True",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Manually latch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "If manual latching is not required, skip steps 3e to 3f",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "Send SetTarget command with Latch=True",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3e"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3f"
                },
                {
                    "description": "Wait for CurrentState.Latch to be updated to True",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3g"
                },
                {
                    "description": "Send Step command while device is latched",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Send SetTarget command while device is latched",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "If manual latching is required, unlatch device manually",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "If manual latching is required, skip steps 5c to 5d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Wait for CurrentState.Latch to be updated to False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_3_3",
            "desc": "[TC-CLDIM-3.3] SetTarget Command Field Sanity Check with DUT as Server",
            "function": "test_TC_CLDIM_3_3",
            "path": "sdk/TC_CLDIM_3_3",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If Limitation feature is supported, read LimitRange attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "If Positioning feature is supported, read Resolution attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Establish wilcard subscription to all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "If Latching feature is not supported or state is unlatched, skip steps 2g to 2l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "Read LatchControlModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "If LatchControlModes is manual unlatching, skip step 2i",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "If LatchControlModes is remote unlatching, skip step 2k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "Manually unlatch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Wait for CurrentState.Latched to be False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2l"
                },
                {
                    "description": "Send SetTarget command with no fields",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If Positioning feature is supported, skip step 4b to 4e",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Send SetTarget command with Position MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Send SetTarget command with Position below MinPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Send SetTarget command with Position above MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Send SetTarget command with Position exceeding 100%",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "If LimitRange is unsupported, skip step 5b to 5g",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Send SetTarget command with Position 0%",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to MinPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "Send SetTarget command with Position 100%",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5e"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5f"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to 100%",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5g"
                },
                {
                    "description": "Send SetTarget command with invalid Position",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If Positioning feature is unsupported, skip step 7b to 7j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Send SetTarget command with Position not a multiple of Resolution",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "If not Resolution != 1: Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "If not Resolution == 1: Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "Send SetTarget command with Position not a multiple of Resolution",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7g"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7h"
                },
                {
                    "description": "If Resolution <= 2 and position change expected: Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7i"
                },
                {
                    "description": "If Resolution > 2 and position change expected: Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7j"
                },
                {
                    "description": "Send SetTarget command with Latch field when MotionLatching is unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send SetTarget command with Speed field when Speed is unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Send SetTarget command with invalid Speed when Speed is unsupported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send SetTarget command with invalid Speed",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_4_1",
            "desc": "[TC-CLDIM-4.1] Step Command Primary Functionality with DUT as Server",
            "function": "test_TC_CLDIM_4_1",
            "path": "sdk/TC_CLDIM_4_1",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If Positioning feature is not supported, skip remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read StepValue attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "If Limitation feature is supported, read LimitRange attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Establish wilcard subscription to all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "If Latching feature not supported or state is unlatched, skip steps 2h to 2m",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "Read LatchControlModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "If LatchControlModes is manual unlatching, skip step 2j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "If LatchControlModes is remote unlatching, skip step 2l",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Manually unlatch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2l"
                },
                {
                    "description": "Wait for CurrentState.Latched to be False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2m"
                },
                {
                    "description": "Send Step command to increase position to MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated to MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Send Step command to decrease position by 2 steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Send Step command to increase position by 2 steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4e"
                },
                {
                    "description": "Wait for CurrentState.Position to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4f"
                },
                {
                    "description": "If Speed Feature is not supported, skip step 5b to 5d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Send Step command to decrease position by 1 step with Speed=High",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Wait for CurrentState to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "If Speed Feature is not supported, skip step 6b to 6d",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Send Step command to increase position by 1 step with Speed=Auto",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Verify TargetState attribute is updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Wait for CurrentState to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Send Step command to decrease position by 65535",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Verify TargetState attribute is at MinPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "Wait for CurrentState to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "Send Step command to increase position by 65535",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "Verify TargetState attribute is at MaxPosition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "Wait for CurrentState to be updated",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7g"
                }
            ]
        },
        {
            "class_name": "TC_CLDIM_4_2",
            "desc": "[TC-CLDIM-4.2] Step Command Input Sanity Check with DUT as Server",
            "function": "test_TC_CLDIM_4_2",
            "path": "sdk/TC_CLDIM_4_2",
            "pics": [
                "CLDIM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "If Positioning feature is not supported, skip remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Establish wilcard subscription to all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "If Latching feature not supported or state is unlatched, skip steps 2f to 2k",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "Read LatchControlModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "If LatchControlModes is manual unlatching, skip step 2h",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2g"
                },
                {
                    "description": "Send SetTarget command with Latch=False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2h"
                },
                {
                    "description": "If LatchControlModes is remote unlatching, skip step 2j",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2i"
                },
                {
                    "description": "Manually unlatch the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2j"
                },
                {
                    "description": "Wait for CurrentState.Latched to be False",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2k"
                },
                {
                    "description": "Send Step command with invalid Direction",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send Step command with invalid Speed",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send Step command with NumberOfSteps = 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_CNET_1_4",
            "desc": "test_TC_CNET_1_4",
            "function": "test_TC_CNET_1_4",
            "path": "sdk/TC_CNET_1_4",
            "pics": [
                "CNET.S"
            ],
            "steps": [
                {
                    "description": "TH is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH performs a wildcard read of the FeatureMap attribute on Network Commissioning clusters across all endpoints, and saves the response as `NetworkCommissioningResponse`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If `NetworkCommissioningResponse` does not contain any entries for Network Commissioning cluster, skip remaining steps and end test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If `NetworkCommissioningResponse` contains only a single entry for Network Commissioning cluster on Endpoint 0, skip remaining steps and end test case. Verify `NetworkCommissioningResponse` contains an entry for Network Commissioning cluster on Endpoint 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the Descriptor Cluster DeviceTypeList attribute on each endpoint from the `NetworkCommissioningResponse` (except for Endpoint 0), verify that the Secondary Network Interface device type id (0x0019) is listed in the DeviceTypeList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the General Commissioning Cluster SupportsConcurrentConnection attribute, verify that it is true",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_1",
            "desc": "[TC-CNET-4.1] [Wi-Fi] Verification for attributes check [DUT-Server]",
            "function": "test_TC_CNET_4_1",
            "path": "sdk/TC_CNET_4_1",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads the MaxNetworks attribute from the DUT",
                    "expectation": "Verify that MaxNetworks attribute value is within a range of 1 to 255",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the SupportedWiFiBands attribute from the DUT",
                    "expectation": "Verify that SupportedWiFiBands attribute value has 1 or more entries, all of which are in the range of WiFiBandEnum.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads ScanMaxTimeSeconds attribute from the DUT",
                    "expectation": "Verify that ScanMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads ConnectMaxTimeSeconds attribute from the DUT",
                    "expectation": "Verify that ConnectMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on all available endpoints",
                    "expectation": "Verify that each element in the Networks attribute list has the following fields: 'NetworkID', 'connected'.\n                      NetworkID field is of type octstr with a length range 1 to 32 \n                      The connected field is of type bool \n                      Verify that only one entry has connected status as TRUE \n                      Verify that the number of entries in the Networks attribute is less than or equal to 'MaxNetworksValue'",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Skip remaining steps if the connected network is not on the cluster currently being verified.TH reads InterfaceEnabled attribute from the DUT",
                    "expectation": "Verify that InterfaceEnabled attribute value is true",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads LastNetworkingStatus attribute from the DUT",
                    "expectation": "LastNetworkingStatus attribute value will be within any one of the following values                       Success, NetworkNotFound, OutOfRange, RegulatoryError, UnknownError, null",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads the LastNetworkID attribute from the DUT. TH reads the Networks attribute from the DUT",
                    "expectation": "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in the Networks attribute list",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads the LastConnectErrorValue attribute from the DUT",
                    "expectation": "Verify that LastConnectErrorValue attribute value is null",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_10",
            "desc": "[TC-CNET-4.10] [Thread] Verification for RemoveNetwork Command [DUT-Server]",
            "function": "test_TC_CNET_4_10",
            "path": "sdk/TC_CNET_4_10",
            "pics": [
                "CNET.S",
                "CNET.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "DUT is commissioned, TH can communicate with the DUT on thread dataset provided in --thread-dataset-hex parameter.",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on all endpoints (all network commissioning clusters).",
                    "expectation": "Verify that there is a single connected network across ALL network commissioning clusters. ",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Skip remaining steps if the connected network is NOT on the cluster currently being verified.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900 and Breadcrumb set to 0",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads Networks attribute from the DUT and save the number of entries as 'NumNetworks'",
                    "expectation": "Verify that the Networks attribute list has an entry with the following values: 1. NetworkID field value set as the Extended PAN ID from the operational dataset 2. Connected field value is of type boolean and has the value True",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to the Extended PAN ID from the operational dataset and Breadcrumb field set to 1",
                    "expectation": "Verify that DUT sends NetworkConfigResponse to command with the following fields: 1. NetworkingStatus is success 2. NetworkIndex is 'Userth_netidx'",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads Networks attribute from the DUT",
                    "expectation": "Verify that the Networks attribute list has 'NumNetworks' - 1 entries",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads LastNetworkingStatus attribute from the DUT",
                    "expectation": "Verify that DUT sends LastNetworkingStatus as Success which is 0 or null if 'NumNetworks' - 1 == 0 entries.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads LastNetworkID attribute from the DUT",
                    "expectation": "Verify that DUT sends LastNetworkID as the Extended PAN ID from the operational dataset or null if 'NumNetworks' - 1 == 0 entries.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster",
                    "expectation": "Verify that the breadcrumb value is set to 1",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends ConnectNetwork command to the DUT with NetworkID field set to the Extended PAN ID from the operational dataset and Breadcrumb set to 2",
                    "expectation": "Verify that the DUT sends a ConnectNetworkResponse to the command with the NetworkingStatus field set to NetworkIdNotFound",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster",
                    "expectation": "Verify that the breadcrumb value is set to 1",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0 and Breadcrumb set to 0",
                    "expectation": "Verify that the DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads Networks attribute from the DUT",
                    "expectation": "Verify that the Networks attribute list contains 'NumNetworks' entries and has an entry with the following values:1. NetworkID field value set as the Extended PAN ID from the operational dataset 2. Connected field value is of type boolean and has the value True",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900 and Breadcrumb set to 0",
                    "expectation": "Verify that the DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID set to the Extended PAN ID from the operational dataset and Breadcrumb set to 1",
                    "expectation": "Verify that the DUT sends NetworkConfigResponse to command with the following fields: 1. NetworkingStatus is success 2. NetworkIndex is 'Userth_netidx'",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends CommissioningComplete command to the DUT",
                    "expectation": "Verify that the DUT sends CommissioningCompleteResponse to the command with the ErrorCode field set to OK (0)",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0 and Breadcrumb set to 0",
                    "expectation": "Verify that the DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH reads Networks attribute from the DUT",
                    "expectation": "Verify that the Networks attribute list contains 'NumNetworks' -1 entries and does not contain the Extended PAN ID from the operational dataset",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "(Cleanup) TH adds the Thread network back to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_12",
            "desc": "[TC-CNET-4.12] [Thread] Verification for ConnectNetwork Command [DUT-Server]",
            "function": "test_TC_CNET_4_12",
            "path": "sdk/TC_CNET_4_12",
            "pics": [
                "CNET.S.F01"
            ],
            "steps": [
                {
                    "description": "TH is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "expectation": "Verify that DUT responds with ArmFailSafeResponse to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads Networks attribute from the DUT and saves the number of entries as `NumNetworks`",
                    "expectation": "* Verify that the Networks attribute list has an entry with the following fields:\n. NetworkID is `th_xpan_1`\n. Connected is of type bool and is TRUE",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH saves the index of the Networks list entry from step 2 as `Userth_netidx`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to `th_xpan_1` and Breadcrumb field set to 1",
                    "expectation": "* Verify that DUT sends NetworkConfigResponse to command with the following response fields:\n. NetworkingStatus is success\n. NetworkIndex is `Userth_netidx`",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends AddOrUpdateThreadNetwork command to the DUT with operational dataset field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "expectation": "* Verify that DUT sends the NetworkConfigResponse command to the TH with the following fields:\n. NetworkingStatus is success which is '0'\n. DebugText is of type string with max length 512 or empty",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads Networks attribute from the DUT",
                    "expectation": "* Verify that the Networks attribute list has an entry with the following fields:\n. NetworkID is `th_xpan_2`\n. Connected is of type bool and is FALSE",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 2",
                    "expectation": "Wait for device to connect to the Thread network. A wait time of `connect_max_time_seconds + fudge_factor_seconds` is applied to allow Thread network connection and SRP record propagation",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH discovers and connects to DUT on the PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET operational network",
                    "expectation": "Verify that the TH successfully connects to the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "expectation": "Verify that the breadcrumb value is set to 2",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH ensures it can communicate with THREAD_1ST_OPERATIONALDATASET operational network (from --thread-dataset-hex)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH discovers and connects to DUT on the THREAD_1ST_OPERATIONALDATASET operational network (from --thread-dataset-hex)",
                    "expectation": "Verify that the TH successfully connects to the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to 'th_xpan_1' and Breadcrumb field set to 1",
                    "expectation": "* Verify that DUT sends NetworkConfigResponse to command with the following fields:. NetworkingStatus is success. NetworkIndex is `Userth_netidx`",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends AddOrUpdateThreadNetwork command to the DUT with the OperationalDataset field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "expectation": "* Verify that DUT sends the NetworkConfigResponse command to the TH with the following fields:\n . NetworkingStatus is success which is '0'\n. DebugText is of type string with max length 512 or empty",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends ConnectNetwork command to the DUT with NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 3",
                    "expectation": "Wait for device to connect to the Thread network. A wait time of `connect_max_time_seconds + fudge_factor_seconds` is applied to allow Thread network connection and SRP record propagation",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH discovers and connects to DUT on the PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET operational network",
                    "expectation": "Verify that the TH successfully connects to the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "expectation": "Verify that the breadcrumb value is set to 3. Note: Wait for device to connect to the Thread network. A wait time of `connect_max_time_seconds + fudge_factor_seconds` is applied to allow Thread network connection and SRP record propagation",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH sends the CommissioningComplete command to the DUT",
                    "expectation": "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads Networks attribute from the DUT",
                    "expectation": "* Verify that the Networks attribute list has an entry with the following values:\n. NetworkID field value as the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET\n. Connected field value is of type bool and is TRUE",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH switches back to THREAD_1ST_OPERATIONALDATASET operational network (from --thread-dataset-hex)",
                    "expectation": "* Verify that the Networks attribute list has an entry with the following values:\n  . NetworkID field value as the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET\n  . Connected field value is of type bool and is TRUE",
                    "is_commissioning": false,
                    "test_plan_number": 21
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_15",
            "desc": "test_TC_CNET_4_15",
            "function": "test_TC_CNET_4_15",
            "path": "sdk/TC_CNET_4_15",
            "pics": [
                "CNET.S.F00(WI)"
            ],
            "steps": [
                {
                    "description": "DUT is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, which does not match the provisioned network, and Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends ConnectNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, which does not match the provisioned network, and Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_16",
            "desc": "[TC-CNET-4.16] [Thread] NetworkIDNotFound returned in LastNetworkingStatus field validation [DUT-Server]",
            "function": "test_TC_CNET_4_16",
            "path": "sdk/TC_CNET_4_16",
            "pics": [],
            "steps": [
                {
                    "description": "TH is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET, which does not match the commissioned network, and Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends ConnectNetwork Command to the DUT with NetworkID value as the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET, which does not match the commissioned network, and Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_2",
            "desc": "[TC-CNET-4.2] [Thread] Verification for attributes check [DUT-Server]",
            "function": "test_TC_CNET_4_2",
            "path": "sdk/TC_CNET_4_2",
            "pics": [
                "CNET.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "DUT is commissioned, TH can communicate with the DUT on thread dataset provided in --thread-dataset-hex parameter.",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on all endpoints (all network commissioning clusters).",
                    "expectation": "Verify that there is a single connected network across ALL network commissioning clusters. ",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Skip remaining steps if the connected network is NOT on the cluster currently being verified.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the MaxNetworks attribute from the DUT.",
                    "expectation": "Verify that MaxNetworks attribute value is within a range of 1 to 255.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on current endpoint.",
                    "expectation": "Verify that each element in the Networks attribute list has the following fields: 'NetworkID', 'connected'.NetworkID field is of type octstr with a length range 1 to 32.The connected field is of type bool.Verify that the number of entries in the Networks attribute is less than or equal to 'MaxNetworksValue'.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads ScanMaxTimeSeconds attribute from the DUT.",
                    "expectation": "Verify that ScanMaxTimeSeconds attribute value is within the range of 1 to 255 seconds.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads ConnectMaxTimeSeconds Attribute from the DUT.",
                    "expectation": "Verify that ConnectMaxTimeSeconds attribute value is within the range of 1 to 255 seconds.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads InterfaceEnabled attribute from the DUT.",
                    "expectation": "Verify that InterfaceEnabled attribute value is true.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads LastNetworkingStatus attribute from the DUT.",
                    "expectation": "Verify that LastNetworkingStatus attribute value is Success.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads the LastNetworkID attribute from the DUT.",
                    "expectation": "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in the Networks attribute list.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads the SupportedThreadFeatures attribute from the DUT.",
                    "expectation": "Verify that SupportedThreadFeatures attribute value is an empty bitmap (value 0).Verify that Bit 4 (IsSynchronizedSleepyEndDeviceCapable) is only set if bit 2 (IsSleepyEndDeviceCapable) is also set.Verify that Bit 0 (IsBorderRouterCapable) is only set if bit 3 (IsFullThreadDevice) is also set.Verify that Bit 1 (IsRouterCapable) is only set if bit 3 (IsFullThreadDevice) is also set.Verify that at least one of the following bits is set: Bit 4 (IsSynchronizedSleepyEndDeviceCapable), Bit 2 (IsSleepyEndDeviceCapable), Bit 3 (IsFullThreadDevice).",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads the ThreadVersion attribute from the DUT.",
                    "expectation": "Verify that ThreadVersion attribute value is greater than or equal to 4.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_22",
            "desc": "test_TC_CNET_4_22",
            "function": "test_TC_CNET_4_22",
            "path": "sdk/TC_CNET_4_22",
            "pics": [
                "CNET.S.F01"
            ],
            "steps": [
                {
                    "description": "TH is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "Precondition"
                },
                {
                    "description": "TH sends ScanNetworks command to the DUT with the SSID field omitted and the Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends ScanNetworks command to the DUT with the SSID field set to null and the Breadcrumb field set to 2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends ScanNetworks command to the DUT with the SSID field set to a random string of ASCII characters with a size of between 1 and 31 characters and the Breadcrumb field set to 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_3",
            "desc": "[TC-CNET-4.3] [Ethernet] Verification for attributes check [DUT-Server]",
            "function": "test_TC_CNET_4_3",
            "path": "sdk/TC_CNET_4_3",
            "pics": [
                "CNET.S.F02"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the MaxNetworks attribute from the DUT",
                    "expectation": "Verify that MaxNetworks attribute value is within a range of 1 to 255",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on all endpoints (all network commissioning clusters of the DUT)",
                    "expectation": "Verify that each element in the Networks attribute list has the following fields: 'NetworkID', 'connected'.\n                      NetworkID field is of type octstr with a length range 1 to 32 \n                      The connected field is of type bool \n                      Verify that there is a single connected network across ALL network commissioning clusters \n                      Verify that the number of entries in the Networks attribute is less than or equal to 'MaxNetworksValue'",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Skip remaining steps if the connected network is not on the cluster currently being verified.TH reads InterfaceEnabled attribute from the DUT. Skip this and remaining steps if the connected network is not on the cluster currently being verified.",
                    "expectation": "Verify that InterfaceEnabled attribute value is true",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads LastNetworkingStatus attribute from the DUT",
                    "expectation": "LastNetworkingStatus attribute value is Success",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads the LastNetworkID attribute from the DUT",
                    "expectation": "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in the Networks attribute list",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads the LastConnectErrorValue attribute from the DUT",
                    "expectation": "Verify that LastConnectErrorValue attribute value is null",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_4",
            "desc": "test_TC_CNET_4_4",
            "function": "test_TC_CNET_4_4",
            "path": "sdk/TC_CNET_4_4",
            "pics": [
                "CNET.S"
            ],
            "steps": [
                {
                    "description": "TH is commissioned",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH reads from the DUT the Network Commissioning Cluster FeatureMap. If the FeatureMap does not include the WI flag (bit 0), skip the remaining steps in this test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedWifiBands attribute and saves as supported_wifi_bands",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the Networks attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends ScanNetworks command to the DUT with the SSID field set to null and Breadcrumb field set to 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the Breadcrumb attribute from the General Commissioning Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends ScanNetworks Command to the DUT with SSID field set to known_ssid and Breadcrumb field set to 2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends ScanNetworks Command to the DUT with SSID field set to a string of 31 random alphabetical characters and Breadcrumb field set to 2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_CNET_4_9",
            "desc": "test_TC_CNET_4_9",
            "function": "test_TC_CNET_4_9",
            "path": "sdk/TC_CNET_4_9",
            "pics": [
                "CNET.S.F00"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "DUT is commissioned on wifi network provided in --wifi-ssid parameter; TH can communicate with the DUT",
                    "is_commissioning": true,
                    "test_plan_number": "Precondition"
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900.",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the Networks attribute list from the DUT on all endpoints (all network commissioning clusters).",
                    "expectation": "Verify that there is a single connected network across ALL network commissioning clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Skip remaining steps if the connected network is NOT on the cluster currently being verified.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads Networks attribute from the DUT on the current endpoint and saves the number of entries as 'NumNetworks'",
                    "expectation": "Verify that the Networks attribute list has an entry with the following values: 1. NetworkID field value as provided in the `--wifi-ssid` parameter; 2. Connected field value is of type bool and has the value true.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH finds the index of the Networks list entry with NetworkID field value as provided in the `--wifi-ssid` parameter and saves it as Userwifi_netidx.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to the as provided in the `--wifi-ssid` parameter and Breadcrumb field set to 1.",
                    "expectation": "Verify that DUT sends NetworkConfigResponse to command with the following fields: 1. NetworkingStatus is success; 2. NetworkIndex is 'Userwifi_netidx'",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads Networks attribute from the DUT on the current endpoint.",
                    "expectation": "Verify that the Networks attribute list has 'NumNetworks' - 1 entries",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads LastNetworkingStatus attribute from the DUT.",
                    "expectation": "Verify that DUT sends LastNetworkingStatus as Success which is 0 or null if 'NumNetworks' - 1 == 0 entries.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads LastNetworkID attribute from the DUT.",
                    "expectation": "Verify that DUT sends LastNetworkID as value provided in the `--wifi-ssid` parameter or null if 'NumNetworks' - 1 == 0 entries.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT.",
                    "expectation": "Verify that the breadcrumb value is set to 1.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends ConnectNetwork command to the DUT with NetworkID field set to the value provided in the `--wifi-ssid` parameter and Breadcrumb field set to 2.",
                    "expectation": "Verify that the DUT sends a ConnectNetworkResponse to the command with the NetworkingStatus field set to NetworkIdNotFound",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT.",
                    "expectation": "Verify that the breadcrumb value is set to 1.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads Networks attribute from the DUT on the current endpoint",
                    "expectation": "Verify that the Networks attribute list contains 'NumNetworks' entries and has an entry with the following fields: NetworkID is the hex representation of the ASCII values for the value provided in the `--wifi-ssid` parameter;Connected is of type bool and has the value true",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends RemoveNetwork Command to the DUT with NetworkID field set to the value provided in the `--wifi-ssid` parameter and Breadcrumb field set to 1",
                    "expectation": "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is success",
                    "is_commissioning": "NetworkIndex is 'Userwifi_netidx'",
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends the CommissioningComplete command to the DUT",
                    "expectation": "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0 to ensure the CommissioningComplete call properly persisted the failsafe context. This call should have no effect if Commissioning Complete call is handled correctly",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH reads Networks attribute from the DUT on the current endpoint",
                    "expectation": "Verify that the Networks attribute list has 'NumNetworks' - 1 entries and does NOT contain an entry with the NetworkID value provided in the `--wifi-ssid` parameter",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse command to the TH.",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH sends the AddOrUpdateWiFiNetwork command to the DUT",
                    "expectation": "Verify that DUT sends the NetworkConfigResponse to each command with the following fields: NetworkingStatus is success which is 0",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH sends the CommissioningComplete command to the DUT",
                    "expectation": "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "is_commissioning": false,
                    "test_plan_number": 22
                }
            ]
        },
        {
            "class_name": "TC_COLORCONTROL",
            "desc": "[TC_COLORCONTROL] chef colortemperaturelight functionality test.",
            "function": "test_TC_COLORCONTROL",
            "path": "sdk/TC_COLORCONTROL",
            "pics": [],
            "steps": [
                {
                    "description": "[TC_COLORCONTROL] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[TC_COLORCONTROL] Test move-color-temperature command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_COMMTR_2_1",
            "desc": "Attributes with Server as DUT",
            "function": "test_TC_COMMTR_2_1",
            "path": "sdk/TC_COMMTR_2_1",
            "pics": [
                "COMMTR.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "DUT is commissioned",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads MaximumMeteredQuantities attribute",
                    "expectation": "\n                     - DUT replies a null value or a uint16 value;\n                     - Store value as MaxMeteredQuantities.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads MeteredQuantity attribute",
                    "expectation": "\n                     - DUT replies Null or a list of MeteredQuantityStruct entries.\n                     - Verify that the list length less or equal MaxMeteredQuantities from step 3;\n                     - Verify that the TariffComponentIDs field is a list of uint32 values with length less or equal 128;\n                     - Verify that the Quantity field has int64 type;",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads MeteredQuantityTimestamp attribute",
                    "expectation": "DUT replies a null value or epoch-s type.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads TariffUnit attribute",
                    "expectation": "DUT replies a null value or TariffUnitEnum value in range 0-1.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                }
            ]
        },
        {
            "class_name": "TC_COMMTR_3_1",
            "desc": "Subscription Report Verification with Server as DUT",
            "function": "test_TC_COMMTR_3_1",
            "path": "sdk/TC_COMMTR_3_1",
            "pics": [
                "COMMTR.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "DUT is commissioned",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to the Commodity Metering cluster attributes:\n                     - MinIntervalFloor: 0\n                     - MaxIntervalCeiling: 10",
                    "expectation": "Subscription is established successfully.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads MaximumMeteredQuantities attribute.",
                    "expectation": "\n                     - DUT replies a uint16 value or null;\n                     - Value is saved as MaxMeteredQuantitiesValue.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads MeteredQuantity attribute.",
                    "expectation": "\n                     - DUT replies a list of MeteredQuantityStruct entries with length less or equal MaximumMeteredQuantitiesValue from step 2, or null;\n                     - For each entry:\n                        - TariffComponentIDs field has a list of uint32 value with length less or equal 128;\n                        - Quantity field has an int64 value;\n                     - Value is saved as MeteredQuantityValue.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads MeteredQuantityTimestamp attribute.",
                    "expectation": "\n                     - DUT replies a epoch-s value, or null;\n                     - Value is saved as MeteredQuantityTimestampValue.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads TariffUnit attribute.",
                    "expectation": "\n                     - DUT replies a TariffUnitEnum value in range 0-1, or null;\n                     - Value is saved as TariffUnitValue.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "Values is True.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.COMMTR.TEST_EVENT_TRIGGER_KEY \n                     and EventTrigger field set to PIXIT.COMMTR.TEST_EVENT_TRIGGER for Attributes Value Set Test Event.",
                    "expectation": "Status code must be SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH awaits a MaximumMeteredQuantities attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and it contains a uint16 value, or null;\n                     - Verify the report is received and the value does not match the MaxMeteredQuantitiesValue.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH awaits a MeteredQuantity attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and it contains a list of MeteredQuantityStruct entries with length less or equal MaximumMeteredQuantitiesValue from step 9, or null;\n                     - For each entry:\n                        - TariffComponentIDs field has a list of uint32 value with length less or equal 128;\n                        - Quantity field has an int64 value;\n                     - The value does not match the MeteredQuantityValue.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH awaits a MeteredQuantityTimestamp attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and it contains a epoch-s value, or null;\n                     - The value does not match the MeteredQuantityTimestampValue.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH awaits a TariffUnit attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and it contains a TariffUnitEnum value in range 0-1, or null;\n                     - The value does not match the TariffUnitValue.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.COMMTR.TEST_EVENT_TRIGGER_KEY and \n                     EventTrigger field set to PIXIT.COMMTR.TEST_EVENT_TRIGGER for Test Event Clear.",
                    "expectation": "Status code must be SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH removes the subscription the Commodity Metering cluster.",
                    "expectation": "Subscription is removed successfully.",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                }
            ]
        },
        {
            "class_name": "TC_DA_1_2",
            "desc": "Device Attestation Request Validation [DUT - Commissionee]",
            "function": "test_TC_DA_1_2",
            "path": "sdk/TC_DA_1_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH1 generates 32-byte AttestationNonce and saves as `nonce",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 sends AttestationRequest Command to the DUT with AttestationNonce set to `nonce`",
                    "expectation": "Verify AttestationResponse is received",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends CertificateChainRequest Command with CertificateType field set to DACCertificate (1) to DUT to obtain DAC",
                    "expectation": "DUT responds with CertificateChainResponse the DAC certificate in X.509v3 format with size \u21d0 600 bytes",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH1 sends CertificateChainRequest Command with CertificateType field set to PAICertificate (2) to DUT to obtain PAI",
                    "expectation": "DUT responds with CertificateChainResponse the PAI certificate in X.509v3 format with size \u21d0 600 bytes",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH1 Reads the VendorID attribute of the Basic Information cluster and saves it as `basic_info_vendor_id`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH1 Reads the ProductID attribute of the Basic Information cluster and saves it as `basic_info_product_id`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Extract the attestation_elements_message structure fields from the AttestationResponse",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verify AttestationElements field size",
                    "expectation": "AttestationElements field size should not be greater than RESP_MAX(900 bytes)",
                    "is_commissioning": false,
                    "test_plan_number": "5.1"
                },
                {
                    "description": "Verify certification_declaration format",
                    "expectation": "certification_declaration is present and is an octet string representation CMS-format certification declaration, as described in section 6.3.1",
                    "is_commissioning": false,
                    "test_plan_number": "5.2"
                },
                {
                    "description": "Verify CD format_version",
                    "expectation": "format_version = 1",
                    "is_commissioning": false,
                    "test_plan_number": "6.1"
                },
                {
                    "description": "Verify CD vendor_id",
                    "expectation": "vendor_id field matches `basic_info_vendor_id` and is in the standard vendor ID range",
                    "is_commissioning": false,
                    "test_plan_number": "6.2"
                },
                {
                    "description": "Verify CD product_id_array",
                    "expectation": "product_id_array field contains `basic_info_product_id`",
                    "is_commissioning": false,
                    "test_plan_number": "6.3"
                },
                {
                    "description": "Verify CD device_type_id",
                    "expectation": "device_type_id has a value between 0 and (2^31 - 1)",
                    "is_commissioning": false,
                    "test_plan_number": "6.4"
                },
                {
                    "description": "Verify CD certificate_id",
                    "expectation": "certificate_id has a length of 19",
                    "is_commissioning": false,
                    "test_plan_number": "6.5"
                },
                {
                    "description": "Verify CD security level",
                    "expectation": "security level = 0",
                    "is_commissioning": false,
                    "test_plan_number": "6.6"
                },
                {
                    "description": "Verify CD security_information",
                    "expectation": "security_information = 0",
                    "is_commissioning": false,
                    "test_plan_number": "6.7"
                },
                {
                    "description": "Verify CD version_number",
                    "expectation": "version_number is an integer in range 0..65535",
                    "is_commissioning": false,
                    "test_plan_number": "6.8"
                },
                {
                    "description": "Verify CD certification_type",
                    "expectation": "certification_type has a value between 1..2",
                    "is_commissioning": false,
                    "test_plan_number": "6.9"
                },
                {
                    "description": "Extract the Vendor ID (VID) and Product ID (PID) from the DAC. Extract the VID from the PAI. Extract the PID from the PAI, if present",
                    "expectation": "VID and PID are present and properly encoded in the DAC. VID is present and properly encoded in the PAI. If the PID is present in the PAI, it is properly encoded",
                    "is_commissioning": false,
                    "test_plan_number": "7.0"
                },
                {
                    "description": "",
                    "expectation": "If the dac_origin_vendor_id is present in the CD, confirm the dac_origin_product_id is also present. If the dac_origin_vendor_id is not present in the CD, confirm the dac_origin_product_id is also not present.",
                    "is_commissioning": false,
                    "test_plan_number": "7.1"
                },
                {
                    "description": "If the Certification Declaration has both the dac_origin_vendor_id and the dac_origin_product_id fields, verify dac_origin fields",
                    "expectation": "* The Vendor ID (VID) in the DAC subject and PAI subject are the same as the dac_origin_vendor_id field in the Certification Declaration.\n* The Product ID (PID) in the DAC subject is same as the dac_origin_product_id field in the Certification Declaration.\n* If it is present in the PAI certificate, the Product ID (PID) in the subject is same as the dac_origin_product_id field in the Certification Declaration.\n",
                    "is_commissioning": false,
                    "test_plan_number": "7.2"
                },
                {
                    "description": "If the Certification Declaration has neither the dac_origin_vendor_id nor the dac_origin_product_id fields, verify the vendor_id and product_id_array fields",
                    "expectation": "* The Vendor ID (VID) in the DAC subject and PAI subject are the same as the vendor_id field in the Certification Declaration.\n* The Product ID (PID) subject DN in the DAC is contained in the product_id_array field in the Certification Declaration.\n* If it is present in the PAI certificate, the Product ID (PID) in the subject is contained in the product_id_array field in the Certification Declaration.\n",
                    "is_commissioning": false,
                    "test_plan_number": "7.3"
                },
                {
                    "description": "If the Certification Declaration has authorized_paa_list, check that the authority_key_id extension of the PAI matches one found in the authorized_paa_list",
                    "expectation": "PAA from PAI authority_key_id extension matches one found in authorized_paa_list",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Verify that the certification_declaration CMS enveloped can be verified with the well-known Certification Declaration public key used to originally sign the Certification Declaration",
                    "expectation": "Signature verification passes",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Verify attestation_nonce",
                    "expectation": "* attestation_nonce is present in the attestation_elements_message structure\n* attestation_nonce value matches the AttestationNonce field value sent in the AttestationRequest Command sent by the commissioner\n* attestation_nonce is a 32 byte-long octet string\n",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "If firmware_information is present, verify firmware information type",
                    "expectation": "firmware_information is an octet string",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Using Crypto_Verify cryptographic primitive, validate that the AttestationSignature from the AttestationResponse Command is valid if verified against a message constructed by concatenating AttestationElements with the attestation challenge associated with the secure session over which the AttestationResponse was obtained, using the subject public key found in the DAC.",
                    "expectation": "Signature is valid",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 sends AttestationRequest Command with Invalid AttestationNonce (size > 32 bytes) as the field to the DUT.",
                    "expectation": "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 sends AttestationRequest Command with invalid AttestationNonce (size < 32 bytes) as the field to the DUT.",
                    "expectation": "Verify that the DUT reports an INVALID_COMMAND error",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_DA_1_5",
            "desc": "test_TC_DA_1_5",
            "function": "test_TC_DA_1_5",
            "path": "sdk/TC_DA_1_5",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DA_1_7",
            "desc": "test_TC_DA_1_7",
            "function": "test_TC_DA_1_7",
            "path": "sdk/TC_DA_1_7",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DA_1_9",
            "desc": "[TC-DA-1.9] Device Attestation Revocation [DUT-Commissioner]",
            "function": "test_TC_DA_1_9",
            "path": "sdk/TC_DA_1_9",
            "pics": [
                "MCORE.ROLE.COMMISSIONER"
            ],
            "steps": [
                {
                    "description": "Test commissioning with revoked DAC",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Test commissioning with revoked PAI",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Test commissioning with both DAC and PAI revoked",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Test commissioning with revoked DAC using delegated CRL signer",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Test commissioning with revoked PAI using delegated CRL signer",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Test commissioning with both DAC and PAI revoked using delegated CRL signer",
                    "expectation": "(DUT)Commissioner warns about commissioning the non-genuine device, Or Commissioning fails with device appropriate attestation error",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Test commissioning with valid DAC and PAI",
                    "expectation": "Commissioning succeeds without any attestation errors",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_DEMM_1_2",
            "desc": "[TC-DEMM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_DEMM_1_2",
            "path": "sdk/TC_DEMM_1_2",
            "pics": [
                "DEMM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_1",
            "desc": "4.1.2. [TC-DEM-2.1] Attributes with DUT as Server",
            "function": "test_TC_DEM_2_1",
            "path": "sdk/TC_DEM_2_1",
            "pics": [
                "DEM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT FeatureMap attribute.",
                    "expectation": "Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT ESAType attribute.",
                    "expectation": "Verify that the DUT response contains an a ESATypeEnum (enum8) value to match the DUT type.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the ESACanGenerate attribute.",
                    "expectation": "Verify that the DUT response contains a boolean value to match the DUT capability.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT ESAState attribute.",
                    "expectation": "Verify that the DUT response contains an a ESAStateEnum (enum8) value to match the DUT state (Online or Offline).",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the AbsMinPower attribute.",
                    "expectation": "Verify that the DUT response contains a power-mW value to match the DUT capability, and is negative if and only if the ESACanGenerate read in step 4 is TRUE.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the AbsMaxPower attribute.",
                    "expectation": "Verify that the DUT response contains a power-mW value to match the DUT capability, and greater than or equal to the AbsMinPower read in step 6.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability attribute.",
                    "expectation": "Verify that the DUT response contains either a null value or a PowerAdjustCapabilityStruct value which contains a list of PowerAdjustStruct values and a valid Cause PowerAdjustReasonEnum (enum8) value.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "If PFR or SFR feature is supported on the cluster, TH reads from the DUT the Forecast attribute.",
                    "expectation": "Verify that the DUT response contains either a null value or a valid ForecastStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "If PA, STA, PAU, FA or CON feature is supported on the cluster, TH reads from the DUT the OptOutState attribute.",
                    "expectation": "Verify that the DUT response contains an OptOutStateEnum (enum8) value.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_10",
            "desc": "4.1.3. [TC-DEM-2.10] This test case verifies attributes of the Device Energy Mangement cluster server having the Q quality.",
            "function": "test_TC_DEM_2_10",
            "path": "sdk/TC_DEM_2_10",
            "pics": [
                "DEM.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the FeatureMap",
                    "expectation": "Verify that the DUT response contains the FeatureMap attribute. Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Set up a subscription to the DeviceEnergyManagement cluster, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 10 and KeepSubscriptions set to false",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.DEM.TESTEVENTTRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "If ForecastAdjustment feature is not supported on the cluster skip steps 7 to 14",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.DEM.TESTEVENTTRIGGER for Forecast Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Reset all accumulated report counts, then wait 12 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the Forecast attribute",
                    "expectation": "TH verifies that numberOfReportsReceived <= 2",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include slots[0].MinDurationAdjustment, slots[0].MaxDurationAdjustment",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "If PowerForecastReporting feature is supported on the cluster TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment, NominalPower=forecast.slots[0].minPowerAdjustment}, Cause=GridOptimization, else StateForecastReporting shall be used, omit the NominalPower: TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH resets all accumulated report counts, then TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "Wait 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the Forecast attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.DEM.TESTEVENTTRIGGER for Forecast Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "If PowerAdjustment feature is not supported on the cluster skip steps 16 to 21",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.DEM.TESTEVENTTRIGGER for Power Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=NoAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "16b"
                },
                {
                    "description": "TH resets all accumulated report counts, then TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=20, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "Wait 12 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the PowerAdjustmentCapability attribute",
                    "expectation": "TH verifies that numberOfReportsReceived <= 2",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH resets all accumulated report counts, then TH sends command CancelPowerAdjustment",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "Wait 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the PowerAdjustmentCapability attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >=1",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.DEM.TESTEVENTTRIGGER for Power Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "Cancel the subscription to the Device Energy Management cluster",
                    "expectation": "The subscription is cancelled successfully",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_2",
            "desc": "4.1.3. [TC-DEM-2.2] Power Adjustment feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_2",
            "path": "sdk/TC_DEM_2_2",
            "pics": [
                "DEM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify PowerAdjustment is supported.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Set up a subscription to all DeviceEnergyManagement cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Power Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=NoAdjustment. Note value for later. Determine the OverallMaxPower and OverallMaxDuration as the largest MaxPower and MaxDuration of the PowerAdjustStructs returned, and similarly the OverallMinPower and OverallMinDuration as the smallest of the MinPower and MinDuration values.",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=PowerAdjustmentCapability[0].MinDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E00(PowerAdjustStart) sent",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x04 (PowerAdjustActive)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=LocalOptimizationAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends command CancelPowerAdjustRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E01(PowerAdjustEnd) sent with Cause=Cancelled",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=NoAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH sends command CancelPowerAdjustRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=OverallMaxPower+1 Duration=OverallMinDuration Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=OverallMinPower Duration=OverallMaxDuration+1 Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=OverallMinPower-1 Duration=OverallMaxDuration Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=OverallMaxPower Duration=OverallMinDuration-1 Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=PowerAdjustmentCapability[0].MinDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event DEM.S.E00(PowerAdjustStart) sent",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=LocalOptimizationAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=PowerAdjustmentCapability[0].MinDuration, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and no event sent",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x04 (PowerAdjustActive)",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=GridOptimizationAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and no event sent",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x04 (PowerAdjustActive)",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=PowerAdjustmentCapability[0].MinDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event DEM.S.E01(PowerAdjustEnd) sent with Cause=UserOptOut, Duration= approx time from step 11 to step 15, EnergyUse= a valid value",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "17b"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=NoAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "17c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "18b"
                },
                {
                    "description": "TH sends command PowerAdjustRequest with Power=PowerAdjustmentCapability[0].MaxPower, Duration=PowerAdjustmentCapability[0].MinDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event DEM.S.E00(PowerAdjustStart) sent",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x04 (PowerAdjustActive)",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=LocalOptimizationAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "19b"
                },
                {
                    "description": "Wait 10 seconds",
                    "expectation": "Event DEM.S.E01(PowerAdjustEnd) sent with Cause=NormalCompletion, Duration in the range 10-12s, EnergyUse= a valid value",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH reads from the DUT the PowerAdjustmentCapability",
                    "expectation": "Value has to include Cause=NoAdjustment.",
                    "is_commissioning": false,
                    "test_plan_number": "20b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Power Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_3",
            "desc": "4.1.3. [TC-DEM-2.3] Start Time Adjustment feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_3",
            "path": "sdk/TC_DEM_2_3",
            "pics": [
                "DEM.S.F03"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify StartTimeAdjustment feature is supported on the cluster. Verify PowerForecastReporting or StateForecastReporting feature is supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Start Time Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include EarliestStartTime<=StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x01 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH sends command StartTimeAdjustRequest with RequestedStartTime=EarliestStartTime from Forecast, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to be unchanged from step 3b",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH sends command StartTimeAdjustRequest with RequestedStartTime=EarliestStartTime from Forecast, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include EarliestStartTime=StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Local Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x01 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include EarliestStartTime<=StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH sends command StartTimeAdjustRequest with RequestedStartTime=StartTime+(LatestEndTime-EndTime) from Forecast, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include EarliestStartTime<=StartTime, LatestEndTime=EndTime, and ForecastUpdateReason=Grid Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include EarliestStartTime<=StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH sends command StartTimeAdjustRequest with RequestedStartTime=EarliestStartTime-1 from Forecast, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include StartTime and EndTime unchanged from step 10b",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH sends command StartTimeAdjustRequest with RequestedStartTime=StartTime+(LatestEndTime-EndTime)+1 from Forecast, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include StartTime and EndTime unchanged from step 10b",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Start Time Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_4",
            "desc": "4.1.3. [TC-DEM-2.4] Pausable feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_4",
            "path": "sdk/TC_DEM_2_4",
            "pics": [
                "DEM.S.F04"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify Pausable feature is supported on the cluster. Verify PowerForecastReporting or StateForecastReporting feature is supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Set up a subscription to all DeviceEnergyManagement cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include IsPausable=True, slots[0].SlotIsPausable=True, slots[0].MinPauseDuration>1, slots[0].MaxPauseDuration>1, slots[1].SlotIsPausable=False, ActiveSlotNumber=0, and ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration-1, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MaxPauseDuration+1, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (GridOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E02(Paused) sent",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x05 (Paused)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E03(Resumed) sent with Cause=3 (UserOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include  ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E02(Paused) sent",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x05 (Paused)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=Local Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH sends command ResumeRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E03(Resumed) sent with Cause=4 (Cancelled)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include IsPausable=True, slots[0].SlotIsPausable=True, slots[0].MinPauseDuration>1, slots[0].MaxPauseDuration>1, slots[1].SlotIsPausable=False, ActiveSlotNumber=0, ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E02(Paused) sent",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x05 (Paused)",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=Local Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH sends command ResumeRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E03(Resumed) sent with Cause=4 (Cancelled)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event DEM.S.E02(Paused) sent",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x05 (Paused)",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "Wait for minPauseDuration.",
                    "expectation": "Event DEM.S.E03(Resumed) sent with Cause=0 (NormalCompletion)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event Next Slot",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ActiveSlotNumber=1",
                    "is_commissioning": false,
                    "test_plan_number": "19b"
                },
                {
                    "description": "TH sends command PauseRequest with Duration=Forecast.slots[0].MinPauseDuration, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH sends command ResumeRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_5",
            "desc": "4.1.3. [TC-DEM-2.5] Forecast Adjustment with Power Forecast Reporting feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_5",
            "path": "sdk/TC_DEM_2_5",
            "pics": [
                "DEM.S.F05",
                "DEM.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify ForecastAdjustment feature is supported on the cluster. Verify PowerForecastReporting feature is supported on the cluster. Verify StateForecastReporting feature is not supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include slots[0].MinPowerAdjustment, slots[0].MaxPowerAdjustment, slots[0].MinDurationAdjustment, slots[0].MaxDurationAdjustment",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID+1, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=len(Forecast.Slots), NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment-1, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MaxPowerAdjustment+1, Duration=Forecast.Slots[0].MinDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment+1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MaxPowerAdjustment, Duration=Forecast.Slots[0].MinDurationAdjustment-1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, SlotAdjustments[1].{SlotIndex=4, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "18b"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MinPowerAdjustment, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MaxPowerAdjustment, Duration=Forecast.Slots[0].MinDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=LocalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "21a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "22a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event Next Slot",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, NominalPower=Forecast.Slots[0].MaxPowerAdjustment, Duration=Forecast.Slots[0].MinDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "26"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_6",
            "desc": "4.1.3. [TC-DEM-2.6] Forecast Adjustment with State Forecast Reporting feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_6",
            "path": "sdk/TC_DEM_2_6",
            "pics": [
                "DEM.S.F05",
                "DEM.S.F02"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify ForecastAdjustment feature is supported on the cluster. Verify StateForecastReporting feature is supported on the cluster. Verify PowerForecastReporting feature is not supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include slots[0].MinDurationAdjustment, slots[0].MaxDurationAdjustment",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID+1, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=4, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment+1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MinDurationAdjustment-1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, SlotAdjustments[1].{SlotIndex=4, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=Internal Optimization",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MaxDurationAdjustment}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MinDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=LocalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event Next Slot",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends command ModifyForecastRequest with ForecastID=Forecast.ForecastID, SlotAdjustments[0].{SlotIndex=0, Duration=Forecast.Slots[0].MinDurationAdjustment}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_7",
            "desc": "4.1.3. [TC-DEM-2.7] Constraints-based Adjustment with Power Forecast Reporting feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_7",
            "path": "sdk/TC_DEM_2_7",
            "pics": [
                "DEM.S.F06",
                "DEM.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify ConstraintBasedAdjustment feature is supported on the cluster. Verify PowerForecastReporting feature is supported on the cluster. Verify StateForecastReporting feature is not supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Constraints-based Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include valid slots[0].NominalPower, slots[0].MinPower, slots[0].MaxPower, slots[0].NominalEnergy",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()-10, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[1].{StartTime=now()+20, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[2].{StartTime=now()+40, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[1].{StartTime=now()+30, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[2].{StartTime=now()+40, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+30, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[1].{StartTime=now()+10, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[2].{StartTime=now()+50, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[1].{StartTime=now()+50, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, constraints[2].{StartTime=now()+30, Duration=20, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the AbsMaxPower attribute.",
                    "expectation": "Save the value",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=AbsMaxPower+1, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the AbsMinPower attribute.",
                    "expectation": "Save the value",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=AbsMinPower-1, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "19b"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "21a"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, NominalPower=Forecast.Slots[0].NominalPower, MaximumEnergy=Forecast.Slots[0].NominalEnergy}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=LocalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "22a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "23a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Constraints-based Adjustment Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_8",
            "desc": "4.1.3. [TC-DEM-2.8] Constraints-based Adjustment with State Forecast Reporting feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_8",
            "path": "sdk/TC_DEM_2_8",
            "pics": [
                "DEM.S.F06",
                "DEM.S.F02"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify ConstraintBasedAdjustment feature is supported on the cluster. Verify StateForecastReporting feature is supported on the cluster. Verify PowerForecastReporting feature is not supported on the cluster.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Constraints-based Adjustment Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include valid slots[0].ManufacturerESAState",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()-10, Duration=20, LoadControl=0}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, LoadControl=0}, constraints[1].{StartTime=now()+20, Duration=20, LoadControl=0}, constraints[2].{StartTime=now()+50, Duration=20, LoadControl=0}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, LoadControl=0}, constraints[1].{StartTime=now()+30, Duration=20, LoadControl=0}, constraints[2].{StartTime=now()+40, Duration=20, LoadControl=0}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+30, Duration=20, LoadControl=0}, constraints[1].{StartTime=now()+10, Duration=20, LoadControl=0}, constraints[2].{StartTime=now()+50, Duration=20, LoadControl=0}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=now()+10, Duration=20, LoadControl=0}, constraints[1].{StartTime=now()+50, Duration=20, LoadControl=0}, constraints[2].{StartTime=now()+30, Duration=20, LoadControl=0}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=101}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=-101}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the ESAState",
                    "expectation": "Value has to be 0x01 (Online)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x02 (LocalOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=1}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=GridOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x03 (OptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "17b"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=1}, Cause=GridOptimization",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the OptOutState",
                    "expectation": "Value has to be 0x00 (NoOptOut)",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH sends command RequestConstraintBasedPowerForecast with constraints[0].{StartTime=Forecast.StartTime, Duration=Forecast.Slots[0].DefaultDuration, LoadControl=1}, Cause=LocalOptimization",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=LocalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include ForecastUpdateReason=InternalOptimization",
                    "is_commissioning": false,
                    "test_plan_number": "21a"
                },
                {
                    "description": "TH sends command CancelRequest",
                    "expectation": "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Constraints-based Adjustment Adjustment Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                }
            ]
        },
        {
            "class_name": "TC_DEM_2_9",
            "desc": "4.1.3. [TC-DEM-2.2] Power or State Forecast Reporting feature functionality with DUT as Server",
            "function": "test_TC_DEM_2_9",
            "path": "sdk/TC_DEM_2_9",
            "pics": [
                "DEM.S.F01",
                "DEM.S.F02"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the _FeatureMap_ attribute",
                    "expectation": "Verify that the DUT response contains the _FeatureMap_ attribute. Verify one of PowerForecastReporting or StateForecastReporting is supported but not both.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include a valid slots[0].ManufacturerESAState",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the Forecast",
                    "expectation": "Value has to include valid slots[0].NominalPower, slots[0].MinPower, slots[0].MaxPower, slots[0].NominalEnergy",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Forecast Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                }
            ]
        },
        {
            "class_name": "TC_DGGEN_2_4",
            "desc": "test_TC_DGGEN_2_4",
            "function": "test_TC_DGGEN_2_4",
            "path": "sdk/TC_DGGEN_2_4",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DGGEN_3_2",
            "desc": "test_TC_DGGEN_3_2",
            "function": "test_TC_DGGEN_3_2",
            "path": "sdk/TC_DGGEN_3_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT (already done)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads the MaxPathsPerInvoke attribute from the Basic Information Cluster from DUT. Save the value as `max_paths_per_invoke",
                    "expectation": "Read is successful",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads FeatureMap attribute from the General Diagnostics Cluster from DUT",
                    "expectation": "Verify that the FeatureMap value has the DMTEST feature bit (0) set to 1 if `max_path_per_invoke` > 1",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_DGSW_2_2",
            "desc": "[TC-DGSW-2.2] Event Functionality with Server as DUT",
            "function": "test_TC_DGSW_2_2",
            "path": "sdk/TC_DGSW_2_2",
            "pics": [
                "DGSW.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH subscribes to the SoftwareDiagnostics cluster in the DUT to receive SoftwareFault events. The DUT is triggered to emit a SoftwareFault event. Wait for the SoftwareFault event to arrive.",
                    "expectation": "Validate the SoftwareFault event fields.The Id field of the struct is mandatory and shall be set with software thread ID that last software fault occurred.Name field shall be set to vendor specific name strings that last software fault occurred.FaultRecording field shall be set by a vendor specific payload in octstr format.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_DISHM_1_2",
            "desc": "[TC-DISHM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_DISHM_1_2",
            "path": "sdk/TC_DISHM_1_2",
            "pics": [
                "DISHM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_12",
            "desc": "test_TC_DRLK_2_12",
            "function": "test_TC_DRLK_2_12",
            "path": "sdk/TC_DRLK_2_12",
            "pics": [
                "DRLK.S.F0c"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_13",
            "desc": "test_TC_DRLK_2_13",
            "function": "test_TC_DRLK_2_13",
            "path": "sdk/TC_DRLK_2_13",
            "pics": [
                "DRLK.S.F0d"
            ],
            "steps": [
                {
                    "description": "Commissoning with DUT is done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "0"
                },
                {
                    "description": "TH reads OperationalCredentials cluster's CurrentFabricIndex and save the attribute",
                    "expectation": "TH Reads Attribute Successfully",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH sends ClearUser Command to DUT with the UserIndex as 0xFFFE to clear all the users",
                    "expectation": "DUT responds with Success response",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear all the credentials",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "1c"
                },
                {
                    "description": "TH sends ClearAliroReaderConfig Command to DUT for clearing any existing Aliro Configuration",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": ",TH sends SetAliroReaderConfig Command to DUT without GroupResolvingKey",
                    "expectation": "DUT sends success response",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends SetAliroReaderConfig Command to DUT with GroupResolvingKey",
                    "expectation": "DUT sends success response",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads AliroReaderVerificationKey attribute from DUT",
                    "expectation": "Verify that AliroReaderVerificationKey value is same as 'verificationkey'",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads AliroReaderGroupIdentifier attribute from DUT",
                    "expectation": "Verify that AliroReaderGroupIdentifier value is same as 'groupidentifier'",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads AliroGroupResolvingKey attribute from DUT",
                    "expectation": "Verify that AliroGroupResolvingKey value is same 'groupresolvingkey'",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": ",TH sends SetAliroReaderConfig Command to DUT without GroupResolvingKey",
                    "expectation": "Verify that the DUT sends INVALID_IN_STATE response",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends SetAliroReaderConfig Command to DUT with GroupResolvingKey",
                    "expectation": "Verify that the DUT sends INVALID_IN_STATE response",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends ClearAliroReaderConfig Command to DUT",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads AliroReaderVerificationKey attribute from DUT",
                    "expectation": "Verify that AliroReaderVerificationKey value is null",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads AliroReaderGroupIdentifier attribute from DUT",
                    "expectation": "Verify that AliroReaderGroupIdentifier value is null",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads AliroGroupResolvingKey attribute from DUT",
                    "expectation": "Verify that AliroGroupResolvingKey value is null",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": ",TH sends SetAliroReaderConfig Command to DUT without GroupResolvingKey",
                    "expectation": "DUT sends success response",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH sends SetAliroReaderConfig Command to DUT with GroupResolvingKey",
                    "expectation": "DUT sends success response",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads NumberOfAliroEndpointKeysSupported store as 'max_aliro_keys_supported' if max_aliro_keys_supported>= 2 continue with the next steps,Verify that Read operation is successful",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH sends SetUser Command to DUT to create an Aliro user using username as 'AliroUser' and unique id 111",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH sends SetCredential Command Credential as (6, 2)",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command, DUT responds with status success in SetCredentialResponse",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends SetCredential Command with Credential as (6, 1)",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command, DUT responds with status success in SetCredentialResponse",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 11 as latest event with DataOperationType: 0(DataOperationTypeEnum.Add) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends GetCredentialStatus Command with Credential as (6,1)",
                    "expectation": "Verify DUT responds with GetCredentialStatusResponse having CredentialExists is true and UserIndex as 1",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear the CredentialType of AliroCredentialIssuerKey",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 11 as latest event with DataOperationType: 1(DataOperationTypeEnum.Clear) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType as AliroEvictableEndpointKey",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command, DUT responds with status success in SetCredentialResponse",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 11 as latest event with DataOperationType: 0(DataOperationTypeEnum.Add) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends GetCredentialStatus Command with Credential as 7 1",
                    "expectation": "Verify DUT responds with GetCredentialStatusResponse having CredentialExists is true and UserIndex as 1",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear the CredentialType of AliroEvictableEndpointKey",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 12 as latest event with DataOperationType: 1(DataOperationTypeEnum.Clear) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType as AliroNonEvictableEndpointKey ",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command and Status success.",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 12 as latest event with DataOperationType: 0(DataOperationTypeEnum.Add) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH sends GetCredentialStatus Command with Credential as 8 1",
                    "expectation": "Verify DUT responds with GetCredentialStatusResponse having CredentialExists is true and UserIndex as 1",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear the CredentialType of AliroNonEvictableEndpointKey",
                    "expectation": "DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "26"
                },
                {
                    "description": "TH reads the LockUserChange event list from DUT",
                    "expectation": "Verify list has an event LockDataType: 13 as latest event with DataOperationType: 1(DataOperationTypeEnum.Clear) along with other information",
                    "is_commissioning": false,
                    "test_plan_number": "27"
                },
                {
                    "description": "Th Reads NumberOfCredentialsSupportedPerUser saves as numberofcredentialsupportedperuser,Read operation is successful",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "28a"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear all the credentials of Aliro type TH sends ClearUser Command with UserIndex as 1 to DUT to clear alirouserExecuting steps 29 to 35 only when 'max_aliro_keys_supported <= numberofcredentialsupportedperuser' else exit script",
                    "expectation": "Verify that Read operation is successful",
                    "is_commissioning": false,
                    "test_plan_number": "28b"
                },
                {
                    "description": "TH sends SetUser Command to DUT to create an Aliro user",
                    "expectation": "DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "29a"
                },
                {
                    "description": "TH performs repeated number of SetCredential commands with credentials as 8 'startcredentialindex' until 'max_aliro_keys_supported - 1', startcredentialindex initially has value 1 .",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command and Status success.",
                    "is_commissioning": false,
                    "test_plan_number": "29b"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType as AliroEvictableEndpointKey for the 'alirouser' ",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command and Status success. This step will fill the last slot with credentialType as AliroEvictableEndpointKey",
                    "is_commissioning": false,
                    "test_plan_number": "30"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType as AliroNonEvictableEndpointKey and number of credentials for 'alirouser' exceeds the max_aliro_keys_supported",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command and Status ResourceExhausted",
                    "is_commissioning": false,
                    "test_plan_number": "31"
                },
                {
                    "description": "TH sends GetCredentialStatus Command with Credential as 7 1",
                    "expectation": "DUT responds with GetCredentialStatusResponse Command and CredentialExists is True",
                    "is_commissioning": false,
                    "test_plan_number": "32"
                },
                {
                    "description": "TH sends GetCredentialStatus Command with Credential as 8 max_aliro_keys_supported",
                    "expectation": "Verify DUT responds with GetCredentialStatusResponse having CredentialExists is false and UserIndex as 1",
                    "is_commissioning": false,
                    "test_plan_number": "33"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear the ALIRO CredentialType",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "34"
                },
                {
                    "description": "TH sends ClearUser Command to DUT with the UserIndex as 1",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "35"
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_2",
            "desc": "test_TC_DRLK_2_2",
            "function": "test_TC_DRLK_2_2",
            "path": "sdk/TC_DRLK_2_2",
            "pics": [
                "DRLK.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_3",
            "desc": "test_TC_DRLK_2_3",
            "function": "test_TC_DRLK_2_3",
            "path": "sdk/TC_DRLK_2_3",
            "pics": [
                "DRLK.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_5",
            "desc": "test_TC_DRLK_2_5",
            "function": "test_TC_DRLK_2_5",
            "path": "sdk/TC_DRLK_2_5",
            "pics": [
                "DRLK.S",
                "DRLK.S.F04"
            ],
            "steps": [
                {
                    "description": "TH reads NumberOfWeekDaySchedulesSupportedPerUser attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully.",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH sends SetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends SetWeekDaySchedule to DUT with different DaysMaskMap.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH sends GetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends GetWeekDayScheduleResponse command with expected values.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends SetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends SetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends SetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends SetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends GetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with with INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends GetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT responds with GetWeekDayScheduleResponse command with Status NOT_FOUND.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends ClearWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH sends ClearWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends INVALID_COMMAND response.",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH sends ClearWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends INVALID_COMMAND response.",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH sends GetWeekDaySchedule Command to DUT.",
                    "expectation": "Verify that the DUT sends NOT_FOUND response.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends ClearUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                }
            ]
        },
        {
            "class_name": "TC_DRLK_2_9",
            "desc": "test_TC_DRLK_2_9",
            "function": "test_TC_DRLK_2_9",
            "path": "sdk/TC_DRLK_2_9",
            "pics": [
                "DRLK.S"
            ],
            "steps": [
                {
                    "description": "TH reads NumberOfTotalUsersSupported attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully.",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads MinPINCodeLength attribute .",
                    "expectation": "Verify that TH is able to read the attribute successfully and value is within range.",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH reads MaxPINCodeLength attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully and value is within range.",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH reads MinRFIDCodeLength attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully.",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH reads MaxRFIDCodeLength attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully and value is within range.",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "2f"
                },
                {
                    "description": "TH sends GetCredentialStatus Command .",
                    "expectation": "Verify that the DUT responds with  GetCredentialStatusResponse Command .",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status DUPLICATE.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status DUPLICATE or OCCUPIED.",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status DUPLICATE or OCCUPIED.",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends GetCredentialStatus command to DUT ",
                    "expectation": "Verify that the DUT responds with  GetCredentialStatusResponse Command.",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH sends ClearUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT.",
                    "expectation": " Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": " TH sends GetCredentialStatus Command.",
                    "expectation": "Verify that the DUT responds with  GetCredentialStatusResponse Command with credentialExists=FALSE.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT",
                    "expectation": "if {PICS_SF_ALIRO} verify that the DUT sends a SUCCESS response else DUT sends an INVALID_COMMAND response.",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT with Invalid Credential Type.",
                    "expectation": "Verify that the DUT sends an INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends ClearUser Command to DUT to clear all the users.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "14c"
                },
                {
                    "description": "TH reads NumberOfPINUsersSupported attribute.",
                    "expectation": "Verify that TH is able to read the attribute successfully and value is within range.",
                    "is_commissioning": false,
                    "test_plan_number": "14d"
                },
                {
                    "description": "TH reads NumberOfCredentialsSupportedPerUser attribute from DUT.",
                    "expectation": "Verify that TH is able to read the attribute successfully and value is within range.",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH sends SetCredential Command to DUT.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command  with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "15c"
                },
                {
                    "description": " TH sends SetCredential Command  with CredentialIndex as 'max-num-credential-user'.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command with Status RESOURCE_EXHAUSTION.",
                    "is_commissioning": false,
                    "test_plan_number": "15d"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear all the credentials of PIN type.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "15e"
                },
                {
                    "description": "TH sends ClearUser Command to DUT with UserIndex as 0xFFFE to clear all the users.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "15f"
                },
                {
                    "description": " TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType.RFID.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command  with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType.PIN.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command  with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH sends GetUser Command to DUT.",
                    "expectation": "Verify that the DUT responds with GetUserResponse Command.",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends SetCredential Command to DUT to modify the CredentialData.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command  with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends GetUser Command to DUT.",
                    "expectation": "Verify that the DUT responds with GetUserResponse Command.",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear all the credentials.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends ClearUser Command to DUT to clear all the users.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH sends SetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH sends ClearAliroReaderConfig Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                },
                {
                    "description": ",TH sends SetAliroReaderConfig Command to DUT without GroupResolvingKey.",
                    "expectation": "Verify that DUT sends success response.",
                    "is_commissioning": false,
                    "test_plan_number": "26"
                },
                {
                    "description": ",TH sends SetAliroReaderConfig Command to DUT with GroupResolvingKey.",
                    "expectation": "Verify that DUT sends success response.",
                    "is_commissioning": false,
                    "test_plan_number": "27"
                },
                {
                    "description": "TH sends SetCredential Command CredentialType as AliroEvictableEndpointKey.",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse commad with status success ",
                    "is_commissioning": false,
                    "test_plan_number": "28"
                },
                {
                    "description": "TH sends SetCredential Command to DUT with CredentialType.PIN.",
                    "expectation": "Verify that the DUT sends SetCredentialResponse command  with Status SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "29"
                },
                {
                    "description": "TH sends GetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "30"
                },
                {
                    "description": "TH sends SetCredential Command to modify PIN CredentialType",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with status success ",
                    "is_commissioning": false,
                    "test_plan_number": "31"
                },
                {
                    "description": "TH sends GetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "32"
                },
                {
                    "description": "TH sends SetCredential Command to modify AliroEvictableEndpointKey CredentialType",
                    "expectation": "Verify that the DUT responds with SetCredentialResponse command with status success ",
                    "is_commissioning": false,
                    "test_plan_number": "33"
                },
                {
                    "description": "TH sends GetUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "34"
                },
                {
                    "description": "TH sends ClearUser Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "35"
                },
                {
                    "description": "TH sends ClearCredential Command to DUT to clear all the credentials.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "36"
                },
                {
                    "description": "TH sends ClearAliroReaderConfig Command to DUT.",
                    "expectation": "Verify that the DUT sends SUCCESS response.",
                    "is_commissioning": false,
                    "test_plan_number": "37"
                }
            ]
        },
        {
            "class_name": "TC_DefaultChecker",
            "desc": "[TC-IDM-13.1] Accidental defaults check - [DUT as Server]",
            "function": "test_TC_IDM_13_1",
            "path": "sdk/TC_DefaultWarnings",
            "pics": [],
            "steps": [
                {
                    "description": "TH performs a wildcard read of all attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "If the pixit_allow_test_in_product_name flag is not set, check for \"Test\" in the product name",
                    "expectation": "\"Test\" does not appear in the product name",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If the pixit_allow_test_in_vendor_name flag is not set, check for \"Test\" in the vendor name",
                    "expectation": "\"Test\" does not appear in the vendor name",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If the pixit_allow_default_vendor_id flag is not set, check for test vendor IDs",
                    "expectation": "Product does not use a test vendor ID",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the pixit_allow_default_calendar_format flag is not set, and the TimeFormatLocalization cluster is present and has the ActiveCalendarType attribute, check for the default calendar format",
                    "expectation": "Calendar format is not the default",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "If the pixit_allow_unit_testing_cluster flag is not set, check for the presence of a unit testing cluster on any endpoint",
                    "expectation": "Unit testing cluster does not appear on any endpoint",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If the pixit_allow_fault_injection_cluster flag is not set, check for the presence of a fault injection cluster on any endpoint",
                    "expectation": "Fault injection cluster does not appear on any endpoint",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If the pixit_allow_sample_mei_cluster flag is not set, check for the presence of a sample mei cluster on any endpoint",
                    "expectation": "Sample MEI cluster does not appear on any endpoint",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "If the pixit_allow_empty_fixed_label_list flag is not set, and the FixedLabel cluster is present on the device, check that the fixed label cluster list is not empty",
                    "expectation": "List is not empty",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If the pixit_allow_fixed_label_default_values flag is not set, and the FixedLabel cluster is present on the device, check that the fixed label cluster list does not contain any of the default labels",
                    "expectation": "List does not contain default labels",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Fail on any problems",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_DESC_2_1",
            "function": "test_TC_DESC_2_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_DESC_2_2",
            "function": "test_TC_DESC_2_2",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_DT_1_1",
            "function": "test_TC_DT_1_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_IDM_10_1",
            "function": "test_TC_IDM_10_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_IDM_11_1",
            "function": "test_TC_IDM_11_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_IDM_12_1",
            "function": "test_TC_IDM_12_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "TH performs a wildcard read of all attributes and endpoints on the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 0
                },
                {
                    "description": "TH creates a MatterTlvJson dump of the wildcard attributes for submission to certification.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_PS_3_1",
            "function": "test_TC_PS_3_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_SM_1_1",
            "function": "test_TC_SM_1_1",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceBasicComposition",
            "desc": "test_TC_SM_1_2",
            "function": "test_TC_SM_1_2",
            "path": "sdk/TC_DeviceBasicComposition",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "[TC-DESC-2.3] Test for superset application device types",
            "function": "test_TC_DESC_2_3",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "TH performs a wildcard read of all attributes on all endpoints on the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 0
                },
                {
                    "description": "TH checks the Root node endpoint and ensures no application device types are listed",
                    "expectation": "No Application device types on EP0",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "For each non-root endpoint on the device, TH checks the DeviceTypeList of the Descriptor cluster and verifies that all the listed application device types are part of the same superset, and that no two device types are unrelated supersets of any device type.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Fail test if either of the above steps failed.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "test_TC_IDM_10_2",
            "function": "test_TC_IDM_10_2",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "test_TC_IDM_10_3",
            "function": "test_TC_IDM_10_3",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "test_TC_IDM_10_5",
            "function": "test_TC_IDM_10_5",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "test_TC_IDM_10_6",
            "function": "test_TC_IDM_10_6",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_DeviceConformance",
            "desc": "test_TC_IDM_14_1",
            "function": "test_TC_IDM_14_1",
            "path": "sdk/TC_DeviceConformance",
            "pics": [],
            "steps": [
                {
                    "description": "TH performs a wildcard read of all attributes and endpoints on the device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 0
                },
                {
                    "description": " For each root-node-restricted cluster in the list, ensure the cluster does not appear on any endpoint that is not the root node.\n                                List of root-node-restricted clusters:\n\n                                * ACL\n                                * Time Synchronization\n                                * TLS Certificate Management\n                                * TLS Client Management\n                         ",
                    "expectation": "No root-node-restricted clusters appear on non-root endpoints",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_ECOINFO_2_1",
            "desc": "test_TC_ECOINFO_2_1",
            "function": "test_TC_ECOINFO_2_1",
            "path": "sdk/TC_ECOINFO_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "Identify endpoints with Ecosystem Information Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Reading DeviceDirectory Attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Reading LocationDirectory Attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Try Writing to DeviceDirectory Attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Try Writing to LocationDirectory Attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Repeating steps 2 to 5 for each endpoint identified in step 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_ECOINFO_2_2",
            "desc": "test_TC_ECOINFO_2_2",
            "function": "test_TC_ECOINFO_2_2",
            "path": "sdk/TC_ECOINFO_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "Prepare",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Read root endpoint's PartsList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "For each endpoint in 1a read DeviceType list confirming aggregator endpoint exists",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "Add a bridged device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "(Manual Step) Add a bridged device using method indicated by the manufacturer",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Read root endpoint's PartsList, validate exactly one endpoint added",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "On newly added endpoint detected in 2b read DeviceDirectory Ecosystem Information Attribute and validate success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "On newly added endpoint detected in 2b read LocationDirectory Ecosystem Information Attribute and validate success",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "Remove bridged device",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "(Manual Step) Removed bridged device added in step 2a using method indicated by the manufacturer",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Verify that PartsList equals what was read in 1a",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "On endpoint detected in 2b, read DeviceDirectory Ecosystem Information Attribute and validate failure",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "On endpoint detected in 2b, read LocationDirectory Ecosystem Information Attribute and validate failure",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                }
            ]
        },
        {
            "class_name": "TC_EEM_2_1",
            "desc": "5.1.2. [TC-EEM-2.1] Attributes with Server as DUT",
            "function": "test_TC_EEM_2_1",
            "path": "sdk/TC_EEM_2_1",
            "pics": [
                "EEM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads Accuracy attribute",
                    "expectation": "Verify that the DUT response contains a MeasurementAccuracyStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads CumulativeEnergyImported attribute",
                    "expectation": "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads CumulativeEnergyExported attribute",
                    "expectation": "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads PeriodicEnergyImported attribute",
                    "expectation": "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads PeriodicEnergyExported attribute",
                    "expectation": "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads CumulativeEnergyReset attribute",
                    "expectation": "Verify that the DUT response contains either null or an CumulativeEnergyResetStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                }
            ]
        },
        {
            "class_name": "TC_EEM_2_2",
            "desc": "5.1.3. [TC-EEM-2.2] Optional cumulative imported energy attributes with DUT as Server",
            "function": "test_TC_EEM_2_2",
            "path": "sdk/TC_EEM_2_2",
            "pics": [
                "EEM.S",
                "EEM.S.F02",
                "EEM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the CumulativeEnergyImported attribute",
                    "expectation": "Verify the read is successful and note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the CumulativeEnergyImported attribute",
                    "expectation": "Verify the read is successful and that the value is greater than the value measured in step 4a.",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_EEM_2_3",
            "desc": "5.1.4. [TC-EEM-2.3] Optional cumulative exported energy attributes with DUT as Server",
            "function": "test_TC_EEM_2_3",
            "path": "sdk/TC_EEM_2_3",
            "pics": [
                "EEM.S",
                "EEM.S.F02",
                "EEM.S.F01"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Generator Test 3kW Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the CumulativeEnergyExported attribute",
                    "expectation": "Verify the read is successful and note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the CumulativeEnergyExported attribute",
                    "expectation": "Verify the read is successful and that the value is greater than the value measured in step 4a.",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_EEM_2_4",
            "desc": "5.1.5. [TC-EEM-2.4] Optional periodic imported energy attributes with DUT as Server",
            "function": "test_TC_EEM_2_4",
            "path": "sdk/TC_EEM_2_4",
            "pics": [
                "EEM.S",
                "EEM.S.F03",
                "EEM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the PeriodicEnergyImported attribute",
                    "expectation": "Verify the read is successful and note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the PeriodicEnergyImported attribute",
                    "expectation": "Verify the read is successful and that the value read has to be different from value measure in step 4a.",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_EEM_2_5",
            "desc": "5.1.6. [TC-EEM-2.5] Optional periodic exported energy attributes with DUT as Server",
            "function": "test_TC_EEM_2_5",
            "path": "sdk/TC_EEM_2_5",
            "pics": [
                "EEM.S",
                "EEM.S.F03",
                "EEM.S.F01"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Generator Test 3kW Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the PeriodicEnergyExported attribute",
                    "expectation": "Verify the read is successful and note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the PeriodicEnergyExported attribute",
                    "expectation": "Verify the read is successful and that the value read has to be different from value measure in step 4a.",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_EEVSEM_1_2",
            "desc": "[TC-EEVSEM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_EEVSEM_1_2",
            "path": "sdk/TC_EEVSEM_1_2",
            "pics": [
                "EEVSEM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_10",
            "desc": "[TC-EEVSE-2.10] Optional V2X feature functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_10",
            "path": "sdk/TC_EEVSE_2_10",
            "pics": [
                "EEVSE.S",
                "EEVSE.S.F04"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to all EnergyEVSE cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "After a few seconds TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH reads from the DUT the FaultState",
                    "expectation": "Value has to be 0x00 (NoError)",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVConnected sent",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x01 (PluggedInNoDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=15 seconds in the future, MinimumChargeCurrent=6000, MaximumChargeCurrent=60000. Store the ChargingEnabledUntil into Matter EPOCH in UTC as ChargingEnabledUntilEpochTime, MinimumChargeCurrent as MinimumChargeCurrent and MaximumChargeCurrent as MaximumChargeCurrent",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends command EnableDischarging with DischargingEnabledUntil=5 seconds in the future, MaximumDischargeCurrent=32000. Store the DischargingEnabledUntil into Matter EPOCH in UTC as DischargingEnabledUntilEpochTime, MaximumDischargeCurrent as MaximumDischargeCurrent",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x05 (Enabled)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be equal to the value of ChargingEnabledUntilEpochTime",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be equal to the value of MinimumChargeCurrent",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH reads from the DUT the CircuitCapacity",
                    "expectation": "Store the value as CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be the minimum value of MaximumChargeCurrent and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "TH reads from the DUT the DischargingEnabledUntil",
                    "expectation": "Value has to be equal to the value of DischargingEnabledUntilEpochTime",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "TH reads from the DUT the MaximumDischargeCurrent",
                    "expectation": "Value has to be the minimum value of MaximumDischargeCurrent and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "7g"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStarted sent containing MaximumCurrent with MaximumChargeCurrent value determined in step 7e, and MaximumDischargeCurrent having the MaximumDischargeCurrent as determined in step 7g.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "Wait 7 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be equal to the value of ChargingEnabledUntilEpochTime",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be equal to the value of MinimumChargeCurrent",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be the minimum value of MaximumChargeCurrent and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "TH reads from the DUT the DischargingEnabledUntil",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "9e"
                },
                {
                    "description": "TH reads from the DUT the MaximumDischargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "9f"
                },
                {
                    "description": "Wait 10 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "TH sends command EnableDischarging with DischargingEnabledUntil=null, maximumDischargeCurrent=12000. Store MaximumDischargeCurrent as MaximumDischargeCurrent",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x02 (DischargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "11d"
                },
                {
                    "description": "TH reads from the DUT the DischargingEnabledUntil",
                    "expectation": "Value has to be null",
                    "is_commissioning": false,
                    "test_plan_number": "11e"
                },
                {
                    "description": "TH reads from the DUT the MaximumDischargeCurrent",
                    "expectation": "Value has to be minimum value of MaximumDischargeCurrent and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "11f"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStopped sent with reason EvseStopped",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "12c"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "12d"
                },
                {
                    "description": "TH reads from the DUT the DischargingEnabledUntil",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "12e"
                },
                {
                    "description": "TH reads from the DUT the MaximumDischargeCurrent",
                    "expectation": "Value has to be 0",
                    "is_commissioning": false,
                    "test_plan_number": "12f"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVNotDetected sent",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_2",
            "desc": "5.1.3. [TC-EEVSE-2.2] Primary functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_2",
            "path": "sdk/TC_EEVSE_2_2",
            "pics": [
                "EEVSE.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "After a few seconds TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH reads from the DUT the FaultState",
                    "expectation": "Value has to be 0x00 (NoError)",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVConnected sent",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x01 (PluggedInNoDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the SessionID",
                    "expectation": "Value is noted for later",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=5 seconds in the future, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStarted sent",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be the ChargingEnabledUntil commanded value",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be the minimumChargeCurrent commanded value",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be the minimum value of maximumChargeCurrent commanded value and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "Wait 5 seconds",
                    "expectation": "Event EnergyTransferStopped sent with reason EvseStopped",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x02 (PluggedInDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=12000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStarted sent",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH reads from the DUT the ChargingEnabledUntil",
                    "expectation": "Value has to be the ChargingEnabledUntil commanded value",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH reads from the DUT the MinimumChargeCurrent",
                    "expectation": "Value has to be the minimumChargeCurrent commanded value",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be the minimum value of maximumChargeCurrent commanded value and CircuitCapacity",
                    "is_commissioning": false,
                    "test_plan_number": "8e"
                },
                {
                    "description": "If the optional attribute is supported, TH writes to the DUT the UserMaximumChargeCurrent=6000",
                    "expectation": "Charging rate reduced to 6A",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "After a few seconds TH reads from the DUT the MaximumChargeCurrent",
                    "expectation": "Value has to be the configured UserMaximumChargeCurrent value",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStopped sent with reason EvStopped",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x01 (PluggedInNoDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStarted sent",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStopped sent with reason EvStopped",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x01 (PluggedInNoDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVNotDetected sent",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH reads from the DUT the SessionID",
                    "expectation": "Value has to be the same value noted in 4b",
                    "is_commissioning": false,
                    "test_plan_number": "13c"
                },
                {
                    "description": "TH reads from the DUT the SessionDuration",
                    "expectation": "Value has to be greater than 5s (and match the time taken for the tests from step 4 to step 13)",
                    "is_commissioning": false,
                    "test_plan_number": "13d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVConnected sent",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStarted sent",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the SessionID",
                    "expectation": "Value has to be 1 more than the value noted in 4b",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EnergyTransferStopped sent with reason EvseStopped",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVNotDetected sent",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_3",
            "desc": "5.1.4. [TC-EEVSE-2.3] Optional ChargingPreferences feature functionality with DUT as Server\nThis test case verifies the primary functionality of the Energy EVSE cluster server with the optional ChargingPreferences feature supported.",
            "function": "test_TC_EEVSE_2_3",
            "path": "sdk/TC_EEVSE_2_3",
            "pics": [
                "EEVSE.S",
                "EEVSE.S.F00"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT theFeatureMap_",
                    "expectation": "Verify that the DUT response contains the FeatureMap attribute. Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE TimeOfUse Mode Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVConnected sent",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command ClearTargets",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "TH sends command GetTargets",
                    "expectation": "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with no targets defined.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x7F (i.e. having all days set) and a single ChargingTargets={TargetTimeMinutesPastMidnight=1439, TargetSoC=null, AddedEnergy=25000000}. Store TargetTimeMinutesPastMidnight converted from local timezone into Matter EPOCH in UTC as TargetTime, TargetSoC as TargetSoC, and AddedEnergy as AddedEnergy.",
                    "expectation": "If SoCReporting feature is in FeatureMap, Verify DUT responds w/ status INVALID_COMMAND(0x85) and skip to step 9, otherwise Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: If the DUT supports the SoCReporting feature the command SHALL return InvalidCommand since TargetSoC is omitted in step 8, but is mandatory when SoCReporting is supported by cluster server.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "If SoCReporting feature is in FeatureMap skip to step 11, otherwise TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be before the next TargetTime above.",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be TargetTime above.",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be AddedEnergy above.",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "9d"
                },
                {
                    "description": "TH sends command GetTargets",
                    "expectation": "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with targets equivalent to the above (Note 1).",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x7F (i.e. having all days set) and a single ChargingTargets={TargetTimeMinutesPastMidnight=1, TargetSoC=100, AddedEnergy=null}. Store TargetTimeMinutesPastMidnight converted from local timezone into Matter EPOCH in UTC as TargetTime, TargetSoC as TargetSoC, and AddedEnergy as AddedEnergy.",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be before the next TargetTime above.",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be TargetTime above.",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be 100.",
                    "is_commissioning": false,
                    "test_plan_number": "11d"
                },
                {
                    "description": "TH sends command GetTargets",
                    "expectation": "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with targets equivalent to the above (Note 1).",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x40 (i.e. having Saturday set) and 10 ChargingTargets with TargetTimeMinutesPastMidnight=60,180,300,420,540,660,780,900,1020,1140 and all with TargetSoC=100, AddedEnergy=2500000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x01 (i.e. having Sunday set) and no ChargingTargets",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends command GetTargets",
                    "expectation": "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with 1 target for each day Monday to Friday equivalent to step 11 (Note 1), 10 targets for Saturday as step 13, and no targets for Sunday as step 14.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH sends command ClearTargets",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16d"
                },
                {
                    "description": "TH sends command GetTargets",
                    "expectation": "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with no targets defined.",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH sends command SetTargets with two identical ChargingTargetSchedules={DayOfTheWeekforSequence=0x01,ChargingTarget[0]={TargetTimeMinutesPastMidnight=60,TargetSoC=100,AddedEnergy=2500000}}",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x40 and 11 ChargingTargets with TargetTimeMinutesPastMidnight=60,180,300,420,540,660,780,900,1020,1140,1260 and all with TargetSoC=100, AddedEnergy=2500000",
                    "expectation": "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVNotDetected sent",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE TimeOfUse Mode Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_4",
            "desc": "5.1.5. [TC-EEVSE-2.4] Fault test functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_4",
            "path": "sdk/TC_EEVSE_2_4",
            "pics": [
                "EEVSE.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "After a few seconds TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH reads from the DUT the FaultState",
                    "expectation": "Value has to be 0x00 (NoError)",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x01 (PluggedInNoDemand)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the SessionID",
                    "expectation": "Value is noted for later",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EVSE Ground Fault Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E04(Fault) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x00 (NoError), FaultStateCurrentFaultState = 0x07 (GroundFault)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x06 (Fault)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x04 (DisabledError)",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EVSE Over Temperature Fault Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E04(Fault) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x07 (GroundFault), FaultStateCurrentFaultState = 0x0F (OverTemperature)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x06 (Fault)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x04 (DisabledError)",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EVSE Fault Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E04(Fault) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x0F (OverTemperature), FaultStateCurrentFaultState = 0x00 (NoError)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Charge Demand Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_5",
            "desc": "5.1.6. [TC-EEVSE-2.5] Optional diagnostics functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_5",
            "path": "sdk/TC_EEVSE_2_5",
            "pics": [
                "EEVSE.S",
                "EEVSE.S.C04.Rsp"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH reads from the DUT the FaultState",
                    "expectation": "Value has to be 0x00 (NoError)",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x01 (ChargingEnabled)",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends command StartDiagnostics",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends command StartDiagnostics",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x04 (DisabledDiagnostics)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status FAILURE(0x01)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x04 (DisabledDiagnostics)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EVSE Diagnostics Complete Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the SupplyState",
                    "expectation": "Value has to be 0x00 (Disabled)",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_6",
            "desc": "5.1.6. [TC-EEVSE-2.6] Test Q quality functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_6",
            "path": "sdk/TC_EEVSE_2_6",
            "pics": [
                "EEVSE.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the FeatureMap",
                    "expectation": "Verify that the DUT response contains the FeatureMap attribute. Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Set up a subscription to all EnergyEVSE cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "Set up a subscription to the EnergyEVSE cluster, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 10 and KeepSubscriptions set to True",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=12000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Charge Demand Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x03 (PluggedInCharging)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Reset all accumulated report counts, then wait 12 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionID attribute",
                    "expectation": "TH verifies that numberOfReportsReceived = 0",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionDuration attribute",
                    "expectation": "TH verifies that numberOfReportsReceived <= 2",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionEnergyCharged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived <= 2",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionEnergyDischarged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived <= 2",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "Reset all accumulated report counts",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EEVSE.S.E03(EnergyTransferStopped) sent with reason EvseStopped",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Charge Demand Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "Wait 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionID attribute",
                    "expectation": "TH verifies that numberOfReportsReceived = 0",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionDuration attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionEnergyCharged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "15c"
                },
                {
                    "description": "If V2X feature is supported on the cluster, TH counts all report transactions with an attribute report for the SessionEnergyDischarged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "15d"
                },
                {
                    "description": "Reset all accumulated report counts",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "Wait 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionID attribute",
                    "expectation": "TH verifies that numberOfReportsReceived = 1",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionDuration attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "18b"
                },
                {
                    "description": "TH counts all report transactions with an attribute report for the SessionEnergyCharged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "18c"
                },
                {
                    "description": "If V2X feature is supported on the cluster, TH counts all report transactions with an attribute report for the SessionEnergyDischarged attribute",
                    "expectation": "TH verifies that numberOfReportsReceived >= 1",
                    "is_commissioning": false,
                    "test_plan_number": "18d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EV Plugged-in Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for Basic Functionality Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "Cancel the subscription to the Device Energy Management cluster",
                    "expectation": "The subscription is cancelled successfully",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_7",
            "desc": "[TC-EEVSE-2.7] Optional SoCReporting feature functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_7",
            "path": "sdk/TC_EEVSE_2_7",
            "pics": [
                "EEVSE.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the FeatureMap",
                    "expectation": "Verify that the DUT response contains the FeatureMap attribute. Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the State",
                    "expectation": "Value has to be 0x00 (NotPluggedIn)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EVConnected sent",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Set SoC Low Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the StateOfCharge",
                    "expectation": "Value has to be 20 % state of charge.",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the BatteryCapacity",
                    "expectation": "Value has to be 70,000,000 (70kWh).",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "If ChargingPreferences feature is not supported, skip all remaining test steps.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends command ClearTargets",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "10d"
                },
                {
                    "description": "TH sends command SetTargets with DayOfTheWeekforSequence=0x7F (i.e. having all days set) and a single ChargingTargets={TargetTimeMinutesPastMidnight=1439, TargetSoC=80, AddedEnergy=25000000}. Store TargetTimeMinutesPastMidnight converted from local timezone into Matter EPOCH in UTC as TargetTime, TargetSoC as TargetSoC, and AddedEnergy as AddedEnergy.",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "11d"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: in this step, the vehicle has provided StateOfCharge of 20%, and the TargetSoC is 80%, so the EVSE will attempt to charge the vehicle to 80% NextChargeTargetSoC. NextChargeStartTime and NextChargeTargetTime should be non null values. NextChargeRequiredEnergy should be null to indicate StateOfCharge based charging.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be less than the value of TargetTime.",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be equal to the value of TargetTime.",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "12c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be equal to the value of TargetSoC.",
                    "is_commissioning": false,
                    "test_plan_number": "12d"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: in this step, the EVSE is disabled so all information about future charging should be null.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "13c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "13d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Set SoC High Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the StateOfCharge",
                    "expectation": "Value has to be 95% state of charge.",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the BatteryCapacity",
                    "expectation": "Value has to be 70,000,000 (70kWh).",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: in this step, the vehicle has provided StateOfCharge of 95%, and the TargetSoC is 80%, so the EVSE will NOT attempt to charge the vehicle. NextChargeTargetSoC and NextChargeTargetTime should be non null to indicate to the user that the preference is recorded.  NextChargeStartTime should be null to indicate it is not going to charge. NextChargeRequiredEnergy should be null to indicate StateOfCharge based charging.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be equal to the value of TargetTime.",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "15c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be equal to the value of TargetSoC.",
                    "is_commissioning": false,
                    "test_plan_number": "15d"
                },
                {
                    "description": "TH sends command Disable",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: in this step, the EVSE is disabled so all information about future charging should be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "16d"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Set SoC Clear Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the StateOfCharge",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH reads from the DUT the BatteryCapacity",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "17b"
                },
                {
                    "description": "TH sends command EnableCharging with ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)\nNOTE: in this step, the vehicle has NOT provided StateOfCharge so the EVSE will fallback to using AddedEnergy to attempt to charge the vehicle. NextChargeTargetTime and NextChargeRequiredEnergy should be the values from step 11 above.  NextChargeStartTime should be non null to indicate it is going to charge in the future. NextChargeRequiredEnergy should be non null to indicate AddedEnergy based charging and NextChargeTargetSoC should be null.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the NextChargeStartTime",
                    "expectation": "Value has to be less than the value of TargetTime.",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetTime",
                    "expectation": "Value has to be equal to the value of TargetTime.",
                    "is_commissioning": false,
                    "test_plan_number": "18b"
                },
                {
                    "description": "TH reads from the DUT the NextChargeRequiredEnergy",
                    "expectation": "Value has to be equal to the value of AddedEnergy.",
                    "is_commissioning": false,
                    "test_plan_number": "18c"
                },
                {
                    "description": "TH reads from the DUT the NextChargeTargetSoC",
                    "expectation": "Value has to be null.",
                    "is_commissioning": false,
                    "test_plan_number": "18d"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_8",
            "desc": "[TC-EEVSE-2.8] Optional PlugAndCharge feature functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_8",
            "path": "sdk/TC_EEVSE_2_8",
            "pics": [
                "EEVSE.S.F02"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the VehicleID attribute.",
                    "expectation": "Verify that the DUT response contains a string value, or null.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Set VehicleID Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the VehicleID attribute.",
                    "expectation": "Verify that the DUT response contains a string value with length <= 32 characters.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                }
            ]
        },
        {
            "class_name": "TC_EEVSE_2_9",
            "desc": "[TC-EEVSE-2.9] Optional RFID feature functionality with DUT as Server",
            "function": "test_TC_EEVSE_2_9",
            "path": "sdk/TC_EEVSE_2_9",
            "pics": [
                "EEVSE.S",
                "EEVSE.S.F03"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "Set up a subscription to all EnergyEVSE cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EEVSE.TESTEVENTTRIGGER for EVSE Trigger RFID Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH checks its subscription to RFID from DUT has yielded one new event within 5 seconds",
                    "expectation": "Verify the data of the RFID event received by TH contains a UID with a maximum of 10 bytes.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                }
            ]
        },
        {
            "class_name": "TC_EGC_2_1",
            "desc": "[TC-EGC-2.1] Attributes with DUT as Server",
            "function": "test_TC_EGC_2_1",
            "path": "sdk/TC_EGC_2_1",
            "pics": [
                "EGC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the LocalGenerationAvailable attribute.",
                    "expectation": "Verify that the DUT response contains either null or a bool value.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the CurrentConditions attribute.",
                    "expectation": "Verify that the DUT response contains either null or an ElectricalGridConditionsStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the ForecastConditions attribute.",
                    "expectation": "Verify that the DUT response contains a list of ElectricalGridConditionsStruct entries",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                }
            ]
        },
        {
            "class_name": "TC_EGC_2_2",
            "desc": "[TC-EGC-2.2] Primary Functionality with DUT as Server",
            "function": "test_TC_EGC_2_2",
            "path": "sdk/TC_EGC_2_2",
            "pics": [
                "EGC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to all ElectricalGridConditions cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EGC.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EGC.TESTEVENTTRIGGER for Current Conditions Update Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event EGC.S.E0000(CurrentConditionsChanged) sent.\n                     Store the event's CurrentConditions field as NewCurrentConditions.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the CurrentConditions attribute.",
                    "expectation": "Verify that the DUT response contains a ElectricalGridConditionsStruct value.\n                        Verify that the value matches the NewCurrentConditions from step 4.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                }
            ]
        },
        {
            "class_name": "TC_EGC_2_3",
            "desc": "[TC-EGC-2.3] Forecast feature functionality with DUT as Server",
            "function": "test_TC_EGC_2_3",
            "path": "sdk/TC_EGC_2_3",
            "pics": [
                "EGC.S",
                "EGC.F00"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EGC.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EGC.TESTEVENTTRIGGER for Forecast Conditions Update Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the ForecastConditions attribute.",
                    "expectation": "Verify that the DUT response contains a list of  ElectricalGridConditionsStruct (or empty).",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                }
            ]
        },
        {
            "class_name": "TC_EPM_2_1",
            "desc": "5.1.2. [TC-EPM-2.1] Attributes with Server as DUT",
            "function": "test_TC_EPM_2_1",
            "path": "sdk/TC_EPM_2_1",
            "pics": [
                "EPM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads PowerMode attribute",
                    "expectation": "Verify that the DUT response contains an enum8 value",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads NumberOfMeasurementTypes attribute",
                    "expectation": "Verify that the DUT response contains an uint8 value.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads Accuracy attribute",
                    "expectation": "Verify that the DUT response contains a list of MeasurementAccuracyStruct entries ",
                    "is_commissioning": "Verify that the list has between 1 and NumberOfMeasurementTypes entries.",
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads Ranges attribute",
                    "expectation": "Verify that the DUT response contains a list of MeasurementRangeStruct entries ",
                    "is_commissioning": "Verify that the list has between 0 and NumberOfMeasurementTypes entries.",
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads Voltage attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads ActiveCurrent attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads ReactiveCurrent attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads ApparentCurrent attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of 0 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads ActivePower attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads ReactivePower attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads ApparentPower attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads RMSVoltage attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads RMSCurrent attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads RMSPower attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads Frequency attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of 0 to 1000000.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads HarmonicCurrents attribute",
                    "expectation": "Verify that the DUT response contains a list of HarmonicMeasurementStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads HarmonicPhases attribute",
                    "expectation": "Verify that the DUT response contains a list of HarmonicMeasurementStruct entries.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads PowerFactor attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -10000 to 10000.",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads NeutralCurrent attribute",
                    "expectation": "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -2^62 to 2^62.",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                }
            ]
        },
        {
            "class_name": "TC_EPM_2_2",
            "desc": "5.1.3. [TC-EPM-2.2] Primary functionality with DUT as Server",
            "function": "test_TC_EPM_2_2",
            "path": "sdk/TC_EPM_2_2",
            "pics": [
                "EPM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EPM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EPM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the ActivePower attribute",
                    "expectation": "Verify the read is successful and that the value is between 980'000 and 1'020'000 mW. Note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the ActiveCurrent attribute",
                    "expectation": "Verify the read is successful and that the value is between 3'848 and 4'848 mA. Note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the Voltage attribute",
                    "expectation": "Verify the read is successful and that the value is between 229'000 and 231'000 mV. Note the value read.",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Wait 3 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the ActivePower attribute",
                    "expectation": "Verify the read is successful, that the value is between '980'000 and 1'020'000 mW, and the value is different from the value read in step 4a.",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the ActiveCurrent attribute",
                    "expectation": "Verify the read is successful, that the value is between 3'848 and 4'848 mA, and the value is different from the value read in step 4b.",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH reads from the DUT the Voltage attribute",
                    "expectation": "Verify the read is successful, that the value is between 229'000 and 231'000 mV, and the value is different from the value read in step 4c.",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EPM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EPM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_EPREF_2_1",
            "desc": "[TC-EPREF-2.1] Attributes with DUT as Server",
            "function": "test_TC_EPREF_2_1",
            "path": "sdk/TC_EPREF_2_1",
            "pics": [
                "EPREF.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the FeatureMap attribute",
                    "expectation": "Execute steps 3 to 5 if BALA feature is set to 1 and execute steps 6 to 7b if LPMS feature is set to 1",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the EnergyBalances attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the CurrentEnergyBalance attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH writes to the DUT the CurrentEnergyBalance attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH writes to the DUT the CurrentEnergyBalance attribute with an out of index value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the EnergyPriorities attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the LowPowerModeSensitivites attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the CurrentLowPowerModeSensitivity attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH writes to the DUT the CurrentLowPowerModeSensitivity attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH writes to the DUT the CurrentLowPowerModeSensitivity attribute with an out of index value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                }
            ]
        },
        {
            "class_name": "TC_EWATERHTR_2_1",
            "desc": "[TC-EWATERHTR-2.1] Attributes with attributes with DUT as Server\nThis test case verifies the non-global attributes of the Water Heater Management cluster server.",
            "function": "test_TC_EWATERHTR_2_1",
            "path": "sdk/TC_EWATERHTR_2_1",
            "pics": [
                "EWATERHTR.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the FeatureMap attribute.",
                    "expectation": "Verify that the DUT response contains the FeatureMap attribute. Store the value as FeatureMap.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the HeaterTypes attribute.",
                    "expectation": "Verify that the DUT response contains a WaterHeaterTypeBitmap (enum8) greater than 0x00 (at least one type supported), and less than 0x20 (no undefined types supported)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand attribute.",
                    "expectation": "Verify that the DUT response contains a WaterHeaterDemandBitmap (enum8) value less than 0x20 (no undefined types supported).",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the TankVolume attribute.",
                    "expectation": "Verify that the DUT response contains a uint16 value.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the EstimatedHeatRequired attribute.",
                    "expectation": "Verify that the DUT response contains an energy-mWh value that is greater or equal to 0.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage attribute.",
                    "expectation": "Verify that the DUT response contains a percent value that is between 0 and 100 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the BoostState attribute.",
                    "expectation": "Verify that the DUT response contains a BoostStateEnum (enum8) value that is less than or equal to 1.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                }
            ]
        },
        {
            "class_name": "TC_EWATERHTR_2_2",
            "desc": "[TC-EWATERHTR-2.2] Basic functionality with attributes with DUT as Server.This test case verifies the primary functionality of the Water Heater Management cluster server.",
            "function": "test_TC_EWATERHTR_2_2",
            "path": "sdk/TC_EWATERHTR_2_2",
            "pics": [
                "EWATERHTR.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to all WaterHeaterManagement cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Basic installation Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the HeaterTypes",
                    "expectation": "Value has to be greater than 0x00 (at least one type supported) and Store the value as HeaterTypes",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Manual mode Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 20C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Off mode Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends command Boost with Duration=5s,OneShot=True",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=5 and OneShot=True",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH sends command Boost with Duration=600s,OneShot=True",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=600 and OneShot=True",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 20C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH sends command Boost with Duration=600s",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=600 and OneShot=None",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "14a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "14b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "15a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "15b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 20C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "16a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "16b"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "17a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "17b"
                },
                {
                    "description": "TH sends command Boost with Duration=500s,TemporarySetpoint=65C",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=500 and TemporarySetpoint=6500",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "18a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "18b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "19a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "19b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 66C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "20a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "20b"
                },
                {
                    "description": "TH sends command Boost with Duration=600s,TemporarySetpoint=70C",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=600 and TemporarySetpoint=7000",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "21a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "21b"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "22a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "22b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 20C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "23a"
                },
                {
                    "description": "TH sends command Boost with Duration=200s,EmergencyBoost=True",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=200, EmergencyBoost=True and TemporarySetpoint=None",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "24a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "24b"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "25a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "25b"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and no event sent",
                    "is_commissioning": false,
                    "test_plan_number": "26"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Basic installation Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "27"
                }
            ]
        },
        {
            "class_name": "TC_EWATERHTR_2_3",
            "desc": "[TC-EWATERHTR-2.3] This test case verifies the functionality of the Water Heater Management cluster server with the TankPercentage feature.",
            "function": "test_TC_EWATERHTR_2_3",
            "path": "sdk/TC_EWATERHTR_2_3",
            "pics": [
                "EWATERHTR.S",
                "EWATERHTR.S.F01"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to all WaterHeaterManagement cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Basic installation Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 0%",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH reads from the DUT the HeaterTypes",
                    "expectation": "Value has to be greater than 0x00 (at least one type supported) and Store the value as HeaterTypes",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                },
                {
                    "description": "TH sends command Boost with Duration=600s,TargetPercentage=100%",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=600 and TargetPercentage=100",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 100%",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Draw off hot water Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 76%",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 76%",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH sends command Boost with Duration=400s,TargetPercentage=100%,TargetReheat=65%",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostStarted) sent with Duration=400 and TargetPercentage=100 and TargetReheat=65",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 76%",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Water Temperature 61C Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 100%",
                    "is_commissioning": false,
                    "test_plan_number": "10c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Draw off hot water Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 76%",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Draw off hot water Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be greater than 0x00 (demand on at least one source) and (HeaterDemand & (!HeaterTypes)) is zero (demand is only from declared supported types)",
                    "is_commissioning": false,
                    "test_plan_number": "12a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 1 (Active)",
                    "is_commissioning": false,
                    "test_plan_number": "12b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 57%",
                    "is_commissioning": false,
                    "test_plan_number": "12c"
                },
                {
                    "description": "TH sends command CancelBoost",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and Event EWATERHTR.S.E00(BoostEnded) sent",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the HeatDemand",
                    "expectation": "Value has to be 0x00 (no demand on any source)",
                    "is_commissioning": false,
                    "test_plan_number": "13a"
                },
                {
                    "description": "TH reads from the DUT the BoostState",
                    "expectation": "Value has to be 0 (Inactive)",
                    "is_commissioning": false,
                    "test_plan_number": "13b"
                },
                {
                    "description": "TH reads from the DUT the TankPercentage",
                    "expectation": "Value has to be 57%",
                    "is_commissioning": false,
                    "test_plan_number": "13c"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EWATERHTR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.EWATERHTR.TESTEVENTTRIGGER for Basic installation Test Event Clear",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                }
            ]
        },
        {
            "class_name": "TC_FAN_2_1",
            "desc": "[TC-FAN-2.1] Mandatory functionality with DUT as Server",
            "function": "test_TC_FAN_2_1",
            "path": "sdk/TC_FAN_2_1",
            "pics": [
                "FAN.S"
            ],
            "steps": [
                {
                    "description": "[FC] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[FC] TH checks for support of the Auto feature.",
                    "expectation": "Save result for future use.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "[FC] TH reads from the DUT the FanModeSequence attribute.",
                    "expectation": "Verify that the DUT response contains a FanModeSequenceEnum with value between 0 and 5 inclusive. If Auto is not supported, verify that the FanModeSequence attribute value is 0, 1, or 5. If Auto is supported, verify that the FanModeSequence attribute value is 2, 3, or 4.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "[FC] TH reads from the DUT the FanMode attribute value.",
                    "expectation": "Verify that the DUT response contains a FanModeEnum with a value between 0 and 5, excluding 4 and 6 (deprecated). Verify that the FanMode attribute value is supported by the FanModeSequence attribute value.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "[FC] TH reads from the DUT the PercentSetting attribute.",
                    "expectation": "Verify that the DUT response contains a uint8 with value between 0 and 100 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "[FC] TH reads from the DUT the PercentCurrent attribute.",
                    "expectation": "Verify that the DUT response contains a uint8 with value between 0 and 100 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_FAN_2_3",
            "desc": "[TC-FAN-2.3] Optional rock attributes with DUT as Server",
            "function": "test_TC_FAN_2_3",
            "path": "sdk/TC_FAN_2_3",
            "pics": [
                "FAN.S.F02"
            ],
            "steps": [
                {
                    "description": "[FC] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[FC] TH reads from the DUT the RockSupport attribute.",
                    "expectation": "Verify that the RockSupport attribute value is a map8 bitmap. Verify that the RockSupport attribute's value is between 1 and 3 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "[FC] TH reads from the DUT the RockSetting attribute.",
                    "expectation": "Verify that the RockSetting attribute value is a map8 bitmap. Verify that the RockSetting attribute's value is between 0 and 3 inclusive",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "[FC] TH checks that RockSetting is conformant with RockSupport.",
                    "expectation": "Verify that all bits set in RockSetting are also set in RockSupport.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "[FC] TH writes a valid bit from RockSupport to RockSetting.",
                    "expectation": "Device shall return SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "[FC] TH reads the RockSetting attribute.",
                    "expectation": "Verify that the proper bit was set from the previous step.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_FAN_2_4",
            "desc": "[TC-FAN-2.4] Optional wind attributes with DUT as Server",
            "function": "test_TC_FAN_2_4",
            "path": "sdk/TC_FAN_2_4",
            "pics": [
                "FAN.S.F03"
            ],
            "steps": [
                {
                    "description": "[FC] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[FC] TH reads from the DUT the WindSupport attribute.",
                    "expectation": "Verify that the WindSupport attribute value is a map8 bitmap. Verify that the WindSupport attribute's value is between 1 and 3 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "[FC] TH reads from the DUT the WindSetting attribute.",
                    "expectation": "Verify that the WindSetting attribute value is a map8 bitmap. Verify that the WindSetting attribute's value is between 0 and 3 inclusive",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "[FC] TH checks that WindSetting is conformant with WindSupport.",
                    "expectation": "Verify that all bits set in WindSetting are also set in WindSupport.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "[FC] TH writes a valid bit from WindSupport to WindSetting.",
                    "expectation": "Device shall return SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "[FC] TH reads the WindSetting attribute.",
                    "expectation": "Verify that the proper bit was set from the previous step.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_FAN_3_1",
            "desc": "[TC-FAN-3.1] Mandatory functionality with DUT as Server",
            "function": "test_TC_FAN_3_1",
            "path": "sdk/TC_FAN_3_1",
            "pics": [
                "FAN.S"
            ],
            "steps": [
                {
                    "description": "[FC] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[FC] TH reads the FanModeSequence attribute from the DUT. This attribute specifies the available fan modes.",
                    "expectation": "Verify that the DUT response contains a FanModeSequenceEnum and store.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "[FC] TH checks the DUT for support of the MultiSpeed feature.",
                    "expectation": "If the MultiSpeed feature is supported the SpeedSetting attribute will be present.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "[FC] TH tests the following scenario: - Attribute to update: PercentSetting - Attribute to verify: PercentSetting, FanMode and SpeedSetting (if present) - Update order: Ascending. Actions: * Initialize the DUT to `FanMode` Off and read back the value to verify written value. * Individually subscribe to the `PercentSetting`, `FanMode`, and `SpeedSetting` (if supported) attributes * Update the value of the `PercentSetting` attribute iteratively, in ascending order, from 1 to 100.",
                    "expectation": "For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify that the value of the attribute reports from the subscription of each attribute came in sequencially in ascending order (each new value greater than the previous one).",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "[FC] TH tests the following scenario: - Attribute to update: PercentSetting - Attribute to verify: PercentSetting, FanMode and SpeedSetting (if present) - Update order: Descending. Actions: * Initialize the DUT to `FanMode` High and read back the value to verify written value. * Individually subscribe to the `PercentSetting`, `FanMode`, and `SpeedSetting` (if supported) attributes * Update the value of the `PercentSetting` attribute iteratively, in descending order, from 99 to 0.",
                    "expectation": "For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify that the value of the attribute reports from the subscription of each attribute came in sequencially in descending order (each new value less than the previous one).",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "[FC] TH tests the following scenario: - Attribute to update: FanMode - Attribute to verify: FanMode, PercentSetting and SpeedSetting (if present) - Update order: Ascending. Actions: * Initialize the DUT to `FanMode` Off and read back the value to verify written value. * Individually subscribe to the `PercentSetting`, `FanMode`, and `SpeedSetting` (if supported) attributes * Update the value of the `FanMode` attribute iteratively, in ascending order, from 0 (Off) to the number of available fan modes specified by the `FanModeSequence` attribute, excluding modes beyond 3 (High).",
                    "expectation": "For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify that the value of the attribute reports from the subscription of each attribute came in sequencially in ascending order (each new value greater than the previous one). Verify that the number of FanMode reports matches the number of PercentSetting reports",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "[FC] TH tests the following scenario: - Attribute to update: FanMode - Attribute to verify: FanMode, PercentSetting and SpeedSetting (if present) - Update order: Descending. Actions: * Initialize the DUT to `FanMode` High and read back the value to verify written value. * Individually subscribe to the `PercentSetting`, `FanMode`, and `SpeedSetting` (if supported) attributes * Update the value of the `FanMode` attribute iteratively, in ascending order, from the number of available fan modes specified by the `FanModeSequence` attribute, excluding modes beyond 3 (High), to 0 (Off).",
                    "expectation": "For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify that the value of the attribute reports from the subscription of each attribute came in sequencially in descending order (each new value less than the previous one). Verify that the number of FanMode reports matches the number of PercentSetting reports",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_FAN_3_2",
            "desc": "[TC-FAN-3.2] Optional speed functionality with DUT as Server",
            "function": "test_TC_FAN_3_2",
            "path": "sdk/TC_FAN_3_2",
            "pics": [
                "FAN.S.F00"
            ],
            "steps": [
                {
                    "description": "[FC] Commissioning already done.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "[FC] TH reads the SpeedMax attribute from the DUT. This attribute specifies the the maximum value for SpeedSetting.",
                    "expectation": "[FC] Verify that the DUT response contains a uint8 value no greater than 100 and store.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "[FC] TH reads the FanModeSequence attribute from the DUT. This attribute specifies the available fan modes.",
                    "expectation": "Verify that the DUT response contains a FanModeSequenceEnum and store.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "[FC] Initialize the DUT to `FanMode` Off.",
                    "expectation": "[FC] * Read back and verify the written value. * The DUT shall return either a SUCCESS or an INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "[FC] Individually subscribe to the PercentSetting, PercentCurrent, FanMode, SpeedSetting, and SpeedCurrent attributes.",
                    "expectation": "[FC] This will receive updates for the attributes when the SpeedSetting attribute is updated.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "[FC] Update the value of the `SpeedSetting` attribute iteratively, in ascending order, from 1 to SpeedMax.",
                    "expectation": "[FC] For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify: If no INVALID_IN_STATE write status was returned during the SpeedSetting updates: -- Verify that if the number of reports received for SpeedSetting is greater than or equal to the number of reports received for FanMode, then the number of reports received for FanMode should be equal to the number of available FanModes - 1 (since the first FanMode is Off due to initialization). -- Verify that the number of reports received for PercentSetting matches the number of reports received for SpeedSetting. * The value of the attribute reports from the subscription of each attribute came in sequencially in ascending order (each new value greater than the previous one).",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "[FC] Initialize the DUT to `FanMode` High.",
                    "expectation": "[FC] * Read back and verify the written value. * The DUT shall return either a SUCCESS or an INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "[FC] Individually subscribe to the PercentSetting, PercentCurrent, FanMode, SpeedSetting, and SpeedCurrent attributes.",
                    "expectation": "[FC] This will receive updates for the attributes when the SpeedSetting attribute is updated.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "[FC] Update the value of the `SpeedSetting` attribute iteratively, in descending order, from SpeedMax - 1 to 0.",
                    "expectation": "[FC] For each update, the DUT shall return either a SUCCESS or an INVALID_IN_STATE status code. After all updates have been performed, verify: If no INVALID_IN_STATE write status was returned during the SpeedSetting updates: -- Verify that if the number of reports received for SpeedSetting is greater than or equal to the number of reports received for FanMode, then the number of reports received for FanMode should be equal to the number of available FanModes - 1 (since the first FanMode is High due to initialization). -- Verify that the number of reports received for PercentSetting matches the number of reports received for SpeedSetting. * The value of the attribute reports from the subscription of each attribute came in sequencially in descending order (each new value less than the previous one).",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_FAN_3_3",
            "desc": "[TC-FAN-3.3] Optional rock functionality with DUT as Server",
            "function": "test_TC_FAN_3_3",
            "path": "sdk/TC_FAN_3_3",
            "pics": [
                "FAN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read from the DUT the RockSupport attribute and store",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "RockLeftRight is supported, so write 0x01 to RockSetting",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read from the DUT the RockSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "RockLeftRight is not supported, so write 0x01 to RockSetting to check for constraint error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "RockUpDown is supported, so write 0x02 to RockSetting",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read from the DUT the RockSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "RockUpDown is not supported, so write 0x02 to RockSetting to check for constraint error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "RockRound is supported, so write 0x04 to RockSetting",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read from the DUT the RockSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "RockRound is not supported, so write 0x04 to RockSetting to check for constraint error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Write RockSetting to 0x00",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_FAN_3_4",
            "desc": "[TC-FAN-3.4] Optional wind functionality with DUT as Server",
            "function": "test_TC_FAN_3_4",
            "path": "sdk/TC_FAN_3_4",
            "pics": [
                "FAN.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read from the DUT the WindSupport attribute and store",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "SleepWind is supported, so write 0x01 to WindSetting",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read from the DUT the WindSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "SleepWind is not supported, so write 0x01 to WindSetting to check for constraint error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "NaturalWind is supported, so write 0x02 to WindSetting",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read from the DUT the WindSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "NaturalWind is not supported, so write 0x02 to WindSetting to check for constraint error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Write WindSetting to 0x00",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_FAN_3_5",
            "desc": "test_TC_FAN_3_5",
            "function": "test_TC_FAN_3_5",
            "path": "sdk/TC_FAN_3_5",
            "pics": [
                "FAN.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_FAN_4_1",
            "desc": "[TC-FAN-4.1] Fan interaction with On/Off cluster",
            "function": "test_TC_FAN_4_1",
            "path": "sdk/TC_FAN_4_1",
            "pics": [
                "FAN.S",
                "OO.S"
            ],
            "steps": [
                {
                    "description": "TH Commissions DUT.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH subscribes to the Fan control cluster",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads the supported fan modes",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If SPD is supported, TH reads SpeedMax",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the On command to the On/Off cluster",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sets the FanMode attribute on the Fan Control cluster to High",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads the PercentSetting attribute from the Fan Control cluster and saves as `percent_setting_original`",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If the SPD feature is supported, TH reads the SpeedSetting attribute from the Fan Control cluster and saves as `speed_setting_original`",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads the PercentCurrent attribute from the Fan Control cluster",
                    "expectation": "SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If PercentCurrent is not equal to PercentSetting, TH awaits an attribute report for the PercentCurrent matching PercentSetting",
                    "expectation": "Report is received",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the Off command to the On/Off cluster",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH awaits the following attribute reports (order does not matter): PercentCurrent is 0, SpeedCurrent is 0 (if SPD feature is supported)",
                    "expectation": "Report(s) are received",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH reads the FanMode attribute",
                    "expectation": "FanMode is set to HIGH",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads the PercentSetting attribute",
                    "expectation": "PercentSetting matches `percent_setting_original",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "If the SPD feature is supported, TH reads the SpeedSetting",
                    "expectation": "SpeedSetting matches `speed_setting_original`",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Set the PercentSetting to 1. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to lowest supported mode above Off",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is 1",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is 1",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "Set the PercentSetting to 0. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to Off",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "Set the FanMode to High. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to High",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is not 0",
                    "is_commissioning": false,
                    "test_plan_number": 32
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 33
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 34
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is not 0",
                    "is_commissioning": false,
                    "test_plan_number": 35
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 36
                },
                {
                    "description": "Set the FanMode to Off. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 37
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to Off",
                    "is_commissioning": false,
                    "test_plan_number": 38
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 39
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 40
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 41
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 42
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 43
                },
                {
                    "description": "If SPD is not supported, skip this step and the next 6 steps. Set the SpeedSetting to SpeedMax. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 44
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to High",
                    "is_commissioning": false,
                    "test_plan_number": 45
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is not 0",
                    "is_commissioning": false,
                    "test_plan_number": 46
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 47
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 48
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is SpeedMax",
                    "is_commissioning": false,
                    "test_plan_number": 49
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 50
                },
                {
                    "description": "If SPD is not supported, skip this step and the next 6 steps. Set the SpeedSetting to 0. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 51
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to Off",
                    "is_commissioning": false,
                    "test_plan_number": 52
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 53
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 54
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 55
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is 0",
                    "is_commissioning": false,
                    "test_plan_number": 56
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 57
                },
                {
                    "description": "Set the PercentSetting to 100. If the write returns INVALID_IN_STATE, skip the next six steps",
                    "expectation": "INVALID_IN_STATE or SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 58
                },
                {
                    "description": "Read the FanMode",
                    "expectation": "Verify FanMode is set to High",
                    "is_commissioning": false,
                    "test_plan_number": 59
                },
                {
                    "description": "Read PercentSetting",
                    "expectation": "Verify PercentSetting is 100",
                    "is_commissioning": false,
                    "test_plan_number": 60
                },
                {
                    "description": "Wait for PIXIT.FanStartTime seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 61
                },
                {
                    "description": "Read PercentCurrent",
                    "expectation": "PercentCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 62
                },
                {
                    "description": "If SPD is supported, Read SpeedSetting",
                    "expectation": "Verify SpeedSetting is SpeedMax",
                    "is_commissioning": false,
                    "test_plan_number": 63
                },
                {
                    "description": "If SPD is supported, Read SpeedCurrent",
                    "expectation": "SpeedCurrent is 0",
                    "is_commissioning": false,
                    "test_plan_number": 64
                },
                {
                    "description": "TH reads the PercentSetting and SpeedSetting (if supported) values and saves as `percent_setting_before_on` and `speed_setting_before_on`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 65
                },
                {
                    "description": "TH sends On command to the On/Off cluster",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 66
                },
                {
                    "description": "TH awaits the following attribute reports (order does not matter): PercentCurrent is `percent_setting_before_on`, SpeedCurrent is `speed_setting_before_on` (if SPD feature is supported)",
                    "expectation": "Reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 67
                },
                {
                    "description": "TH sets PercentSetting to 50",
                    "expectation": "Response is SUCCESS or INVALID_IN_STATE",
                    "is_commissioning": false,
                    "test_plan_number": 68
                },
                {
                    "description": "If the response was SUCCESS, TH awaits the following attribute reports (order does not matter): PercentCurrent is 50, PercentSetting is 50",
                    "expectation": "Report(s) are received",
                    "is_commissioning": false,
                    "test_plan_number": 69
                }
            ]
        },
        {
            "class_name": "Test_TC_FLABEL_2_1",
            "desc": "[TC-FLABEL-2.1] Fixed Label Cluster [DUT-server]",
            "function": "test_TC_FLABEL_2_1",
            "path": "sdk/TC_FLABEL_2_1",
            "pics": [
                "FLABEL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads LabelList from the DUT",
                    "expectation": "Read is successful",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH tries to write LabelList attribute",
                    "expectation": "Write fails with UNSUPPORTED_WRITE",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verify LabelList hasn't changed",
                    "expectation": "LabelList matches initial read",
                    "is_commissioning": false,
                    "test_plan_number": 4
                }
            ]
        },
        {
            "class_name": "TC_G_2_2",
            "desc": "Commands - AddGroup, ViewGroup, RemoveGroup, RemoveAllGroups [DUT-Server]",
            "function": "test_TC_G_2_2",
            "path": "sdk/TC_G_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Comissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 using a key that is pre-installed on the TH. GroupKeySet fields are as follows:",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH writes the GroupKeyMap attribute in the GroupKeyManagement cluster on EP0 with maxgroups entries binding GroupId(0x0001 to (maxgroups)) with GroupKeySetID 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH cleans up the groups by sending the RemoveAllGroups command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1c"
                },
                {
                    "description": "TH sends AddGroup command to DUT as unicast with the following fields: ",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1d"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0: GroupId as 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Verify that the GroupTable contains an entry with the GroupName as Gp1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends AddGroup command to DUT as unicast with the following fields: ",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "Verify that the GroupTable contains an entry with the GroupId as 0x0002",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Verify that the GroupTable contains an entry with the GroupName as Gp2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends AddGroup command to DUT (maxgroups-2) more times, starting with GroupID 0x0003 and incrementing by 1 each time.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on Ep0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH binds GroupId (maxgroups+1) with GroupKeySetID 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends AddGroup command to DUT as unicast with the GroupID set to (maxgroups+1)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends AddGroup command to DUT  as unicast with the following fields: GroupID as 0x0000, GroupName as Gp0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends AddGroup command to DUT as unicast with the following fields : GroupID as maxgroups+0x0005 GroupName as Gp5",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends ViewGroup command to DUT as unicast with the following fields: GroupID as 0x0001",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "Verify that the ViewGroupResponse contains GroupName belongs to the GroupID in the ViewGroup command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH sends ViewGroup command to DUT as unicast with the following fields: GroupID as 0x0000",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH sends RemoveGroup command to DUT as unicast with the following field :GroupID as 0x0001",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends ViewGroup command to DUT as unicast with the following field : GroupID as 0x0001",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends RemoveGroup command to DUT as unicast with the following field : GroupID as 0x0000",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH sends RemoveGroup command to DUT as unicast with the following field : GroupID as 0x0001",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH sends RemoveAllGroups command to DUT as unicast method",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH sends ViewGroup command to DUT as unicast with the following fields: GroupID as 0x0002",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends AddGroup command to DUT as unicast with the following fields: GroupID as 0x0001, GroupName as Gp123456789123456 Note: GroupName length > 16",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                }
            ]
        },
        {
            "class_name": "TC_ICDM_2_1",
            "desc": "[TC_ICDM_2_1]  attributes with DUT as Server",
            "function": "test_TC_ICDM_2_1",
            "path": "sdk/TC_ICDM_2_1",
            "pics": [
                "ICDM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1a"
                },
                {
                    "description": "CTH reads from the DUT the FeatureMap attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH reads from the DUT the ActiveModeThreshold attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the ActiveModeDuration attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the IdleModeDuration attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the ClientsSupportedPerFabric attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the ICDCounter attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the UserActiveModeTriggerHint attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the UserActiveModeTriggerInstruction attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads from the DUT the OperatingMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the MaximumCheckInBackoff attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_ICDM_3_1",
            "desc": "[TC-ICDM-3.1] Register/Unregister Clients with DUT as Server",
            "function": "test_TC_ICDM_3_1",
            "path": "sdk/TC_ICDM_3_1",
            "pics": [
                "ICDM.S",
                "ICDM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute. RegisteredClients is empty.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH reads from the DUT the ClientsSupportedPerFabric attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH reads from the DUT the ICDCounter attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1c"
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If len(RegisteredClients) is less than ClientsSupportedPerFabric, TH repeats RegisterClient command with different CheckInNodeID(s) until the number of entries in RegisteredClients equals ClientsSupportedPerFabric.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends RegisterClient command with a different CheckInNodeID.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TTH sends UnregisterClient command with the CheckInNodeID from Step 6.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID from Step 2.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Repeat Step 8-9 with the rest of CheckInNodeIDs from the list of RegisteredClients from Step 4, if any.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID from Step 2.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_ICDM_3_2",
            "desc": "[TC-ICDM-3.2] Verify RegisterClient Command with DUT as Server",
            "function": "test_TC_ICDM_3_2",
            "path": "sdk/TC_ICDM_3_2",
            "pics": [
                "ICDM.S",
                "ICDM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute. RegisteredClients is empty.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Power cycle DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2d"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2e"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID1 as in Step 1a and different MonitorSubID2 and Key2.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID1 as in Step 1a and different MonitorSubID3 and Key3, and an invalid VerificationKey3.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID1 as in Step 1a and different MonitorSubID4 and Key4, and a valid wrong VerificationKey4.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH sends UnregisterClient command with CheckInNodeID1.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Set the TH to Manage privilege for ICDM cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID5 as in Step 6a and different MonitorSubID6 and Key6, and an invalid VerificationKey6.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID5 as in Step 6a and different MonitorSubID7 and Key7, and an valid wrong VerificationKey7.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH sends RegisterClient command with same CheckInNodeID5 and VerificationKey5 as in Step 6a and different MonitorSubID9 and Key9.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID5 and VerificationKey5.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_ICDM_3_3",
            "desc": "[TC-ICDM-3.3] Register/Unregister Clients with DUT as Server",
            "function": "test_TC_ICDM_3_3",
            "path": "sdk/TC_ICDM_3_3",
            "pics": [
                "ICDM.S",
                "ICDM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH sends UnregisterClient command with CheckInNodeID1, where CheckInNodeID1 can be any random node ID.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID3.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID2.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID4 as in Step 5a and an invalid VerificationKey5.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5d"
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID6 as in Step 6a and a wrong VerificationKey7.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Set the TH to Manage privilege for ICDM cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID8 from Step 8a and an invalid VerificationKey9.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID8 from Step 8a and a valid wrong VerificationKey10.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH sends UnregisterClient command with the CheckInNodeID8 and VerificationKey8 from Step 8a.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8d"
                }
            ]
        },
        {
            "class_name": "TC_ICDM_3_4",
            "desc": "[TC-ICDM-3.4] ICDCounter Persistence with DUT as Server",
            "function": "test_TC_ICDM_3_4",
            "path": "sdk/TC_ICDM_3_4",
            "pics": [
                "ICDM.S",
                "ICDM.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the ICDCounter attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Power cycle DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Verify that the DUT response contains value of ICDCounter and stores in IcdCounter2.                             IcdCounter2 is greater or equal to IcdCounter1.                             ICDCounter attribute can roll over. If the attribute rolls over, it will be greater or equal to 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_ICDM_5_1",
            "desc": "[TC-ICDM-5.1] Operating Mode with DUT as Server",
            "function": "test_TC_ICDM_5_1",
            "path": "sdk/TC_ICDM_5_1",
            "pics": [
                "ICDM.S",
                "ICDM.S.F02"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the RegisteredClients attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the OperatingMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Verify that the ICD DNS-SD TXT key is present.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH sends RegisterClient command.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads from the DUT the OperatingMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Verify that mDNS is advertising ICD key.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH sends UnregisterClient command with CheckInNodeID1.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperatingMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Verify that the ICD DNS-SD TXT key is present.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                }
            ]
        },
        {
            "class_name": "TestICDManagementCluster",
            "desc": "test_active_mode_test_event_trigger",
            "function": "test_active_mode_test_event_trigger",
            "path": "sdk/TC_ICDManagementCluster",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_IDM_1_2",
            "desc": "test_TC_IDM_1_2",
            "function": "test_TC_IDM_1_2",
            "path": "sdk/TC_IDM_1_2",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_IDM_1_4",
            "desc": "test_TC_IDM_1_4",
            "function": "test_TC_IDM_1_4",
            "path": "sdk/TC_IDM_1_4",
            "pics": [],
            "steps": [
                {
                    "description": "Get remote node's MaxPathsPerInvoke",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Sending `MaxPathsPerInvoke + 1` InvokeRequest if it fits into single MTU",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Sending two InvokeRequests with identical paths",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Sending two InvokeRequests with unique paths, but identical CommandRefs",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Verify DUT responds to InvokeRequestMessage containing two valid paths",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verify DUT responds to InvokeRequestMessage containing one valid paths, and one InvokeRequest to unsupported endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verify DUT responds to InvokeRequestMessage containing two valid paths. One of which requires timed invoke, and TimedRequest in InvokeResponseMessage set to true, but never sending preceding Timed Invoke Action",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Verify DUT responds to InvokeRequestMessage containing two valid paths. One of which requires timed invoke, and TimedRequest in InvokeResponseMessage set to true",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Verify DUT supports extended Data Model Testing feature in General Diagnostics Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Verify DUT has TestEventTriggersEnabled attribute set to true in General Diagnostics Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Verify DUT capable of responding to request with multiple InvokeResponseMessages",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_IDM_4_2",
            "desc": "test_TC_IDM_4_2",
            "function": "test_TC_IDM_4_2",
            "path": "sdk/TC_IDM_4_2",
            "pics": [],
            "steps": [
                {
                    "description": "TH commissions DUT if required",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "CR1 reads the ServerList attribute from the Descriptor cluster on EP0.",
                    "expectation": "If the ICD Management cluster ID (70,0x46) is present, set SUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT_SEC = IdleModeDuration and min_interval_floor_s to 0, otherwise, set SUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT_SEC = 60 mins and min_interval_floor_s to 3.",
                    "is_commissioning": false,
                    "test_plan_number": 0
                },
                {
                    "description": "CR1 sends a subscription message to the DUT with MaxIntervalCeiling set to a value greater than subscription_max_interval_publisher_limit_sec. DUT sends a report data action to the TH. CR1 sends a success status response to the DUT. DUT sends a Subscribe Response Message to the CR1 to activate the subscription.",
                    "expectation": "Verify on the CR1, a report data message is received. Verify it contains the following data Report data - data of the attribute/event requested earlier. Verify on the CR1 the Subscribe Response has the following fields, SubscriptionId - Verify it is of type uint32. MaxInterval - Verify it is of type uint32. Verify that the MaxInterval is less than or equal to MaxIntervalCeiling.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "CR1 sends a subscription message to the DUT with MaxIntervalCeiling set to a value less than subscription_max_interval_publisher_limit_sec. DUT sends a report data action to the CR1. CR1 sends a success status response to the DUT. DUT sends a Subscribe Response Message to the CR1 to activate the subscription.",
                    "expectation": "Verify on the CR1, a report data message is received. Verify it contains the following data: Report data - data of the attribute/event requested earlier. Verify on the CR1 the Subscribe Response has the following fields, SubscriptionId - Verify it is of type uint32. MaxInterval - Verify it is of type uint32. Verify that the MaxInterval is less than or equal to SUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Setup CR2 such that it does not have access to a specific cluster. CR2 sends a subscription message to subscribe to an attribute on that cluster for which it does not have access.",
                    "expectation": "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Setup CR2 such that it does not have access to all attributes on a specific cluster and endpoint. CR2 sends a subscription request to subscribe to all attributes for which it does not have access.",
                    "expectation": "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Setup CR2 such that it does not have access to an Endpoint. CR2 sends a subscription request to subscribe to all attributes on all clusters on a specific Endpoint for which it does not have access.",
                    "expectation": "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Setup CR2 such that it does not have access to the Node. CR2 sends a subscription request to subscribe to all attributes on all clusters on all endpoints on a Node for which it does not have access.",
                    "expectation": "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "CR1 sends a subscription request action for an attribute with an empty DataVersionFilters field. DUT sends a report data action with the data of the attribute along with the data version. Tear down the subscription for that attribute. Start another subscription with the DataVersionFilter field set to the data version received above.",
                    "expectation": "Verify that the subscription is activated between CR1 and DUT.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "CR1 sends a subscription request action for an attribute and sets the MinIntervalFloor to min_interval_floor_sec and MaxIntervalCeiling to 10. Activate the Subscription between CR1 and DUT and record the time when the priming ReportDataMessage is received as t_report_sec. Save the returned MaxInterval from the SubscribeResponseMessage as max_interval_sec.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "CR1 modifies the attribute which has been subscribed to on the DUT and waits for an incoming ReportDataMessage",
                    "expectation": "Verify that t_update - t_report is greater than min_interval_floor_s and less than the ReadClient SubscriptionTimeout (calculated by the ReadClient using max_interval_s and the maximum estimated network delay based on the MRP parameters for retries with backoff)",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "CR1 sends a subscription request action for an attribute and set the MinIntervalFloor value to be greater than MaxIntervalCeiling.",
                    "expectation": "Verify that the DUT sends an error message and the subscription is not established.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "CR1 sends a subscription request to subscribe to a specific global attribute from all clusters on all endpoints.",
                    "expectation": "Verify that the Subscription succeeds and the DUT sends back the attribute values for the global attribute.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "CR1 sends a subscription request to subscribe to a global attribute on an endpoint on all clusters.",
                    "expectation": "Verify that the Subscription succeeds and the DUT sends back the attribute values for the global attribute. Verify no data from other endpoints is sent back.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "CR1 sends a subscription request to the DUT with both AttributeRequests and EventRequests as empty.",
                    "expectation": "Verify that the Subscription does not succeed and the DUT sends back a Status Response Action with the INVALID_ACTION Status Code",
                    "is_commissioning": false,
                    "test_plan_number": 13
                }
            ]
        },
        {
            "class_name": "TC_I_2_4",
            "desc": "[TC-I-2.4] Reporting requirements with server as DUT",
            "function": "test_TC_I_2_4",
            "path": "sdk/TC_I_2_4",
            "pics": [
                "I.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription wildcard subscription for the Identify Cluster, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 30 and KeepSubscriptions set to false",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH stores the reported values of IdentifyTime in all incoming reports for IdentifyTime attribute, that contains data in reportedIdentifyTimeValuesList, over a period of 15 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes to the DUT the IdentifyTime attribute to 5.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH writes to the DUT the IdentifyTime attribute to 10.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Wait for 12 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH verifies reportedIdentifyTimeValuesList contains three entries",
                    "expectation": "reportedIdentifyTimeValuesList has 3 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH verifies the first entry in reportedIdentifyTimeValuesList is 5",
                    "expectation": "The first entry in reportedIdentifyTimeValuesList is equal to 5 (+/- 1)",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH verifies the second entry in reportedIdentifyTimeValuesList is 10",
                    "expectation": "The second entry in reportedIdentifyTimeValuesList is equal to 10 (+/- 1)",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH verifies the third entry in reportedIdentifyTimeValuesList is 0",
                    "expectation": "The third entry in reportedIdentifyTimeValuesList is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH clears the reportedIdentifyTimeValuesList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH writes to the DUT the IdentifyTime attribute to 5.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH writes to the DUT the IdentifyTime attribute to 0.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Wait for 1 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH verifies reportedIdentifyTimeValuesList contains two entries",
                    "expectation": "reportedIdentifyTimeValuesList has 2 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH verifies the first entry in reportedIdentifyTimeValuesList is 5",
                    "expectation": "The first entry in reportedIdentifyTimeValuesList is equal to 5 (+/- 1)",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH verifies the second entry in reportedIdentifyTimeValuesList is 0",
                    "expectation": "The second entry in reportedIdentifyTimeValuesList is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH clears the reportedIdentifyTimeValuesList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH sends the command Identify command with the value of IdentifyTime field set to 5",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH sends the command Identify command with the value of IdentifyTime field set to 10",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "Wait for 12 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH verifies reportedIdentifyTimeValuesList contains three entries",
                    "expectation": "reportedIdentifyTimeValuesList has 3 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH verifies the first entry in reportedIdentifyTimeValuesList is 5",
                    "expectation": "The first entry in reportedIdentifyTimeValuesList is equal to 5 (+/- 1)",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH verifies the second entry in reportedIdentifyTimeValuesList is 10",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH verifies the third entry in reportedIdentifyTimeValuesList is 0",
                    "expectation": "The third entry in reportedIdentifyTimeValuesList is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH clears the reportedIdentifyTimeValuesList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH sends the command Identify command with the value of IdentifyTime field set to 5",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH sends the command Identify command with the value of IdentifyTime field set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 28
                },
                {
                    "description": "Wait for 1 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 29
                },
                {
                    "description": "TH verifies reportedIdentifyTimeValuesList contains two entries",
                    "expectation": "reportedIdentifyTimeValuesList has 2 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 30
                },
                {
                    "description": "TH verifies the first entry in reportedIdentifyTimeValuesList is 5",
                    "expectation": "The first entry in reportedIdentifyTimeValuesList is equal to 5 (+/- 1)",
                    "is_commissioning": false,
                    "test_plan_number": 31
                },
                {
                    "description": "TH verifies the second entry in reportedIdentifyTimeValuesList is 0",
                    "expectation": "The second entry in reportedIdentifyTimeValuesList is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 32
                }
            ]
        },
        {
            "class_name": "TC_JFADMIN_2_1",
            "desc": "test_TC_JFADMIN_2_1",
            "function": "test_TC_JFADMIN_2_1",
            "path": "sdk/TC_JFADMIN_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "TH1 read AdministratorFabricIndex attribute.",
                    "expectation": "DUT reply contains AdministratorFabricIndex with a value in range 1..254.",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH1 read Fabrics attribute from Operation Cluster on EP0.",
                    "expectation": "DUT reply FabricDescriptorStruct with FabricID equal to AdministratorFabricIndex from step 1.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                }
            ]
        },
        {
            "class_name": "TC_JFADMIN_2_2",
            "desc": "test_TC_JFADMIN_2_2",
            "function": "test_TC_JFADMIN_2_2",
            "path": "sdk/TC_JFADMIN_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "TH sends ICACCSRRequest command to DUT.",
                    "expectation": "DUT response contains status code FAILSAFE_REQUIRED.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends ArmFailSafe command to DUT with ExpiryLengthSeconds set to 10 and Breadcrumb 1.",
                    "expectation": "DUT respond with ArmFailSafeResponse Command.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends ICACCSRRequest command to DUT.",
                    "expectation": "DUT response contains an ICACCSR.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "Wait for ArmFailSafe to expire.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends AddICAC command to DUT using icac1 as parameter.",
                    "expectation": "DUT response contains status code FAILSAFE_REQUIRED.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends ArmFailSafe command to DUT with ExpiryLengthSeconds set to 10 and Breadcrumb 1.",
                    "expectation": "DUT respond with ArmFailSafeResponse Command.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                }
            ]
        },
        {
            "class_name": "TC_JFDS_2_1",
            "desc": "test_TC_JFDS_2_1",
            "function": "test_TC_JFDS_2_1",
            "path": "sdk/TC_JFDS_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "TH reads AnchorRootCA attribute from DUT",
                    "expectation": "Verify that a RootCA is returned",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads AnchorNodeID attribute from DUT",
                    "expectation": "Verify that the DUT NodeId is returned",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads AnchorVendorID attribute from DUT",
                    "expectation": "Verify that the VendorId of the DUT is returned",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads FriendlyName from DUT",
                    "expectation": "Verify that the a valid string is returned",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                }
            ]
        },
        {
            "class_name": "TC_JFDS_2_2",
            "desc": "test_TC_JFDS_2_2",
            "function": "test_TC_JFDS_2_2",
            "path": "sdk/TC_JFDS_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "TH reads KeySetList attribute from DUT",
                    "expectation": "Verify that at least one entry is returned and an entry with GroupKeySetID=0 exists in the list.",
                    "is_commissioning": false,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH sends AddKeySet command to DUT with GroupKeySetID=0x000a.",
                    "expectation": "Verify that the DUT responds with Status as SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads KeySetList attribute from DUT",
                    "expectation": "Verify that one entry has been added",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends RemoveKeySet command to DUT with GroupKeySetID=0x000a.",
                    "expectation": "Verify that the DUT responds with Status as SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads KeySetList attribute from DUT",
                    "expectation": "Verify that no entry with GroupKeySetID=0x000a exists in the list.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                }
            ]
        },
        {
            "class_name": "Test_TC_LCFG_2_1",
            "desc": "test_TC_LCFG_2_1",
            "function": "test_TC_LCFG_2_1",
            "path": "sdk/TC_LCFG_2_1",
            "pics": [
                "LCFG.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads SupportedLocales attribute from DUT",
                    "expectation": "Read is successful",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads ActiveLocale attribute from the DUT",
                    "expectation": "Read is successful",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH writes new string not present in SupportedLocales attribute to ActiveLocale attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes new string present in SupportedLocales attribute to ActiveALocale attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads ActiveLocale",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_LTIME_3_1",
            "desc": "4.1.1. [TC-LTIME-3.1] Read and Write Time Format Localization Cluster Attributes [DUT as Server]",
            "function": "test_TC_LTIME_3_1",
            "path": "sdk/TC_LTIME_3_1",
            "pics": [
                "LTIME.S"
            ],
            "steps": [
                {
                    "description": "TH is commissioned with DUT",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads HourFormat attribute from DUT",
                    "expectation": "Verify that the HourFormat attribute is of Enum8 datatype and that the values are 0 (12hr), 1 (24hr), and 255 (UseActiveLocale) as per the HourFormatEnum in the specification.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH writes 0(12hr) to HourFormat attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If the prior write was successful, TH reads HourFormat attribute",
                    "expectation": "Verify that the value is 0 (12hr).",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes 1(24hr) to HourFormat attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the prior write was successful, TH reads HourFormat attribute",
                    "expectation": "Verify that the value is 1 (24hr).",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH writes 255 (UseActiveLocale) to HourFormat attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If the prior write was successful, TH reads HourFormat attribute",
                    "expectation": "Verify that the value is 255 (UseActiveLocale).",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH writes 5 to HourFormat attribute",
                    "expectation": "Verify that the write request shows 0x87 (Constraint Error).",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads the feature map attribute. If the CALFMT feature is not supported, skip all remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads SupportedCalendarTypes attribute from DUT and saves as `cluster_supported_calendar_types`",
                    "expectation": "Verify that the SupportedCalendarTypes attribute is of Enum8 datatype and only contains values from 0-11 (specific calendar types) and 255 (UseActiveLocale), as defined in the CalendarTypeEnum in the specification.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads ActiveCalendarType attribute from DUT",
                    "expectation": "Verify that the ActiveCalendarType is in `cluster_supported_calendar_types`",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "For each entry in `cluster_supported_calendar_types`, TH writes that value to ActiveCalendarType, verifies that the write was successful and confirms the value via a read",
                    "expectation": "Write is successful and read value matches for every entry",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH finds the set of CalendarTypesEnum value that do not appear in `cluster_supported_calendar_types` and saves as `cluster_not_supported_calendar_types`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "For each value in `cluster_unsupported_calendar_types`, TH writes the value to the ActiveCalendarType attributes",
                    "expectation": "DUT returns CONSTRAINT_ERROR",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH writes 50 to ActiveCalendarType attribute",
                    "expectation": "Verify that the write request shows 0x87 (Constraint Error).",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "TC_LUNIT_3_1",
            "desc": "[TC-LUNIT-2.1] Read and Write Unit Localization Cluster Attributes with DUT as Server",
            "function": "test_TC_LUNIT_3_1",
            "path": "sdk/TC_LUNIT_3_1",
            "pics": [
                "LUNIT.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if required",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH reads from the DUT the TemperatureUnit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "If supported, TH reads from the DUT the SupportedTemperatureUnits attribute",
                    "expectation": "Verify the list length is between 2 and 3 inclusive.\nVerify that each entry in the list is a valid\nTempUnitEnum value and is unique.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If the SupportedTemperatureUnits is supported, TH creates a `supported` list With each entry in SupportedUnitsList. If SupportedTemperatureUnits is not supported, TH creates a `supported` list with Celsius and Fahrenheit. TH writes each entry in the `supported` list to the DUT the TemperatureUnit attribute",
                    "expectation": "Write is successful",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If the SupportedTemperatureUnits is supported, TH construct a list with valid TempUnitEnum values that are not contained in SupportedUnitsList",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "if the SupportedTemperatureUnits is supported, With each entry in UnsupportedUnitsList, TH writes to the DUT the TemperatureUnit attribute",
                    "expectation": "Write returns CONSTRAINT_ERROR",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "If SupportedTemperatureUnits is not supported, TH writes Kelvin",
                    "expectation": "Write either returns SUCCESS or CONSTRAINT_ERROR",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_LVL_2_3",
            "desc": "test_TC_LVL_2_3",
            "function": "test_TC_LVL_2_3",
            "path": "sdk/TC_LVL_2_3",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads FeatureMap attribute and the AttributeList value",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If the MaxLevel attribute is in the AttributeList, TH reads MaxLevel attribute and store value as maxLevel, otherwise set maxLevel to 254",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "If the MinLevel attribute is in the AttributeList, TH reads MinLevel attribute and store value as minLevel, otherwise set minLevel to 0 if LT is not supported or 1 if LT is supported",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH sends the command MoveWithOnOff with MoveMode field set to Down and rate set to 254 and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads CurrentLevel attribute and store value as startCurrentLevel",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set up a subscription wildcard subscription for the Level Control Cluster, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 30 and KeepSubscriptions set to false",
                    "expectation": "Subscription successfully established",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the command MoveToLevelWithOnOff with Level field set to maxLevel, TransitionTime field set to 100 (10s) and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH stores the reported values of CurrentLevel in all incoming reports for CurrentLevel attribute, that contains data in reportedCurrentLevelValuesList, over a period of 30 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH verifies that reportedCurrentLevelValuesList does not contain more than 12 entries for CurrentLevel",
                    "expectation": "reportedCurrentLevelValuesList has 12 or fewer entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If reportedCurrentLevelValuesList only contain a single entry, TH verifies the value of the entry is equal to maxLevel",
                    "expectation": "The entry in reportedCurrentLevelValuesList is equal to maxLevel",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "If reportedCurrentLevelValuesList contains two or more entries, TH verifies the value of the first entry is larger than startCurrentLevel",
                    "expectation": "The first entry in reportedCurrentLevelValuesList is equal to or larger than to startCurrentLevel",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "If reportedCurrentLevelValuesList contains two or more entries, TH verifies the value of the last entry is equal to maxLevel",
                    "expectation": "The last entry in reportedCurrentLevelValuesList is equal to maxLevel",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "If the LT feature is not supported, skip remaining steps and end test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH stores the reported values of RemainingTime in all incoming reports for RemainingTime attribute, that contains data in reportedRemainingTimeValuesList.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "\tTH sends the command MoveToLevel with Level field set to startCurrentLevel, TransitionTime field set to 100 (10s) and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Wait for 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends the command MoveToLevel with Level field set to startCurrentLevel, TransitionTime field set to 150 (15s) and remaining fields set to 0",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "Wait for 20 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH verifies reportedRemainingTimeValuesList contains three entries",
                    "expectation": "reportedRemainingTimeValuesList has 3 entries in the list",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH verifies the first entry in reportedRemainingTimeValuesList is approximately 100 (10s)",
                    "expectation": "The first entry in reportedRemainingTimeValuesList is in the range 95 - 100",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH verifies the second entry in reportedRemainingTimeValuesList is approximately 150",
                    "expectation": "The second entry in reportedRemainingTimeValuesList is in the range 145 - 150",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH verifies the third entry in reportedRemainingTimeValuesList is 0",
                    "expectation": "The third entry in reportedRemainingTimeValuesList is equal to 0",
                    "is_commissioning": false,
                    "test_plan_number": 23
                }
            ]
        },
        {
            "class_name": "TC_LWM_1_2",
            "desc": "[TC-LWM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_LWM_1_2",
            "path": "sdk/TC_LWM_1_2",
            "pics": [
                "LWM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_MCORE_FS_1_1",
            "desc": "test_TC_MCORE_FS_1_1",
            "function": "test_TC_MCORE_FS_1_1",
            "path": "sdk/TC_MCORE_FS_1_1",
            "pics": [],
            "steps": [
                {
                    "description": "Enable Fabric Synchronization on DUT_FSA using the manufacturer specified mechanism.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Commission DUT_FSA onto TH_FSA fabric.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Reverse Commission TH_FSAs onto DUT_FSA fabric.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH_FSA sends RequestCommissioningApproval",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH_FSA sends CommissionNode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "DUT_FSA commissions TH_FSA",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                }
            ]
        },
        {
            "class_name": "TC_MCORE_FS_1_2",
            "desc": "test_TC_MCORE_FS_1_2",
            "function": "test_TC_MCORE_FS_1_2",
            "path": "sdk/TC_MCORE_FS_1_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH subscribes to PartsList attribute of the Descriptor cluster of DUT_FSA endpoint 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Follow manufacturer provided instructions to have DUT_FSA commission TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH waits up to 30 seconds for subscription report from the PartsList attribute of the Descriptor to contain new endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH uses DUT to open commissioning window to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH commissions TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads all attributes in Basic Information cluster from TH_SERVER directly",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads all attributes in the Bridged Device Basic Information cluster on new endpoint identified in step 3 from the DUT_FSA",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_MCORE_FS_1_3",
            "desc": "test_TC_MCORE_FS_1_3",
            "function": "test_TC_MCORE_FS_1_3",
            "path": "sdk/TC_MCORE_FS_1_3",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH commissions TH_SERVER_NO_UID to TH's fabric",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "DUT_FSA commissions TH_SERVER_NO_UID to DUT_FSA's fabric and generates a UniqueID.",
                    "expectation": "TH verifies a value is visible for the UniqueID from the DUT_FSA's Bridged Device Basic Information Cluster.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_MCORE_FS_1_4",
            "desc": "test_TC_MCORE_FS_1_4",
            "function": "test_TC_MCORE_FS_1_4",
            "path": "sdk/TC_MCORE_FS_1_4",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH commissions TH_SERVER_NO_UID to TH's fabric.",
                    "expectation": "TH verifies that the TH_SERVER_NO_UID does not provide a UniqueID.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH instructs TH_FSA to commission TH_SERVER_NO_UID to TH_FSA's fabric.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH instructs TH_FSA to open up commissioning window on it's aggregator.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Follow manufacturer provided instructions to have DUT_FSA commission TH_FSA's aggregator.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Follow manufacturer provided instructions to enable DUT_FSA to synchronize TH_SERVER_NO_UID from TH_FSA onto DUT_FSA's fabric. TH to provide endpoint saved from step 2 in user prompt.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "DUT_FSA synchronizes TH_SERVER_NO_UID onto DUT_FSA's fabric and copies the UniqueID presented by TH_FSA's Bridged Device Basic Information Cluster.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_MCORE_FS_1_5",
            "desc": "test_TC_MCORE_FS_1_5",
            "function": "test_TC_MCORE_FS_1_5",
            "path": "sdk/TC_MCORE_FS_1_5",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "TH subscribes to PartsList attribute of the Descriptor cluster of DUT_FSA endpoint 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Follow manufacturer provided instructions to have DUT_FSA commission TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH waits up to 30 seconds for subscription report from the PartsList attribute of the Descriptor to contain new endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH uses DUT to open commissioning window to TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH commissions TH_SERVER",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH subscribes to AdministratorCommissioning attributes on DUT_FSA for the newly added endpoint identified in step 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH opens commissioning window to TH_SERVER directly (not using DUT)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads CurrentFabricIndex attributes on OperationalCredentials cluster from TH_SERVER directly (not using DUT_FSA)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads AdministratorCommissioning from TH_SERVER directly (not using DUT)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH waits up to 10 seconds for subscription report from the AdministratorCommissioning attribute (from step 6) to reflect values from previous step",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "MOD_1_2",
            "desc": "80.2.1. [TC-MOD-1.2] Cluster attributes with DUT as Server",
            "function": "test_MOD_1_2",
            "path": "sdk/TC_MOD_1_2",
            "pics": [
                "MOD.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the SupportedModes attribute from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads the CurrentMode attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the OnMode attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads the StartUpMode attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads the Description attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads the StandardNamespace attribute from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_MTRID_2_1",
            "desc": "Attributes with Server as DUT",
            "function": "test_TC_MTRID_2_1",
            "path": "sdk/TC_MTRID_2_1",
            "pics": [
                "MTRID.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "DUT is commissioned.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads MeterType attribute",
                    "expectation": "\n                     - DUT replies a null or a MeterTypeEnum value;\n                     - Verify that value in range 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads PointOfDelivery attribute",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads MeterSerialNumber attribute",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads ProtocolVersion attribute",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads PowerThreshold attribute",
                    "expectation": "\n                     - DUT replies a null or a value of PowerThresholdStruct type;\n                     - PowerThreshold field has type int64;\n                     - ApparentPowerThreshold field has type int64;\n                     - PowerThresholdSource field has type PowerThresholdSourceEnum and value in range 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                }
            ]
        },
        {
            "class_name": "TC_MTRID_3_1",
            "desc": "Subscription Report Verification with Server as DUT",
            "function": "test_TC_MTRID_3_1",
            "path": "sdk/TC_MTRID_3_1",
            "pics": [
                "MTRID.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "DUT is commissioned.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to the Meter Identification cluster:\n                     - MinIntervalFloor: 0\n                     - MaxIntervalCeiling: 10",
                    "expectation": "Subscription successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads MeterType attribute.",
                    "expectation": "\n                     - DUT replies a null or a MeterTypeEnum value;\n                     - Verify that value in range 0 - 2;\n                     - Store value as meter_type.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads PointOfDelivery attribute.",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64;\n                     - Store value as point_of_delivery.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads MeterSerialNumber attribute.",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64;\n                     - Store value as meter_serial_number.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads ProtocolVersion attribute.",
                    "expectation": "\n                     - DUT replies a null or a value of string type;\n                     - Verify that size is in range 0 - 64;\n                     - Store value as protocol_version.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads PowerThreshold attribute.",
                    "expectation": "\n                     - DUT replies a null or a value of PowerThresholdStruct type;\n                     - PowerThreshold field has type int64;\n                     - ApparentPowerThreshold field has type int64;\n                     - PowerThresholdSource field has type PowerThresholdSourceEnum and value in range 0 - 2;\n                     - Store value as power_threshold.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "TestEventTriggersEnabled is True.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.MTRID.TEST_EVENT_TRIGGER_KEY \n                     and EventTrigger field set to PIXIT.MTRID.TEST_EVENT_TRIGGER for Attributes Value Set Test Event.",
                    "expectation": "DUT returns SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH awaits a MeterType attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and contains a null or a MeterTypeEnum value;\n                     - Value in range 0 - 2;\n                     - The value does not match the meter_type.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH awaits a PointOfDelivery attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and contains a null or a value of string type;\n                     - Size in range 0 - 64;\n                     - The value does not match the point_of_delivery.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH awaits a MeterSerialNumber attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and contains a null or a value of string type;\n                     - Size in range 0 - 64;\n                     - The value does not match the meter_serial_number.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH awaits a ProtocolVersion attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and contains a null or a value of string type;\n                     - Size in range 0 - 64;\n                     - The value does not match the protocol_version.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH awaits a PowerThreshold attribute with 10s timeout.",
                    "expectation": "\n                     - Verify the report is received and contains a null or a value of PowerThresholdStruct type;\n                     - PowerThreshold field has type int64;\n                     - ApparentPowerThreshold field has type int64;\n                     - PowerThresholdSource field has type PowerThresholdSourceEnum and value in range 0 - 2;\n                     - The value does not match the power_threshold.",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.MTRID.TEST_EVENT_TRIGGER_KEY \n                     and EventTrigger field set to PIXIT.MTRID.TEST_EVENT_TRIGGER for Test Event Clear.",
                    "expectation": "DUT returns SUCCESS.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH removes the subscriptions to the Meter Identification cluster.",
                    "expectation": "Subscription successfully removed.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                }
            ]
        },
        {
            "class_name": "TC_MWOCTRL_2_1",
            "desc": "[TC-MWOCTRL-2.1] Primary functionality with DUT as Server",
            "function": "test_TC_MWOCTRL_2_1",
            "path": "sdk/TC_MWOCTRL_2_1",
            "pics": [
                "MWOCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the MaxCookTime attribute and check limits",
                    "expectation": "Verify that the DUT response contains an elapsed-s value between 1 and 86400 inclusive. Save value as MaxCookTime.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the CookTime attribute and check limits",
                    "expectation": "Verify that the DUT response contains an elapsed-s value between 1 and MaxCookTime inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Set the CookTime attribute to 60",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read the CookTime attribute and check for 60",
                    "expectation": "Verify that the DUT response contains the CookTime value 60.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set the CookTime attribute to 1",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read the CookTime attribute and check for 1",
                    "expectation": "Verify that the DUT response contains the CookTime value 1.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Set the CookTime attribute to MaxCookTime",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00)",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read the CookTime attribute and check for MaxCookTime",
                    "expectation": "Verify that the DUT response contains the CookTime value MaxCookTime.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read the WattRating attribute, if supported",
                    "expectation": "Verify that the DUT response contains a uint16 value.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Set the CookTime attribute to 0",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Set the CookTime attribute to MaxCookTime+1",
                    "expectation": "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_MWOCTRL_2_2",
            "desc": "[TC-MWOCTRL-2.2] Secondary functionality with DUT as Server",
            "function": "test_TC_MWOCTRL_2_2",
            "path": "sdk/TC_MWOCTRL_2_2",
            "pics": [
                "MWOCTRL.S",
                "MWOCTRL.S.F00"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set MinPowerValue variable",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the MinPower attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Set the MaxPowerValue variable",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read the MaxPower attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set the PowerStepValue variable",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read the PowerStep attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read the PowerSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send the SetCookingParameters command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read and verify the PowerSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Set the PowerSetting attribute to the minimum value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read and verify the PowerSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Set the PowerSetting attribute to the maximum value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read and verify the PowerSetting attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Set PowerSetting to an invalid value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "If PowerStep=1, exit test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "Set PowerSetting to a value that is not an integer multiple of PowerStep",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                }
            ]
        },
        {
            "class_name": "TC_MWOCTRL_2_4",
            "desc": "[TC-MWOCTRL-2.4] WATTS functionality with DUT as Server",
            "function": "test_TC_MWOCTRL_2_4",
            "path": "sdk/TC_MWOCTRL_2_4",
            "pics": [
                "MWOCTRL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the SupportedWatts attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the SelectedWattIndex attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send the SetCookingParameters command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read and verify the SelectedWattIndex attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_MWOM_1_2",
            "desc": "[TC-MWOM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_MWOM_1_2",
            "path": "sdk/TC_MWOM_1_2",
            "pics": [
                "MWOM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the SupportedModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_OCC_2_1",
            "desc": "[TC-OCC-2.1] Attributes with DUT as Server",
            "function": "test_TC_OCC_2_1",
            "path": "sdk/TC_OCC_2_1",
            "pics": [
                "OCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read Occupancy attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read OccupancySensorType attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read OccupancySensorTypeBitmap attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read HoldTimeLimits attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read HoldTime attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read PIROccupiedToUnoccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read PIRUnoccupiedToOccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read PIRUnoccupiedToOccupiedThreshold attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read UltrasonicOccupiedToUnoccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read UltrasonicUnoccupiedToOccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read UltrasonicUnoccupiedToOccupiedThreshold attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read PhysicalContactOccupiedToUnoccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read PhysicalContactUnoccupiedToOccupiedDelay attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Read PhysicalContactUnoccupiedToOccupiedThreshold attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                }
            ]
        },
        {
            "class_name": "TC_OCC_2_2",
            "desc": "[TC-OCC-2.2] OccupancySensorTypeBitmap and OccupancySensorType interdependency with server as DUT",
            "function": "test_TC_OCC_2_2",
            "path": "sdk/TC_OCC_2_2",
            "pics": [
                "OCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read OccupancySensorType attribute selection based on FeatureMap Bitmap.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read OccupancySensorTypeBitmap attribute selection based on FeatureMap Bitmap.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_OCC_2_3",
            "desc": "[TC-OCC-2.3] HoldTime Backward Compatibility Test with server as DUT",
            "function": "test_TC_OCC_2_3",
            "path": "sdk/TC_OCC_2_3",
            "pics": [
                "OCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the FeatureMap attribute on the endpoint for use in later steps.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH checks DUT HoldTime attribute support in the AttributeList attribute. If DUT doesn't support HoldTime attribute, skip the rest of this test case.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes DUT HoldTime attribute with HoldTimeMin and afterwards reads the attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH writes DUT HoldTime attribute with HoldTimeMax and afterwards reads the attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "If DUT FeatureMap has PIR or (!PIR & !US & !PHY), and PIROccupiedToUnoccupiedDelay is supported, then TH writes HoldTimeMin to DUT's HoldTime attribute, otherwise skip 6a, 6b.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH writes DUT's PIROccupiedToUnoccupiedDelay attribute with HoldTimeMax, then TH reads DUT's PIROccupiedToUnoccupiedDelay and HoldTime attributes.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "If DUT FeatureMap has US, and UltrasonicOccupiedToUnoccupiedDelay is supported, then TH writes HoldTimeMin to DUT's HoldTime attribute, otherwise skip 7a, 7b.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH writes DUT UltrasonicOccupiedToUnoccupiedDelay attribute with HoldTimeMax, then TH reads DUT UltrasonicOccupiedToUnoccupiedDelay and HoldTime attributes.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "If DUT FeatureMap has PHY, and PhysicalContactOccupiedToUnoccupiedDelay is supported, then TH writes HoldTimeMin to HoldTime attribute, otherwise skip 8a, 8b.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH writes DUT PhysicalContactOccupiedToUnoccupiedDelay attribute with HoldTimeMax, then TH reads DUT PhysicalContactOccupiedToUnoccupiedDelay and HoldTime attributes.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                }
            ]
        },
        {
            "class_name": "TC_OCC_3_1",
            "desc": "[TC-OCC-3.1] Primary functionality with server as DUT",
            "function": "test_TC_OCC_3_1",
            "path": "sdk/TC_OCC_3_1",
            "pics": [
                "OCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "If HoldTime is supported, TH writes HoldTime attribute to 10 sec on DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Prompt operator to await until DUT occupancy changes to unoccupied state.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH subscribes to Occupancy sensor attributes and events.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Prompt operator to trigger occupancy change.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH reads Occupancy attribute from DUT. Verify occupancy changed to occupied and Occupancy attribute was reported as occupied.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "If supported, verify OccupancyChangedEvent was reported as occupied.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "If HoldTime is supported, wait for HoldTime, otherwise prompt operator to wait until no longer occupied.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads Occupancy attribute from DUT. Verify occupancy changed to unoccupied and Occupancy attribute was reported as unoccupied.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "If supported, verify OccupancyChangedEvent was reported as unoccupied.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                }
            ]
        },
        {
            "class_name": "TC_OCC_3_2",
            "desc": "[TC-OCC-3.2] Subscription Report Verification with server as DUT",
            "function": "test_TC_OCC_3_2",
            "path": "sdk/TC_OCC_3_2",
            "pics": [
                "OCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH establishes a wildcard subscription to all attributes on Occupancy Sensing Cluster on the endpoint under test. Subscription min interval = 0 and max interval = 30 seconds.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Prepare DUT to be unoccupied state.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH reads DUT Occupancy attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Trigger DUT to change the occupancy state.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH awaits a ReportDataMessage containing an attribute report for DUT Occupancy attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3d"
                },
                {
                    "description": "Check if DUT supports HoldTime attribute, If not supported, then stop and skip the rest of test cases.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH writes HoldTimeMin to HoldTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH clears its report history and writes HoldTimeMax to HoldTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "TH awaits a ReportDataMessage containing an attribute report for DUT HoldTime attribute and all legacy attributes supported.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4d"
                }
            ]
        },
        {
            "class_name": "TC_OPCREDS_3_1",
            "desc": "test_TC_OPCREDS_3_1",
            "function": "test_TC_OPCREDS_3_1",
            "path": "sdk/TC_OPCREDS_3_1",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_OPCREDS_3_2",
            "desc": " Attribute-CurrentFabricIndex validation [DUTServer]",
            "function": "test_TC_OPCREDS_3_2",
            "path": "sdk/TC_OPCREDS_3_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT to CR1 if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 0
                },
                {
                    "description": "Create a new controller on a new fabric called CR2.\nCommission the new controller from CR1 as follows:\n\n- CR1 sends an ArmFailsafe command, followed by a CSRRequest command.\n- Generate credentials on CR2 using the returned CSR.\n- Save the RCAC as `rcac_CR2. Save the ICAC as `icac_CR2`. Save the NOC as `noc_CR2`. Save the IPK as ipk_CR2.\n-  CR1 sends the AddTrustedRootCertificate command with `rcac_CR2`- CR1 sends the AddNOC command with the fields set as follows:\n  * NOCValue:        `noc_CR2`\n  * ICACValue:       `icac_CR2`\n  * IPKValue:        `ipk_CR2`\n  * CaseAdminSubject: CR2 node ID\n  * AdminVendorId:    CR2 vendor ID\n- CR2 connects over CASE and sends the commissioning complete command\n. Save the FabricIndex from the NOCResponse as `fabric_index_CR2`.",
                    "expectation": "Verify the commissioning is successful.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Create a new controller on a new fabric called CR3.\nCommission the new controller from CR1 as follows:\n\n- CR1 sends an ArmFailsafe command, followed by a CSRRequest command.\n- Generate credentials on CR3 using the returned CSR.\n- Save the RCAC as `rcac_CR3. Save the ICAC as `icac_CR3`. Save the NOC as `noc_CR3`. Save the IPK as ipk_CR3.\n-  CR1 sends the AddTrustedRootCertificate command with `rcac_CR3`- CR1 sends the AddNOC command with the fields set as follows:\n  * NOCValue:        `noc_CR3`\n  * ICACValue:       `icac_CR3`\n  * IPKValue:        `ipk_CR3`\n  * CaseAdminSubject: CR3 node ID\n  * AdminVendorId:    CR3 vendor ID\n- CR3 connects over CASE and sends the commissioning complete command\n. Save the FabricIndex from the NOCResponse as `fabric_index_CR3`.",
                    "expectation": "Verify the commissioning is successful.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "CR2 reads the CurrentFabricIndex attribute",
                    "expectation": "Verify the returned value is `fabric_index_CR2`",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "CR3 reads the CurrentFabricIndex attribute",
                    "expectation": "Verify the returned value is `fabric_index_CR3`",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "CR2 reads the Fabrics attribute using a fabric-filtered read",
                    "expectation": "- Verify there is one entry returned. Verify FabricIndex matches `fabric_index_CR2`.\n- Verify the RootPublicKey matches the public key for rcac_CR2.\n- Verify the VendorID matches the vendor ID for CR2.\n- Verify the FabricID matches the fabricID for CR2",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "CR3 reads the Fabrics attribute using a fabric-filtered read",
                    "expectation": "- Verify there is one entry returned. Verify FabricIndex matches `fabric_index_CR3`.\n- Verify the RootPublicKey matches the public key for rcac_CR3.\n- Verify the VendorID matches the vendor ID for CR3.\n- Verify the FabricID matches the fabricID for CR3",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to fabric_index_CR2.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to fabric_index_CR3.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_OPCREDS_3_4",
            "desc": " UpdateNOC-Error Condition [DUT-Server]",
            "function": "test_TC_OPCREDS_3_4",
            "path": "sdk/TC_OPCREDS_3_4",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT to TH1 if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read. Save the NOCs as nocs.",
                    "expectation": null,
                    "is_commissioning": "- Verify that the returned list has a single entry.\n- Save the NOC field as noc_original and the ICAC field as icac_original.\n",
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute attribute from the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the returned list has a single entry. Save the entry as trusted_root_original",
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields: NOCValue and ICACValue",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with FAILSAFE_REQUIRED",
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "expectation": null,
                    "is_commissioning": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields: NOCValue and ICACValue",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with a NOCResponse with the StatusCode field set to MissingCsr",
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 sends the CSRRequest command with the IsForUpdateNOC field set to false",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT returns a CSRResponse and save as csr_not_update",
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 generates a new NOC chain with ICAC with the following properties",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with CONSTRAINT_ERROR",
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 sends the CSRequest command with the IsForUpdateNOC field set to true",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT returns a CSRResponse and save as csr_not_update",
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidPublicKey",
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 generates a new Trusted Root Certificate and Private Key and saves as new_root_cert and new_root_key so that TH can generate an NOC for UpdateNOC that doesn\u2019t chain to the original root",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 generates a new NOC and ICAC",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 generates a new NOC and ICAC",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "test_plan_number": 16
                },
                {
                    "description": "TH1 generates a new NOC and ICAC",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 sends the AddTrustedRootCertificate command to DUT again with the RootCACertificate field set to new_root_cert",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with CONSTRAINT_ERROR",
                    "test_plan_number": 20
                },
                {
                    "description": "TH1 sends the ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0",
                    "expectation": null,
                    "is_commissioning": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "test_plan_number": 21
                },
                {
                    "description": "TH1 sends the OpenCommissioningWindow command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH1 connects to the DUT over PASE and sends the ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900. Steps 24-26 are all performed over the PASE connection.",
                    "expectation": null,
                    "is_commissioning": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "test_plan_number": 23
                },
                {
                    "description": "TH1 sends the CSRequest command over PASE with the IsForUpdateNOC field set to true",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT returns a CSRResponse and save as csr_pase",
                    "test_plan_number": 24
                },
                {
                    "description": "TH1 generates a new NOC chain with ICAC with the following properties: new NOC and ICAC using icac_pase",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster over PASE",
                    "expectation": null,
                    "is_commissioning": "Verify that the DUT responds with UNSUPPORTED_ACCESS",
                    "test_plan_number": 26
                }
            ]
        },
        {
            "class_name": "TC_OPCREDS_3_5",
            "desc": "test_TC_OPCREDS_3_5",
            "function": "test_TC_OPCREDS_3_5",
            "path": "sdk/TC_OPCREDS_3_5",
            "pics": [
                "OPCREDS.S"
            ],
            "steps": [
                {
                    "description": "TH0 adds TH1 over CASE",
                    "expectation": "Commissioning is successful",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the returned list has a single entry. Save the NOC field as noc_original and the ICAC field as icac_original",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "expectation": "Verify that at least one of the trusted_root_certificates in the returned list matches the RCAC",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to true",
                    "expectation": "Verify that the DUT returns a CSRResponse and save as csr_update1",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 generates a new NOC and ICAC with the following properties:\n\n                            - new NOC is generated from the NOCSR returned in csr_update1. The subject is set to match noc_original. The NOC is signed by the new ICA. Save as noc_update1\n\n                            - new ICAC must be distinguishable from icac_original. This can be accomplished by changing any of the following: the subject, subject public key or validity. The certificate must be valid. ICAC is signed by the original key for trusted_root_original. Save as icac_update1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:\n\n                            - NOCValue is set to noc_update1\n\n                            - ICACValue is to set icac_update1",
                    "expectation": "Verify that the DUT responds with a NOCResponse having its StatusCode field set to Ok",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the returned list has a single entry. Verify that the NOC field matches noc_update1 and the ICAC field matches icac_update1",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the returned list has a single entry. Verify that the NOC field matches noc_original and the ICAC field matches icac_original, due to the explicit expiry of the fail-safe done in the previous step, which is expected to have reverted the updated credentials back to their original value.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to true",
                    "expectation": "Verify that the DUT returns a CSRResponse and save as csr_update2",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH1 generates a new NOC and ICAC with the following properties:\n\n                                - new NOC is generated from the NOCSR returned in csr_update2. The subject is set to match noc_original. The NOC is signed by new ICA. Save as noc_update2\n\n                                - new ICAC must be distinguishable from icac_original and icac_update1. This can be accomplished by changing any of the following: the subject, subject public key or validity. The certificate must be valid. ICAC is signed by the original key for trusted_root_original. Save as icac_update2",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:\n\n                                - NOCValue is set to noc_update2\n\n                                - ICACValue is to set icac_update2",
                    "expectation": "Verify that the DUT responds with a NOCResponse having its StatusCode field set to Ok",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the returned list has a single entry. Verify that the NOC field matches noc_update2 and the ICAC field matches icac_update2",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH1 sends the CommissioningComplete command to the General Commissioning cluster",
                    "expectation": "Verify that the DUT returns a CommissioningCompleteResponse with the ErrorCode set to OK",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0 to verify that the CommissioningComplete command successfully persisted the failsafe context.",
                    "expectation": "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "expectation": "Verify that the returned list has a single entry. Verify that the NOC field matches noc_update2 and the ICAC field matches icac_update2",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH1 reads its fabric index from the CurrentFabricIndex attribute and saves as fabric_idx",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH0 sends the RemoveFabric command with the fabric index set to fabric_idx",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                }
            ]
        },
        {
            "class_name": "TC_OPCREDS_VidVerify",
            "desc": "[DUTServer] TC-OPCREDS-3.8 test case.",
            "function": "test_TC_OPCREDS_3_8",
            "path": "sdk/TC_OPCREDS_3_8",
            "pics": [
                "OPCREDS.S.C0c.Rsp"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_1",
            "desc": "test_TC_OPSTATE_2_1",
            "function": "test_TC_OPSTATE_2_1",
            "path": "sdk/TC_OPSTATE_2_1",
            "pics": [
                "OPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the PhaseList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentPhase attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperationalStateList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Manually put the device in the Stopped(0x00) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Manually put the device in the Running(0x01) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Manually put the device in the Paused(0x02) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6f"
                },
                {
                    "description": "Manually put the device in the Error(0x03) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6g"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6h"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Manually put the device in the NoError(0x00) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Manually put the device in the UnableToStartOrResume(0x01) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "Manually put the device in the UnableToCompleteOperation(0x02) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "Manually put the device in the CommandInvalidInState(0x03) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7g"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7h"
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_2",
            "desc": "test_TC_OPSTATE_2_2",
            "function": "test_TC_OPSTATE_2_2",
            "path": "sdk/TC_OPSTATE_2_2",
            "pics": [
                "OPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Manually put the DUT into a state wherein it can receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the OperationalStateList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the PhaseList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the CurrentPhase attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Manually put the DUT into a state wherein it cannot receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_3",
            "desc": "test_TC_OPSTATE_2_3",
            "function": "test_TC_OPSTATE_2_3",
            "path": "sdk/TC_OPSTATE_2_3",
            "pics": [
                "OPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Manually put the DUT into a state wherein it can receive a Pause Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the OperationalStateList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Manually put the device in the Stopped(0x00) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Manually put the device in the Error(0x03) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_4",
            "desc": "test_TC_OPSTATE_2_4",
            "function": "test_TC_OPSTATE_2_4",
            "path": "sdk/TC_OPSTATE_2_4",
            "pics": [
                "OPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription to the OperationalError event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "At the DUT take the vendor defined action to generate an OperationalError event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_5",
            "desc": "test_TC_OPSTATE_2_5",
            "function": "test_TC_OPSTATE_2_5",
            "path": "sdk/TC_OPSTATE_2_5",
            "pics": [
                "OPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the DeviceTypeList from the Descriptor Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If any device is in the set that mandates the OperationCompletion event, set istestmandated to True",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If the test is mandated, but the event is not in the PICS, fail the test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the test is not mandated, and the event is not in the PICS, skip all remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set up a subscription to the OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Manually put the DUT into a state wherein it can receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If the CountdownTime is not null, TH reads from the DUT the OperationalState attribute,",
                    "expectation": "otherwise skip all remaining steps",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH waits for initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH waits for OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Restart DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH waits for half of initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH waits for initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH waits for OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                }
            ]
        },
        {
            "class_name": "TC_OPSTATE_2_6",
            "desc": "test_TC_OPSTATE_2_6",
            "function": "test_TC_OPSTATE_2_6",
            "path": "sdk/TC_OPSTATE_2_6",
            "pics": [
                "OPSTATE.S",
                "OPSTATE.S.A0002"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Subscribe to CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Manually put the DUT into a state where it will use the CountdownTime attribute, the initial value of the CountdownTime is greater than 30, and it will begin counting down the CountdownTime attribute. Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Over a period of 30 seconds, TH counts all report transactions with an attribute report for the CountdownTime attribute in numberOfReportsReceived",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Until the current operation finishes, TH counts all report transactions with an attribute report for the CountdownTime attribute in numberOfReportsReceived and saves up to 5 such reports.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Manually put the DUT into a state where it will use the CountdownTime attribute, the initial value of the CountdownTime is greater than 30, and it will begin counting down the CountdownTime attribute.Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Manually put the device in the Paused(0x02) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_OTCCM_1_2",
            "desc": "[TC-OTCCM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_OTCCM_1_2",
            "path": "sdk/TC_OTCCM_1_2",
            "pics": [
                "OTCCM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_OVENOPSTATE_2_1",
            "desc": "test_TC_OVENOPSTATE_2_1",
            "function": "test_TC_OVENOPSTATE_2_1",
            "path": "sdk/TC_OVENOPSTATE_2_1",
            "pics": [
                "OVENOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the PhaseList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentPhase attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperationalStateList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Manually put the device in the Stopped(0x00) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Manually put the device in the Running(0x01) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6d"
                },
                {
                    "description": "Manually put the device in the Paused(0x02) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6e"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6f"
                },
                {
                    "description": "Manually put the device in the Error(0x03) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6g"
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6h"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Manually put the device in the NoError(0x00) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Manually put the device in the UnableToStartOrResume(0x01) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7d"
                },
                {
                    "description": "Manually put the device in the UnableToCompleteOperation(0x02) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7e"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7f"
                },
                {
                    "description": "Manually put the device in the CommandInvalidInState(0x03) error state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7g"
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7h"
                }
            ]
        },
        {
            "class_name": "TC_OVENOPSTATE_2_2",
            "desc": "test_TC_OVENOPSTATE_2_2",
            "function": "test_TC_OVENOPSTATE_2_2",
            "path": "sdk/TC_OVENOPSTATE_2_2",
            "pics": [
                "OVENOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Manually put the DUT into a state wherein it can receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the OperationalStateList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the OperationalError attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the PhaseList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the CurrentPhase attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "Manually put the DUT into a state wherein it cannot receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                }
            ]
        },
        {
            "class_name": "TC_OVENOPSTATE_2_4",
            "desc": "test_TC_OVENOPSTATE_2_4",
            "function": "test_TC_OVENOPSTATE_2_4",
            "path": "sdk/TC_OVENOPSTATE_2_4",
            "pics": [
                "OVENOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription to the OperationalError event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "At the DUT take the vendor defined action to generate an OperationalError event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                }
            ]
        },
        {
            "class_name": "TC_OVENOPSTATE_2_5",
            "desc": "test_TC_OVENOPSTATE_2_5",
            "function": "test_TC_OVENOPSTATE_2_5",
            "path": "sdk/TC_OVENOPSTATE_2_5",
            "pics": [
                "OVENOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads the DeviceTypeList from the Descriptor Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If any device is in the set that mandates the OperationCompletion event, set istestmandated to True",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If the test is mandated, but the event is not in the PICS, fail the test case",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If the test is not mandated, and the event is not in the PICS, skip all remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Set up a subscription to the OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Manually put the DUT into a state wherein it can receive a Start Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "If the CountdownTime is not null, TH reads from the DUT the OperationalState attribute,",
                    "expectation": "otherwise skip all remaining steps",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH waits for initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH waits for OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "Restart DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends Start command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "TH sends Pause command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH waits for half of initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH sends Resume command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH waits for initial-countdown-time",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH sends Stop command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "TH waits for OperationCompletion event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 26
                }
            ]
        },
        {
            "class_name": "TC_OVENOPSTATE_2_6",
            "desc": "test_TC_OVENOPSTATE_2_6",
            "function": "test_TC_OVENOPSTATE_2_6",
            "path": "sdk/TC_OVENOPSTATE_2_6",
            "pics": [
                "OVENOPSTATE.S",
                "OVENOPSTATE.S.A0002"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Subscribe to CountdownTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Manually put the DUT into a state where it will use the CountdownTime attribute, the initial value of the CountdownTime is greater than 30, and it will begin counting down the CountdownTime attribute. Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Over a period of 30 seconds, TH counts all report transactions with an attribute report for the CountdownTime attribute in numberOfReportsReceived",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Until the current operation finishes, TH counts all report transactions with an attribute report for the CountdownTime attribute in numberOfReportsReceived and saves up to 5 such reports.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Manually put the DUT into a state where it will use the CountdownTime attribute, the initial value of the CountdownTime is greater than 30, and it will begin counting down the CountdownTime attribute.Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH reads from the DUT the OperationalState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Test harness reads the CountdownTime attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Manually put the device in the Paused(0x02) operational state",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_PAVSTI_1_1",
            "desc": "[TC-PAVSTI-1.1] Verify transmission when trigger type is Manual.",
            "function": "test_TC_PAVSTI_1_1",
            "path": "sdk/TC_PAVSTI_1_1",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections in the list is 0. If not 0, issue DeAllocatePushAVTransport with `ConnectionID to remove any connections.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH Reads SupportedFormats attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aSupportedFormats.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the AllocatePushTransport command with valid parameters and TriggerType = Command",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID, TransportOptions, and TransportStatus in the TransportConfigurationStruct.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Active.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the ManuallyTriggerTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with SUCCESS status code and begins transmission.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "View the video stream in TH UI",
                    "expectation": "Verify the transmitted video stream is of CMAF Format.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Inactive.",
                    "expectation": "DUT responds with SUCCESS status code",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "View the video stream in TH UI",
                    "expectation": "Verify the transmission of video stream has stopped.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_PAVSTI_1_2",
            "desc": "[TC-PAVSTI-1.2] Verify transmission with trigger type as Continuous and ensure privacy settings are checked if supported.",
            "function": "test_TC_PAVSTI_1_2",
            "path": "sdk/TC_PAVSTI_1_2",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections in the list is 0. If not 0, issue DeAllocatePushAVTransport with `ConnectionID to remove any connections.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH Reads SupportedFormats attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aSupportedFormats.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH writes SoftRecordingPrivacyModeEnabled as True",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH writes SoftLiveStreamPrivacyModeEnabled as True",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the AllocatePushTransport command with valid parameters and TriggerType = Continuous",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID, TransportOptions, and TransportStatus in the TransportConfigurationStruct. Store ConnectionID as aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Active",
                    "expectation": "DUT responds with INVALID_IN_STATE status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH writes SoftRecordingPrivacyModeEnabled as False",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH writes SoftLiveStreamPrivacyModeEnabled as False",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Active.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "View the video stream in TH UI",
                    "expectation": "Verify the transmitted video stream is of CMAF Format.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Inactive.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "View the video stream in TH UI",
                    "expectation": "Verify the transmission of video stream has stopped.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_1",
            "desc": "[TC-PAVST-2.1] Attributes with Server as DUT",
            "function": "test_TC_PAVST_2_1",
            "path": "sdk/TC_PAVST_2_1",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedFormats attribute.",
                    "expectation": "Verify that the DUT response contains a list of SupportedFormatsStruct entries. For each entry in the list, verify that the ContainerFormat is a defined ContainerFormatEnum value and the IngestMethod is a defined IngestMethodEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentConnections attribute.",
                    "expectation": "Verify that the DUT response contains a list of TransportConfigurationStruct entries. For each entry in the list, verify that the TransportStatus is a defined TransportStatusEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_2",
            "desc": " [TC-PAVST-2.2] Verify reading CurrentConnections attribute over transports MRP and TCP with Server as DUT",
            "function": "test_TC_PAVST_2_2",
            "path": "sdk/TC_PAVST_2_2",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections in the list is 0. If not 0, issue DeAllocatePushAVTransport with `ConnectionID to remove any connections.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH Reads SupportedFormats attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Store value as aSupportedFormats.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aAllocatedVideoStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aAllocatedAudioStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the AllocatePushTransport command with valid parameters",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID, TransportOptions, and TransportStatus in the TransportConfigurationStruct.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a MRP-based secure session",
                    "expectation": "Verify the number of PushAV Connections is 1. Verify that the TransportOptions field in the TransportConfiguration struct is absent.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large payload session",
                    "expectation": "Verify the number of PushAV Connections is 1. Verify that the TransportOptions field in the TransportConfiguration struct is present.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_3",
            "desc": "[TC-PAVST-2.3] Allocate PushAV Transport with Server as DUT",
            "function": "test_TC_PAVST_2_3",
            "path": "sdk/TC_PAVST_2_3",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections in the list is 0. If not 0, issue DeAllocatePushAVTransport with `ConnectionID to remove any connections.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH Reads SupportedFormats attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Store value as aSupportedFormats.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aAllocatedVideoStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Verify that list is not empty. Store value as aAllocatedAudioStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the AllocatePushTransport command with valid parameters",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID, TransportOptions, and TransportStatus in the TransportConfigurationStruct. Store ConnectionID as aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session",
                    "expectation": "Verify the number of PushAV Connections is 1. Verify that the TransportStatus field is Inactive.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH Reads Zones attribute from Zones Management Cluster on DUT, if the zone management cluster is present on this endpoint",
                    "expectation": "Store value as aZones.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH Reads MaxZones attribute from Zones Management Cluster on DUT, if the zone management cluster is present on this endpoint",
                    "expectation": "Store value as aMaxZones.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH Reads ProvisionedEndpoints attribute from TLS Client Management Cluster on DUT",
                    "expectation": "Store value as aProvisionedEndpoints.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the AllocatePushTransport command with a TLSEndpointID not in aProvisionedEndpoints in the TransportOptions struct.",
                    "expectation": "DUT responds with Status Code InvalidTLSEndpoint.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the AllocatePushTransport command with a combination of IngestMethod and ContainerFormat not in aSupportedFormats.",
                    "expectation": "DUT responds with Status Code InvalidCombination.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "DUT responds with Status Code InvalidURL.",
                    "expectation": "DUT responds with Status Code InvalidURL.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "TH sends the AllocatePushTransport command with an invalid TriggerType in the TransportTriggerOptions struct field.",
                    "expectation": "DUT responds with Status Code InvalidTriggerType.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "If the zone management cluster is present on this endpoint, TH sends the AllocatePushTransport command with an invalid ZoneID that is not present in aZones.",
                    "expectation": "DUT responds with Status Code InvalidZone.",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "TH sends the AllocatePushTransport command with a VideoStreamID not present in aAllocatedVideoStreams.",
                    "expectation": "DUT responds with Status Code InvalidStream.",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "TH sends the AllocatePushTransport command with a AudioStreamID not present in aAllocatedAudioStreams.",
                    "expectation": "DUT responds with Status Code InvalidStream.",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "TH sends the AllocatePushTransport command with both VideoStreamID and AudioStreamID absent.",
                    "expectation": "DUT responds with Status Code InvalidArgument.",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "TH sends the AllocatePushTransport command with both VideoStreamID and AudioStreamID set to None..",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "If the zone management cluster is present on this endpoint, TH sends the AllocatePushTransport command with the TriggerType = Motion and size of the MotionZones list to be greater than aMaxZones.",
                    "expectation": "DUT responds with ConstraintError.",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "TH sends the AllocatePushTransport command with the TriggerType = Motion and valid value for MotionSensitivity if DUT supports PerZoneSensitivity.",
                    "expectation": "DUT responds with InvalidCommand.",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "TH sends the AllocatePushTransport command with the TriggerType = Motion and MotionSensitivity > 10 if DUT does not support PerZoneSensitivity.",
                    "expectation": "DUT responds with ConstraintError.",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "TH sends the AllocatePushTransport command with the TriggerType = Motion and MotionTimeControl omitted.",
                    "expectation": "DUT responds with InvalidCommand.",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "TH sends the AllocatePushTransport command with the TriggerType = Motion and MotionTimeControl struct with InitialDuration = 0.",
                    "expectation": "DUT responds with ConstraintError.",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "TH sends the AllocatePushTransport command with the TriggerType = Motion and MotionTimeControl struct with MaxDuration = 0.",
                    "expectation": "DUT responds with ConstraintError.",
                    "is_commissioning": false,
                    "test_plan_number": 24
                },
                {
                    "description": "TH deallocates transport allocated in step 5 using DeallocatePushTransport command successfully. TH sends the AllocatePushTransport command with all valid parameters. The TriggerType = Motion and MotionZones and MotionSensitivity fields are present and None.",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 25
                },
                {
                    "description": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID.",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 26
                },
                {
                    "description": "TH sends the AllocatePushTransport command with an invalid value for StreamUsage in the TransportOptions struct.",
                    "expectation": "DUT responds with InvalidCommand.",
                    "is_commissioning": false,
                    "test_plan_number": 27
                },
                {
                    "description": "TH sends the AllocatePushTransport command with ContainerType = CMAF and CMAFContainerOptions omitted.",
                    "expectation": "DUT responds with InvalidCommand.",
                    "is_commissioning": false,
                    "test_plan_number": 28
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_4",
            "desc": "[TC-PAVST-2.4] Modify PushAV Transport with Server as DUT",
            "function": "test_TC_PAVST_2_4",
            "path": "sdk/TC_PAVST_2_4",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session.",
                    "expectation": "Verify the number of PushAV Connections in the list is 1. Store the TransportOptions and ConnectionID in the corresponding TransportConfiguration as aTransportOptions and aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends the ModifyPushTransport command with ConnectionID != aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 sends the ModifyPushTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the ModifyPushTransport command with ConnectionID = aConnectionID and aTransportOptions, with ExpiryTime incremented by 120 in aTransportOptions",
                    "expectation": "DUT responds with SUCCESS  status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session.",
                    "expectation": "Verify that ConnectionID == aConnectionID and ExpiryTime in TransportConfiguration.TransportOptions is incremented by 120.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_5",
            "desc": "[TC-PAVST-2.5] Deallocate PushAV Transport with Server as DUT",
            "function": "test_TC_PAVST_2_5",
            "path": "sdk/TC_PAVST_2_5",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session",
                    "expectation": "Verify the number of PushAV Connections in the list is 1. Store the TransportStatus and ConnectionID in the corresponding TransportConfiguration as aTransportStatus and aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends the DeallocatePushTransport command with ConnectionID != aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 sends the DeallocatePushTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the DeallocatePushTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT.",
                    "expectation": "Verify the number of PushAV Connections is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_6",
            "desc": "[TC-PAVST-2.6] Validate SetTransportStatus command with Server as DUT",
            "function": "test_TC_PAVST_2_6",
            "path": "sdk/TC_PAVST_2_6",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session",
                    "expectation": "Verify the number of PushAV Connections in the list is 1. Store the TransportStatus and ConnectionID in the corresponding TransportConfiguration as aTransportStatus and aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends the SetTransportStatus  command with ConnectionID != aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 sends the SetTransportStatus  command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the SetTransportStatus  command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT.",
                    "expectation": "Verify that the TransportStatus is set to !aTransportStatus in the TransportConfiguration corresponding to aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_7",
            "desc": "test_TC_PAVST_2_7",
            "function": "test_TC_PAVST_2_7",
            "path": "sdk/TC_PAVST_2_7",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport with TriggerType = Continuous.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session",
                    "expectation": "Verify the number of PushAV Connections in the list is 1. Store the TransportStatus and ConnectionID in the corresponding TransportConfiguration as aTransportStatus and aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends the ManuallyTriggerTransport command with ConnectionID != aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 sends the ManuallyTriggerTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Inactive.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 sends the ManuallyTriggerTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with InvalidTransportStatus.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH1 sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Active.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH1 sends the ManuallyTriggerTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with InvalidTriggerType.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH1 sends the DeallocatePushTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport with TriggerType = Command.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH1 sends the SetTransportStatus command with ConnectionID = aConnectionID and TransportStatus = Active.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH1 sends the ManuallyTriggerTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_8",
            "desc": "[TC-PAVST-2.8] Validate FindTransport command with Server as DUT",
            "function": "test_TC_PAVST_2_8",
            "path": "sdk/TC_PAVST_2_8",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH1 executes step 1-5 of TC-PAVST-2.3 to allocate a PushAV transport.",
                    "expectation": "Verify successful completion of all steps.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH1 Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session.",
                    "expectation": "Verify the number of PushAV Connections in the list is 1. Store the TransportStatus and ConnectionID in the corresponding TransportConfiguration as aTransportStatus and aConnectionID. Store TriggerType as aTriggerType.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH1 sends the FindTransport command with ConnectionID != aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH2 sends the FindTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with NOT_FOUND status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH1 sends the FindTransport command with ConnectionID = aConnectionID.",
                    "expectation": "DUT responds with FindTransportResponse with the TransportConfiguration corresponding to aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH1 sends the FindTransport command with ConnectionID = Null.",
                    "expectation": "DUT responds with FindTransportResponse with the TransportConfiguration corresponding to aConnectionID.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_PAVST_2_9",
            "desc": "[TC-PAVST-2.9] Validate Transport allocation with an ExpiryTime with Server as DUT",
            "function": "test_TC_PAVST_2_9",
            "path": "sdk/TC_PAVST_2_9",
            "pics": [
                "PAVST.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections in the list is 0. If not 0, issue DeAllocatePushAVTransport with `ConnectionID to remove any connections.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH Reads SupportedIngestMethods attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Store value as aSupportedIngestMethods.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH Reads SupportedFormats attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Store value as aSupportedFormats.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH Reads AllocatedVideoStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Store value as aAllocatedVideoStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH Reads AllocatedAudioStreams attribute from CameraAVStreamManagement Cluster on DUT",
                    "expectation": "Store value as aAllocatedAudioStreams.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the AllocatePushTransport command with valid parameters and ExpiryTime set to 5 seconds.",
                    "expectation": "DUT responds with AllocatePushTransportResponse containing the allocated ConnectionID, TransportOptions, and TransportStatus in the TransportConfigurationStruct.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT over a large-payload session",
                    "expectation": "Verify the number of PushAV Connections is 1. Verify that the TransportStatus field is Inactive.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "After > 5 seconds, TH Reads CurrentConnections attribute from PushAV Stream Transport Cluster on DUT",
                    "expectation": "Verify the number of PushAV Connections is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_PS_2_3",
            "desc": "test_TC_PS_2_3",
            "function": "test_TC_PS_2_3",
            "path": "sdk/TC_PS_2_3",
            "pics": [
                "PWRTL.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Subscribe to all attributes of the PowerSource Cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Accumulate all attribute reports on the endpoint under test for 30 seconds",
                    "expectation": "For each of the attributes in the set of BatTimeToFullCharge, BatPercentRemaining and BatTimeRemaining, verify that there are not more than 4 reports per attribute where the value is non-null over the period of accumulation.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_PWRTL_2_1",
            "desc": "test_TC_PWRTL_2_1",
            "function": "test_TC_PWRTL_2_1",
            "path": "sdk/TC_PWRTL_2_1",
            "pics": [
                "PWRTL.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_REFALM_2_2",
            "desc": "223.2.2. [TC-REFALM-2.2] Primary functionality with DUT as Server",
            "function": "test_TC_REFALM_2_2",
            "path": "sdk/TC_REFALM_2_2",
            "pics": [
                "REFALM.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Ensure that the door on the DUT is closed",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the State attribute",
                    "expectation": "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Manually open the door on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Wait for the time defined in PIXIT.REFALM.AlarmThreshold",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads from the DUT the State attribute",
                    "expectation": "Verify that the DUT response contains a 32-bit value with bit 0 set to 1",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Ensure that the door on the DUT is closed",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads from the DUT the State attribute",
                    "expectation": "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends Reset command to the DUT",
                    "expectation": "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends ModifyEnabledAlarms command to the DUT",
                    "expectation": "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Set up subscription to the Notify event",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Repeat steps 4 and then 5",
                    "expectation": "After step 5 (repeated), receive a Notify event with the State attribute bit 0 set to 1.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Repeat step 7",
                    "expectation": "Receive a Notify event with the State attribute bit 0 set to 0.",
                    "is_commissioning": false,
                    "test_plan_number": 13
                }
            ]
        },
        {
            "class_name": "TC_RR_1_1",
            "desc": "test_TC_RR_1_1",
            "function": "test_TC_RR_1_1",
            "path": "sdk/TC_RR_1_1",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCCLEANM_1_2",
            "desc": "test_TC_RVCCLEANM_1_2",
            "function": "test_TC_RVCCLEANM_1_2",
            "path": "sdk/TC_RVCCLEANM_1_2",
            "pics": [
                "RVCCLEANM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCCLEANM_2_1",
            "desc": "test_TC_RVCCLEANM_2_1",
            "function": "test_TC_RVCCLEANM_2_1",
            "path": "sdk/TC_RVCCLEANM_2_1",
            "pics": [
                "RVCCLEANM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCCLEANM_2_2",
            "desc": "test_TC_RVCCLEANM_2_2",
            "function": "test_TC_RVCCLEANM_2_2",
            "path": "sdk/TC_RVCCLEANM_2_2",
            "pics": [
                "RVCCLEANM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCOPSTATE_2_1",
            "desc": "test_TC_RVCOPSTATE_2_1",
            "function": "test_TC_RVCOPSTATE_2_1",
            "path": "sdk/TC_RVCOPSTATE_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCOPSTATE_2_3",
            "desc": "test_TC_RVCOPSTATE_2_3",
            "function": "test_TC_RVCOPSTATE_2_3",
            "path": "sdk/TC_RVCOPSTATE_2_3",
            "pics": [
                "RVCOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCOPSTATE_2_4",
            "desc": "test_TC_RVCOPSTATE_2_4",
            "function": "test_TC_RVCOPSTATE_2_4",
            "path": "sdk/TC_RVCOPSTATE_2_4",
            "pics": [
                "RVCOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCOPSTATE_2_5",
            "desc": "[TC-RVCOPSTATE-2.5] Attributes with DUT as Server",
            "function": "test_TC_RVCOPSTATE_2_5",
            "path": "sdk/TC_RVCOPSTATE_2_5",
            "pics": [
                "RVCOPSTATE.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Manually put the device in a RVC Run Mode cluster mode with the Idle mode tag and in a device state that allows changing to {PIXIT_RUNMODE_CLEANMODE}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads the SupportedModes attribute of the RVC Run Mode cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH establishes a subscription to the CurrentMode attribute of the RVC Run Mode cluster of the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends a RVC Run Mode cluster ChangeToMode command to the DUT with NewMode set to PIXIT.CLEANMODE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "Wait for DUT to leave dock and begin cleaning activities",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads CurrentMode attribute of the RVC Run Mode cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends GoHome command to the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "Manually confirm DUT has returned to the dock and completed docking-related activities",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads CurrentMode attribute of the RVC Run Mode cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                }
            ]
        },
        {
            "class_name": "TC_RVCRUNM_1_2",
            "desc": "test_TC_RVCRUNM_1_2",
            "function": "test_TC_RVCRUNM_1_2",
            "path": "sdk/TC_RVCRUNM_1_2",
            "pics": [
                "RVCRUNM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCRUNM_2_1",
            "desc": "test_TC_RVCRUNM_2_1",
            "function": "test_TC_RVCRUNM_2_1",
            "path": "sdk/TC_RVCRUNM_2_1",
            "pics": [
                "RVCRUNM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_RVCRUNM_2_2",
            "desc": "test_TC_RVCRUNM_2_2",
            "function": "test_TC_RVCRUNM_2_2",
            "path": "sdk/TC_RVCRUNM_2_2",
            "pics": [
                "RVCRUNM.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SC_3_4",
            "desc": "[TC-SC-3.4] CASE Error Handling [DUT_Responder] ",
            "function": "test_TC_SC_3_4",
            "path": "sdk/TC_SC_3_4",
            "pics": [],
            "steps": [
                {
                    "description": "DUT is commissioned and TH has an open CASE Session with DUT",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH constructs and sends a Sigma1 message with a resumptionID and NO initiatorResumeMIC to DUT",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH constructs and sends a Sigma1 message with an initiatorResumeMIC and NO resumptionID to DUT",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH constructs and sends a Sigma1 message with a resumptionID and an invalid initiatorResumeMIC",
                    "expectation": "DUT falls back to establishing CASE without resumption . DUT sends a status report to the TH with a Success general code, Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code as SESSION_ESTABLISHMENT_SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH constructs and sends a Sigma1 message with message with an invalid destinationId to DUT",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of NO_SHARED_TRUST_ROOTS (0X0001). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with improperly generated encrypted integrity data (TBEData3Encrypted)",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with invalid initiatorNOC data",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with invalid initiatorICAC data",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with invalid signature data",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with invalid initiatorEphPubKey data",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends a valid Sigma1 message to DUT. In reply to the received Sigma2,TH Sends back a Sigma3 message with invalid responderEphPubKey data",
                    "expectation": "DUT sends a status report to the TH with a FAILURE general code , Protocol ID of SECURE_CHANNEL (0x0000), and Protocol Code of INVALID_PARAMETER (0X0002). DUT MUST perform no further processing after sending the status report.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_SC_3_5",
            "desc": "[TC-SC-3.5] CASE Error Handling [DUT_Initiator] ",
            "function": "test_TC_SC_3_5",
            "path": "sdk/TC_SC_3_5",
            "pics": [
                "MCORE.ROLE.COMMISSIONER"
            ],
            "steps": [
                {
                    "description": "TH_SERVER has been commissioned to TH_CLIENT",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "TH Client sends an OpenCommissioningWindow command to TH_SERVER to allow it to be commissioned by DUT_Initiator and trigger CASE Handshake",
                    "expectation": "Verify that the TH_SERVER returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH Client sends FailAtFault command to FaultInjection cluster on TH_SERVER to include a corrupt TBEData2Encrypted in the Sigma2 it will send during CASE Handshake",
                    "expectation": "Verify that the TH_SERVER receives the message",
                    "is_commissioning": false,
                    "test_plan_number": "1b"
                },
                {
                    "description": "TH prompts the user to Commission DUT_Initiator to TH_SERVER",
                    "expectation": "Verify that the DUT sends a status report to TH_SERVER with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002).",
                    "is_commissioning": false,
                    "test_plan_number": "1c"
                },
                {
                    "description": "TH Client revokes the Commissioning Window and resends an OpenCommissioningWindow command to TH_SERVER to allow commissioning by DUT_Initiator again and re-trigger the CASE handshake.",
                    "expectation": "Verify that the TH_SERVER returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH Client sends FailAtFault command to FaultInjection cluster on TH_SERVER to include a corrupt responderNOC in the Sigma2 it will send during CASE Handshake",
                    "expectation": "Verify that the TH_SERVER receives the message",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "TH prompts the user to Commission DUT_Initiator to TH_SERVER again",
                    "expectation": "Verify that the DUT sends a status report to TH_SERVER with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002).",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "TH Client revokes the Commissioning Window and resends an OpenCommissioningWindow command to TH_SERVER to allow commissioning by DUT_Initiator again and re-trigger the CASE handshake.",
                    "expectation": "Verify that the TH_SERVER returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH Client sends FailAtFault command to FaultInjection cluster on TH_SERVER to include a corrupt responderICAC in the Sigma2 it will send during CASE Handshake",
                    "expectation": "Verify that the TH_SERVER receives the message",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "TH prompts the user to Commission DUT_Initiator to TH_SERVER again",
                    "expectation": "Verify that the DUT sends a status report to TH_SERVER with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002).",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "TH Client revokes the Commissioning Window and resends an OpenCommissioningWindow command to TH_SERVER to allow commissioning by DUT_Initiator again and re-trigger the CASE handshake.",
                    "expectation": "Verify that the TH_SERVER returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "TH Client sends FailAtFault command to FaultInjection cluster on TH_SERVER to include a corrupt Signature in the Sigma2 it will send during CASE Handshake",
                    "expectation": "Verify that the TH_SERVER receives the message",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "TH prompts the user to Commission DUT_Initiator to TH_SERVER again",
                    "expectation": "Verify that the DUT sends a status report to TH_SERVER with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002).",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                }
            ]
        },
        {
            "class_name": "TC_SC_3_6",
            "desc": "test_TC_SC_3_6",
            "function": "test_TC_SC_3_6",
            "path": "sdk/TC_SC_3_6",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SC_4_3",
            "desc": "test_TC_SC_4_3",
            "function": "test_TC_SC_4_3",
            "path": "sdk/TC_SC_4_3",
            "pics": [],
            "steps": [
                {
                    "description": "DUT is commissioned on the same fabric as TH.",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads ServerList attribute from the Descriptor cluster on EP0. ",
                    "expectation": "If the ICD Management cluster ID (70,0x46) is present in the list, set supports_icd to true, otherwise set supports_icd to false.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If supports_icd is true, TH reads ActiveModeThreshold from the ICD Management cluster on EP0 and saves as active_mode_threshold.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "If supports_icd is true, TH reads FeatureMap from the ICD Management cluster on EP0. If the LITS feature is set, set supports_lit to true. Otherwise set supports_lit to false.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH constructs the instance name for the DUT as the 64-bit compressed Fabric identifier, and the assigned 64-bit Node identifier, each expressed as a fixed-length sixteen-character hexadecimal string, encoded as ASCII (UTF-8) text using capital letters, separated by a hyphen.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH performs a query for the SRV record against the qname instance_qname.",
                    "expectation": "Verify SRV record is returned",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH performs a query for the TXT record against the qname instance_qname.",
                    "expectation": "Verify TXT record is returned if the device supports ICD or TCP. The TXT record MAY be returned if these are not supported, but it is not required.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH performs a query for the AAAA record against the target listed in the SRV record",
                    "expectation": "Verify AAAA record is returned",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH verifies the following from the returned records:",
                    "expectation": "TH verifies the following from the returned records: The hostname must be a fixed-length twelve-character (or sixteen-character) hexadecimal string, encoded as ASCII (UTF-8) text using capital letters.. ICD TXT key: \u2022 If supports_lit is false, verify that the ICD key is NOT present in the TXT record \u2022 If supports_lit is true, verify the ICD key IS present in the TXT record, and it has the value of 0 or 1 (ASCII) SII TXT key: \u2022 If supports_icd is true and supports_lit is false, set sit_mode to true \u2022 If supports_icd is true and supports_lit is true, set sit_mode to true if ICD=0 otherwise set sit_mode to false \u2022 If supports_icd is false, set sit_mode to false \u2022 If sit_mode is true, verify that the SII key IS present in the TXT record \u2022 if the SII key is present, verify it is a decimal value with no leading zeros and is less than or equal to 3600000 (1h in ms) SAI TXT key: \u2022 if supports_icd is true, verify that the SAI key is present in the TXT record \u2022 If the SAI key is present, verify it is a decimal value with no leading zeros and is less than or equal to 3600000 (1h in ms)",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH performs a DNS-SD browse for _I<hhhh>._sub._matter._tcp.local, where <hhhh> is the 64-bit compressed Fabric identifier, expressed as a fixed-length, sixteencharacter hexadecimal string, encoded as ASCII (UTF-8) text using capital letters.",
                    "expectation": "Verify DUT returns a PTR record with DNS-SD instance name set to instance_name",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH performs a DNS-SD browse for _matter._tcp.local",
                    "expectation": "Verify DUT returns a PTR record with DNS-SD instance name set to instance_name",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_SC_7_1",
            "desc": "test_TC_SC_7_1",
            "function": "test_TC_SC_7_1",
            "path": "sdk/TC_SC_7_1",
            "pics": [
                "MCORE.DD.MANUAL_PC"
            ],
            "steps": [
                {
                    "description": "TH establishes a PASE session to DUT1 using the provided setup code and reads the TrustedRootCertificates attribute from the operational credentials cluster over PASE",
                    "expectation": "List should be empty as the DUT should be in factory reset ",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH establishes a PASE session to DUT2 using the provided setup code and reads the TrustedRootCertificates attribute from the operational credentials cluster over PASE",
                    "expectation": "List should be empty as the DUT should be in factory reset ",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH compares the discriminators from the provided setup codes",
                    "expectation": "Discriminators do not match",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_SEAR_1_2",
            "desc": "test_TC_SEAR_1_2",
            "function": "test_TC_SEAR_1_2",
            "path": "sdk/TC_SEAR_1_2",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SEAR_1_3",
            "desc": "test_TC_SEAR_1_3",
            "function": "test_TC_SEAR_1_3",
            "path": "sdk/TC_SEAR_1_3",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SEAR_1_4",
            "desc": "test_TC_SEAR_1_4",
            "function": "test_TC_SEAR_1_4",
            "path": "sdk/TC_SEAR_1_4",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SEAR_1_5",
            "desc": "test_TC_SEAR_1_5",
            "function": "test_TC_SEAR_1_5",
            "path": "sdk/TC_SEAR_1_5",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SEAR_1_6",
            "desc": "test_TC_SEAR_1_6",
            "function": "test_TC_SEAR_1_6",
            "path": "sdk/TC_SEAR_1_6",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_SEPR_2_1",
            "desc": "This test case verifies the non-global attributes of the Commodity Price cluster server",
            "function": "test_TC_SEPR_2_1",
            "path": "sdk/TC_SEPR_2_1",
            "pics": [
                "SEPR.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the TariffUnit attribute.",
                    "expectation": "Verify that the DUT response contains a TariffUnitEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the Currency attribute.",
                    "expectation": "Verify that the DUT response contains either null or a CurrencyStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the CurrentPrice attribute.",
                    "expectation": "Verify that the DUT response contains either null or a CommodityPriceStruct value.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the PriceForecast attribute.",
                    "expectation": "Verify that the DUT response contains a list of CommodityPriceStruct entries",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                }
            ]
        },
        {
            "class_name": "TC_SEPR_2_2",
            "desc": "This test case verifies the primary functionality of the Commodity Price cluster server",
            "function": "test_TC_SEPR_2_2",
            "path": "sdk/TC_SEPR_2_2",
            "pics": [
                "SEPR.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to all CommodityPrice cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends command GetDetailedPriceRequest with Details=CommodityPriceDetailBitmap.Description set to True, and Components set to False.",
                    "expectation": "Verify that the DUT response contains GetDetailedPriceResponse with CurrentPrice is a CommodityPriceStruct or is null. If not null:\n                        - verify that the PeriodStart is in the past.\n                        - verify that the PeriodEnd is in the future or is null.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description is a string with max length of 32.\n                        - verify that the Components list is not included.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends command GetDetailedPriceRequest with Details=CommodityPriceDetailBitmap.Description set to False and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedPriceResponse with CurrentPrice is a CommodityPriceStruct or is null. If not null:\n                        - verify that the PeriodStart is in the past.\n                        - verify that the PeriodEnd is in the future or is null.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description field is not included.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                             Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SEPR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.SEPR.TESTEVENTTRIGGER for Price Update Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and event SEPR.S.E0000(PriceChange) sent.\n                        Store the event's CurrentPrice field as NewCurrentPrice.\n                        Verify that CurrentPrice is a CommodityPriceStruct or is null.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads CurrentPrice attribute.",
                    "expectation": "Verify that the DUT response contains a CommodityPriceStruct value. Verify that the value matches the NewCurrentPrice from step 6.",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends command GetDetailedPriceRequest with Details=CommodityPriceDetailBitmap.Description set to True, and Components set to False.",
                    "expectation": "Verify that the DUT response contains GetDetailedPriceResponse with CurrentPrice is a CommodityPriceStruct or is null. If not null:\n                        - verify that the PeriodStart is in the past.\n                        - verify that the PeriodEnd is in the future or is null.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description is a string with max length of 32.\n                        - verify that the Components list is not included.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command GetDetailedPriceRequest with Details=CommodityPriceDetailBitmap.Description set to False and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedPriceResponse with CurrentPrice is a CommodityPriceStruct or is null. If not null:\n                        - verify that the PeriodStart is in the past.\n                        - verify that the PeriodEnd is in the future or is null.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description field is not included.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                             Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command GetDetailedPriceRequest with Details=CommodityPriceDetailBitmap.Description set to True and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedPriceResponse with CurrentPrice is a CommodityPriceStruct or is null. If not null:\n                        - verify that the PeriodStart is in the past.\n                        - verify that the PeriodEnd is in the future or is null.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description is a string with max length of 32.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                             Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                }
            ]
        },
        {
            "class_name": "TC_SEPR_2_3",
            "desc": "This test case verifies the functionality of the Commodity Price cluster server server with the Forecast feature.",
            "function": "test_TC_SEPR_2_3",
            "path": "sdk/TC_SEPR_2_3",
            "pics": [
                "SEPR.S",
                "SEPR.F00",
                "MCORE.SC.TCP"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Create CASE session connection via TCP if the DUT claims to support TCP",
                    "expectation": "TCP connection established OK",
                    "is_commissioning": false,
                    "test_plan_number": "1a"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "expectation": "Value has to be 1 (True)",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends command GetDetailedForecastRequest with Details=CommodityPriceDetailBitmap.Description set to True, and Components set to False.",
                    "expectation": "Verify that the DUT response contains GetDetailedForecastResponse with a list of CommodityPriceStruct entries (it may be empty) and shall have not more than 56 entries.\n                        For each entry in the list:\n                        - except for the first list entry, verify that the PeriodStart is greater than the PeriodEnd of the previous list entry.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description which is a string with max length of 32.\n                        - verify that the Components list is not included.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends command GetDetailedForecastRequest with Details=CommodityPriceDetailBitmap.Description set to False and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedForecastResponse with a list of CommodityPriceStruct entries (it may be empty) and shall have not more than 56 entries.\n                        For each entry in the list:\n                        - except for the first list entry, verify that the PeriodStart is greater than the PeriodEnd of the list entry.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description field is not included.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                            Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SEPR.TESTEVENT_TRIGGERKEY and EventTrigger field set to PIXIT.SEPR.TESTEVENTTRIGGER for Forecast Update Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads PriceForecast attribute.",
                    "expectation": "Verify that the DUT response contains a list of  CommodityPriceStruct (or empty).",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "TH sends command GetDetailedForecastRequest with Details=CommodityPriceDetailBitmap.Description set to True, and Components set to False.",
                    "expectation": "Verify that the DUT response contains GetDetailedForecastResponse with a list of CommodityPriceStruct entries (it may be empty) and shall have not more than 56 entries.\n                        For each entry in the list:\n                        - except for the first list entry, verify that the PeriodStart is greater than the PeriodEnd of the previous list entry.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description which is a string with max length of 32.\n                        - verify that the Components list is not included.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command GetDetailedForecastRequest with Details=CommodityPriceDetailBitmap.Description set to False and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedForecastResponse with a list of CommodityPriceStruct entries (it may be empty) and shall have not more than 56 entries.\n                        For each entry in the list:\n                        - except for the first list entry, verify that the PeriodStart is greater than the PeriodEnd of the list entry.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description field is not included.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                            Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends command GetDetailedForecastRequest with Details=CommodityPriceDetailBitmap.Description set to True and Components set to True.",
                    "expectation": "Verify that the DUT response contains GetDetailedForecastResponse with a list of CommodityPriceStruct entries (it may be empty) and shall have not more than 56 entries.\n                        For each entry in the list:\n                        - except for the first list entry, verify that the PeriodStart is greater than the PeriodEnd of the list entry.\n                        - verify that the Price is null or Money type.\n                        - verify that the PriceLevel is null or a valid signed integer.\n                        - verify that either or both of Price, PriceLevel are not null.\n                        - verify that the Description which is a string with max length of 32.\n                        - verify that the Components field is included. It may be an empty list but shall have no more than 10 entries.\n                            Each entry shall have a valid value of Price (Money), Source (a valid TariffPriceTypeEnum), it may include an optional Description (a string of max length 32) and may include an optional TariffComponentID (unsigned integer value).",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                }
            ]
        },
        {
            "class_name": "TC_SETRF_2_1",
            "desc": "Attributes with server as DUT",
            "function": "test_TC_SETRF_2_1",
            "path": "sdk/TC_SETRF_2_1",
            "pics": [
                "SETRF.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "DUT is commissioned.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads from the DUT the TariffInfo attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of TariffInformationStruct type;\n                        - Verify that TariffLabel field has type string with max length 128 or null;\n                        - Verify that ProviderName field has type string with max length 128 or null;\n                        - Verify that BlockMode field has type BlockModeEnum. Value has to be between a range of 0 - 2 or null;\n                            - Store the value as BlockModeValue;\n                        - Currency field:\n                            - Verify that it does NOT contain Currency field if SETRF.S.F00(PRICE) is False;\n                            - Verify that it contains Currency field if SETRF.S.F00(PRICE) is True;\n                                - Verify that it has type currency or null;\n                                    - Verify that Currency field of Currency struct has type uint16 with value less or equal 999;\n                                    - Verify that DecimalPoints field of Currency struct has type uint8;\n                        - Store the value as tariffInfoValue.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the TariffUnit attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of TariffUnitEnum type;\n                     - Value has to be between a range of 0 - 1.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the StartDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of epoch-s type;\n                     - Store the value as startDateAttributeValue.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the IndividualDays attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayStruct entries with list length less or equal 50;\n                     - For each entry:\n                        - Date field:\n                            - Verify that Date field has epoch-s type;\n                            - Verify that the DayStruct in this list are arranged in increasing order by the value of Date field;\n                        - Verify that DayType field has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs of DayStruct field is a list of unique uint32 with list length in range 1 - 96;\n                        - If DayType equals 3 (Event), store DayEntryIDs value in dayEntryIDsEvents list.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the DayEntries attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayEntryStruct entries with list length less or equal 672;\n                     - For each entry:\n                        - Verify that DayEntryID has a unique uint32 value;\n                        - Verify that StartTime field has uint16 type with value less or equal 1499;\n                            - Store the field value as startTimeFieldValue;\n                        - If DayEntryID is a value from dayEntryIDsEvents list, check that Duration field has a uint16 value less or equal 1500 - startTimeFieldValue;\n                        - RandomizationType field:\n                            - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                            - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                            - Store the field value randomizationTypeValue;\n                        - RandomizationOffset field:\n                            - Verify that entry does NOT contain RandomizationOffset fields if SETRF.S.F05(RNDM) is False;\n                            - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has an int16 value;\n                            - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                            - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the DayPatterns attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayPatternStruct entries with list length less or equal 28;\n                     - For each entry:\n                        - Verify that DayPatternID field has uint32 type;\n                        - Verify that DaysOfWeek field has DayPatternDayOfWeekBitmap type;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the CalendarPeriods attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of CalendarPeriodStruct entries with list length in range 1 - 4;\n                     - For each entry:\n                        - StartDate field:\n                            - Verify that StartDate field is null or has type epoch-s with value greater or equal startDateAttributeValue;\n                            - Verify that the calendar period items in this list are arranged in increasing order by the value of StartDate field;\n                            - Verify that if the startDateAttributeValue is null then the StartDate field is null on the first CalendarPeriodStruct item and is not null on any subsequent CalendarPeriodStruct items;\n                        - Verify that DayPatternIDs field is a list of uint32 with list length in range 1 - 7",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayStruct type;\n                        - Verify that Date field of DayStruct has epoch-s type;\n                        - Verify that DayType field of DayStruct has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads NextDay attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayStruct type;\n                        - Verify that DayType field of DayStruct has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntry attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - Verify that the DUT response contains a null if tariffInfoValue equals null;\n                     - Verify that DayEntryID field has uint32 type;\n                     - Verify that StartTime field has uint16 type with value less or equal 1499;\n                        - Store the field value as startTimeFieldValue;\n                     - RandomizationType field:\n                        - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                        - Store the field value randomizationTypeValue;\n                     - RandomizationOffset field:\n                        - Verify that entry does NOT contain RandomizationOffset fields if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has an int16 value;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of epoch-s type;\n                     - Store the value as currentDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntry attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - Verify that DayEntryID field has uint32 type;\n                     - Verify that StartTime field has uint16 type with value less or equal 1499;\n                        - Store the field value as startTimeFieldValue;\n                     - RandomizationType field:\n                        - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                        - Store the field value randomizationTypeValue;\n                     - RandomizationOffset field: \n                        - Verify that entry does NOT contain RandomizationOffset fields if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has an int16 value;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or an epoch-s value greater than currentDayEntryDateValue;",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the TariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a list of TariffComponentStruct entries with list length in range 1-672;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                        - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                                - Verify that PowerThreshold field has power-mW type;\n                                - Verify that ApparentPowerThreshold field has power-mVA type;\n                                - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the TariffPeriods attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a list of TariffPeriodStruct entries with list length in range 1-672;\n                     - For each entry:\n                        - Verify that Label field is null or has type string with max length 128;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 20;\n                        - Verify that TariffComponentIDs field is a list of uint32 with list length in range 1 - 20;\n                            - Verify that if Predicted is not True TariffComponentID is a unique identifier for the combination of values of the Price, Threshold, FriendlyCredit, AuxiliaryLoad, and PeakPeriod fields with the value of the DayEntryIDs field on the encompassing TariffPeriodStruct.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the CurrentTariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                            - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                                - Verify that PowerThreshold field has power-mW type;\n                                - Verify that ApparentPowerThreshold field has power-mVA type;\n                                - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the NextTariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                        - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                                - Verify that PowerThreshold field has power-mW type;\n                                - Verify that ApparentPowerThreshold field has power-mVA type;\n                                - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationType attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryRandomizationTypeEnum. Value has to be between a range of 0 - 4;\n                     - Store the value as defaultRandomizationTypeValue.",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationOffset attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If defaultRandomizationTypeValue is null, Verify that the DUT response contains a null;\n                     - Verify that the DUT response contains a null if tariffInfoValue equals null;\n                     - If defaultRandomizationTypeValue is 0x01 (Fixed), Verify that the DUT response contains an int16 value;\n                     - If defaultRandomizationTypeValue is 0x04 (RandomNegative), Verify that the DUT response contains an int16 value less or equal 0;\n                     - If defaultRandomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive), Verify that the DUT response contains an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                }
            ]
        },
        {
            "class_name": "TC_SETRF_2_2",
            "desc": "Commands with Server as DUT",
            "function": "test_TC_SETRF_2_2",
            "path": "sdk/TC_SETRF_2_2",
            "pics": [
                "SETRF.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "DUT is commissioned.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "Value has to be 1 (True).",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Attributes Value Set Test Event",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the TariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a list of TariffComponentStruct entries with list length in range 1-672;\n                        - Store the values of TariffComponentID field of TariffComponentStruct for all entries as tariffComponentIDs;\n                        - Store the value of TariffComponentID field of the TariffComponentStruct of the first entry as tariffComponentID1;\n                        - Store the TariffComponentStruct of the first entry as tariffComponentStruct1.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the TariffPeriods attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a list of TariffPeriodStruct entries with list length in range 1-672;\n                        - Find TariffPeriodStruct entries that contain tariffComponentID1 value in TariffComponentIDs field;\n                            - Store DayEntryIDs field values of the found TariffPeriodStruct entries from min to max as dayEntryIDs1 list.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends command GetTariffComponent command with TariffComponentID set to tariffComponentID1.",
                    "expectation": "\n                     - Verify that the DUT response contains a GetTariffComponentResponse command;\n                        - Verify that Label field is a string with max length 128 or null;\n                        - Verify that DayEntryIDs field is a list of unique uint32 entries with list length in range 1 - 96;\n                        - Verify that DayEntryIDs field equals dayEntryIDs1;\n                        - Verify that TariffComponent field is a TariffComponentStruct equal to tariffComponentStruct1.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends command GetTariffComponent command with TariffComponentID set to an uint32 value not equal any from tariffComponentIDs.",
                    "expectation": "Verify that the DUT response contains status NOT_FOUND(0x8b).",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the DayEntries attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a list of DayEntryStruct entries with list length less or equal 672;\n                        - Store the values of DayEntryID field of DayEntryStruct for all entries as dayEntryIDs;\n                        - Store the value of DayEntryID field of the DayEntryStruct of the first entry as dayEntryID1;\n                        - Store the DayEntryStruct of the first entry as dayEntryStruct1.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends command GetDayEntry command with DayEntryID set to dayEntryID1.",
                    "expectation": "\n                     - Verify that the DUT response contains a GetDayEntry command;\n                        - Verify that DayEntry field is a DayEntryStruct equal to dayEntryStruct1.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends command GetDayEntry command with DayEntryID set to an uint32 value not equal any from dayEntryIDs.",
                    "expectation": "Verify that the DUT response contains status NOT_FOUND(0x8b).",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Test Event Clear",
                    "expectation": "Verify  DUT  responds  w/  status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                }
            ]
        },
        {
            "class_name": "TC_SETRF_2_3",
            "desc": "Primary Functionality with server as DUT. Check attributes updating with date changing",
            "function": "test_TC_SETRF_2_3",
            "path": "sdk/TC_SETRF_2_3",
            "pics": [
                "SETRF.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "DUT is commissioning to TH.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "Value has to be 1 (True).",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Test Event Attributes Value Set Test Event.",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - Store the value as currentDayEntryDateValue;\n                     - Define day of week based on currentDayEntryDateValue epoch-s value. Store the defined value as currentDayEntryDayofWeekValue with DayPatternDayOfWeekBitmap type.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - Store the value as currentDayValue;\n                     - Store Date field value as dateCurrentValue;\n                     - Store DayType field value as dayTypeCurrentValue;\n                     - Store DayEntryIDs field value as dayEntryIDsCurrentValue",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "If dayTypeCurrentValue equals 3 (Event), TH reads from the DUT the IndividualDays attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value that is a list of DayStruct entries with list length less or equal 50;\n                     - For each entry:\n                        - If Date field value equals dateCurrentValue, verify that Date field value is unique in the entries list, DayType field value equals dayTypeCurrentValue and DayEntryIDs field value equals dayEntryIDsCurrentValue.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "If dayTypeCurrentValue does NOT equal 3 (Event), TH reads from the DUT the CalendarPeriods attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value that is a list of CalendarPeriodStruct entries with list length in range 1 - 4;\n                     - Check the list in reverse order and store DayPatternIDs field value as dayPatternIDsCurrentValue for the first entity that fits the condition:\n                        - StartDate field value is less than currentDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH reads from the DUT the DayPatterns attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value that is a list of DayPatternStruct entries with list length less or equal 28;\n                     - For each entry:\n                        - If DayPatternID field value is included in dayPatternIDsCurrentValue and bitwise AND DaysOfWeek field value and currentDayEntryDayofWeekValue equals currentDayEntryDayofWeekValue, verify that DayEntryIDs field value equals dayEntryIDsCurrentValue.",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH reads from the DUT the CurrentTariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - Store the value as currentTariffComponentsValue;\n                     - For each entry store TariffComponentID field value in tariffComponentIDsCurrentValue list.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the TariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a list of TariffComponentStruct entries with list length in range 1-672;\n                     - For each entry:\n                        - If TariffComponentID equals any from tariffComponentIDsCurrentValue, save the entry value in tariffComponentsCurrentValue list;\n                        - Verify that tariffComponentsCurrentValue matches currentTariffComponentsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - Store the value as nextDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the NextDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - Store the value as nextDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Change Time Test Event.",
                    "expectation": "\n                     Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - The value does NOT match the currentDayEntryDateValue;\n                     - The value matches the nextDayEntryDateValue;\n                     - Store the value as currentDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - The value matches the currentDayValue;\n                     - Store the value as currentDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - The value does NOT match the nextDayEntryDateValue;\n                     - The value does NOT match currentDayEntryDateValue;\n                     - Store the value as nextDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the NextDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - The value does NOT match currentDayValue and matches the nextDayValue;\n                     - Store the value as nextDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Change Day Test Event.",
                    "expectation": "\n                     Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - The value does NOT match the currentDayEntryDateValue;\n                     - The value does NOT match the nextDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - The value does NOT match the currentDayValue;\n                     - The value matches nextDayValue;\n                     - Store the value as currentDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of epoch-s type;\n                     - The value does NOT match currentDayEntryDateValue;\n                     - The value does NOT match the nextDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the NextDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a value of DayStruct type;\n                     - The value does NOT match the nextDayValue;\n                     - The value does NOT match the currentDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Test Event Clear.",
                    "expectation": "\n                     Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                }
            ]
        },
        {
            "class_name": "TC_SETRF_3_1",
            "desc": "Subscription Report Verification with Server as DUT",
            "function": "test_TC_SETRF_3_1",
            "path": "sdk/TC_SETRF_3_1",
            "pics": [
                "SETRF.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "expectation": "DUT is commissioned to TH.",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Set up a subscription to the Commodity Tariff cluster attributes: MinIntervalFloor: 0, MaxIntervalCeiling: 10",
                    "expectation": "Subscription successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads from the DUT the TariffInfo attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of TariffInformationStruct type;\n                     - Store the value as tariffInfoValue.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH reads from the DUT the TariffUnit attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of TariffUnitEnum type;\n                     - Store the value as tariffUnitValue.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH reads from the DUT the StartDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of epoch-s type;\n                     - Store the value as startDateAttributeValue;",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads from the DUT the IndividualDays attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list  of  DayStruct  entries  with  list length less or equal 50;\n                     - Store the value as individualDaysValue.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH reads from the DUT the DayEntries attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list  of  DayEntryStruct  entries  with list length less or equal 672;\n                     - Store the value as dayEntriesValue.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads from the DUT the DayPatterns attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list of DayPatternStruct entries with list length less or equal 28;\n                     - Store the value as dayPatternsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH reads from the DUT the CalendarPeriods attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list of CalendarPeriodStruct entries with list length in range 1 - 4;\n                     - Store the value as calendarPeriodsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                          - Verify that the DUT response contains a null or a value of DayStruct type;\n                          - Store the value as currentDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads from the DUT the NextDay attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of DayStruct type;\n                     - Store the value as nextDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntry attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - Store the value as currentDayEntryValue.",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of epoch-s type;\n                     - Store the value as currentDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntry attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - Store the value as nextDayEntryValue.",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or an epoch-s value greater than currentDayEntryDateValue;\n                     - Store the value as nextDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH reads from the DUT the TariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a list of TariffComponentStruct entries with list length in range 1-672;\n                     - Store the value as tariffComponentsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH reads from the DUT the TariffPeriods attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a list of TariffPeriodStruct entries with list length in range 1-672;\n                     - Store the value as tariffPeriodsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH reads from the DUT the CurrentTariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - Store the value as currentTariffComponentsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                },
                {
                    "description": "TH reads from the DUT the NextTariffComponents attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - Store the value as nextTariffComponentsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "19"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationType attribute.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of DayEntryRandomizationTypeEnum. Value has to be between a range of 0 - 4.\n                     - Store the value as defaultRandomizationTypeValue.",
                    "is_commissioning": false,
                    "test_plan_number": "20"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationOffset attribute.",
                    "expectation": "\n                     - If defaultRandomizationTypeValue is null, Verify that the DUT response contains a null;\n                     - If defaultRandomizationTypeValue is 0x01 (Fixed), Verify that the DUT response contains an int16 value;\n                     - If defaultRandomizationTypeValue is 0x04 (RandomNegative), Verify that the DUT response contains an int16 value less or equal 0;\n                     - If defaultRandomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive), Verify that the DUT response contains an int16 value greater or equal 0.\n                     - Store the value as DefaultRandomizationOffsetValue.",
                    "is_commissioning": false,
                    "test_plan_number": "21"
                },
                {
                    "description": "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster.",
                    "expectation": "Value has to be 1 (True).",
                    "is_commissioning": false,
                    "test_plan_number": "22"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Attributes Value Set Test Event.",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "23"
                },
                {
                    "description": "TH awaits a ReportDataMessage from DUT containing a TariffInfo attribute with 10s timeout.",
                    "expectation": "\n                     - Verify that the DUT response contains a null or a value of TariffInformationStruct type;\n                        - Verify that TariffLabel field has type string with max length 128 or null;\n                        - Verify that ProviderName field has type string with max length 128 or null;\n                        - Verify that BlockMode field has type BlockModeEnum. Value has to be between a range of 0-2 or null;\n                            - Store the value as BlockModeValue;\n                     - Currency field:\n                        - Verify that it does NOT contain Currency field if SETRF.S.F00(PRICE) is False;\n                        - Verify that it contains Currency field if SETRF.S.F00(PRICE) is True;\n                        - Verify that it has type currency or null;\n                            - Verify that Currency field of Currency struct has type uint16 with value less or equal 999;\n                            - Verify that DecimalPoints field of Currency struct has type uint8;\n                    - The value does NOT match the tariffInfoValue;\n                    - Store the value as tariffInfoValue.",
                    "is_commissioning": false,
                    "test_plan_number": "24"
                },
                {
                    "description": "TH awaits a ReportDataMessage from DUT containing a TariffUnit attribute with 10s timeout.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of TariffUnitEnum type;\n                     - Value has to be between a range of 0 - 1;\n                     - The value does NOT match the tariffUnitValue.",
                    "is_commissioning": false,
                    "test_plan_number": "25"
                },
                {
                    "description": "TH reads from the DUT the StartDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of epoch-s type;\n                     - The value does NOT match the startDateAttributeValue;\n                     - Store the value as startDateAttributeValue.",
                    "is_commissioning": false,
                    "test_plan_number": "26"
                },
                {
                    "description": "TH reads from the DUT the IndividualDays attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayStruct entries with list length less or equal 50;\n                     - For each entry:\n                        - Date field:\n                                - Verify that Date field has epoch-s type;\n                                - Verify that the DayStruct in this list are arranged in increasing order by the value of Date field;\n                        - Verify that DayType field has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs of DayStruct field is a list of unique uint32 with list length in range 1 - 96;\n                        - If DayType equals 3 (Event), store DayEntryIDs value in dayEntryIDsEvents list;\n                    - The value does NOT match the individualDaysValue.",
                    "is_commissioning": false,
                    "test_plan_number": "27"
                },
                {
                    "description": "TH reads from the DUT the DayEntries attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayEntryStruct entries with list length less or equal 672;\n                     - The value does NOT match the dayEntriesValue;\n                     - For each entry\n                        - Verify that DayEntryID has a unique uint32 value;\n                        - Verify that StartTime field has uint16 type with value less or equal 1499;\n                            - Store the field value as startTimeFieldValue;\n                        - If DayEntryID is a value from dayEntryIDsEvents list, check that Duration field has a uint16 value less or equal 1500  - startTimeFieldValue;\n                        - RandomizationType field:\n                            - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                            - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                            - Store the field value randomizationTypeValue;\n                     - RandomizationType field:\n                        - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                        - Store the field value randomizationTypeValue;\n                     - RandomizationOffset field:\n                        - Verify that entry does NOT contain RandomizationOffset field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has int16 value;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "28"
                },
                {
                    "description": "TH reads from the DUT the DayPatterns attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of DayPatternStruct entries with list length less or equal 28;\n                     - For each entry:\n                        - Verify that DayPatternID field has uint32 type;\n                        - Verify that DaysOfWeek field has DayPatternDayOfWeekBitmap type;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96;\n                        - The value does NOT match the dayPatternsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "29"
                },
                {
                    "description": "TH reads from the DUT the CalendarPeriods attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of CalendarPeriodStruct entries with list length in range 1 - 4;\n                     - For each entry:\n                        - StartDate field:\n                            - Verify that StartDate field is null or has type epoch-s with value greater or equal startDateAttributeValue;\n                            - Verify that the calendar period items in this list are arranged in increasing order by the value of StartDate field;\n                            - Verify that if the startDateAttributeValue is null then the StartDate field is null on the first CalendarPeriodStruct item and is not null on any subsequent CalendarPeriodStruct items;\n                        - Verify that DayPatternIDs field is a list of uint32 with list length in range 1 - 7;\n                    - The value does NOT match the calendarPeriodsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "30"
                },
                {
                    "description": "TH reads from the DUT the CurrentDay attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayStruct type;\n                        - Verify that Date field of DayStruct has epoch-s type;\n                        - Verify that DayType field of DayStruct has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96;\n                     - The value does NOT match the currentDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "31"
                },
                {
                    "description": "TH reads from the DUT the NextDay attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayStruct type;\n                        - Verify that DayType field of DayStruct has DayTypeEnum type. Value has to be between a range of 0 - 3;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 96;\n                     - The value does NOT match the nextDayValue.",
                    "is_commissioning": false,
                    "test_plan_number": "32"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntry attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - Verify that the DUT response contains a null if tariffInfoValue equals null;\n                     - The value does NOT match the currentDayEntryValue.\n                     - Verify that DayEntryID field has uint32 type;\n                     - Verify that StartTime field has uint16 type with value less or equal 1499;\n                        - Store the field value as startTimeFieldValue;\n                     - RandomizationType field:\n                        - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                        - Store the field value randomizationTypeValue;\n                     - RandomizationOffset field:\n                        - Verify that entry does NOT contain RandomizationOffset field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has an int16 value;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "33"
                },
                {
                    "description": "TH reads from the DUT the CurrentDayEntryDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of epoch-s type;\n                     - The value does NOT match the currentDayEntryDateValue;\n                     - Store the value as currentDayEntryDateValue.",
                    "is_commissioning": false,
                    "test_plan_number": "34"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntry attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryStruct type;\n                     - The value does NOT match the nextDayEntryValue;\n                     - Verify that DayEntryID field has uint32 type;\n                     - Verify that StartTime field has uint16 type with value less or equal 1499;\n                        - Store the field value as startTimeFieldValue;\n                     - RandomizationType field:\n                        - Verify that entry does NOT contain RandomizationType field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and RandomizationType field is presented it has DayEntryRandomizationType type. Value has to be between a range of 0 - 4;\n                        - Store the field value randomizationTypeValue;\n                     - RandomizationOffset field:\n                        - Verify that entry does NOT contain RandomizationOffset field if SETRF.S.F05(RNDM) is False;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x01 (Fixed) and RandomizationOffset field is presented, it has an int16 value;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x04 (RandomNegative) and RandomizationOffset field is presented, it has an int16 value less or equal 0;\n                        - If SETRF.S.F05(RNDM) is True and randomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive) and RandomizationOffset field is presented, it has an int16 value greater or equal 0.",
                    "is_commissioning": false,
                    "test_plan_number": "35"
                },
                {
                    "description": "TH reads from the DUT the NextDayEntryDate attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or an epoch-s value greater than currentDayEntryDateValue;\n                     - The value does NOT match the nextDayEntryDateValue;",
                    "is_commissioning": false,
                    "test_plan_number": "36"
                },
                {
                    "description": "TH reads from the DUT the TariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a list of TariffComponentStruct entries with list length in range 1-672;\n                     - The value does NOT match the tariffComponentsValue;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                        - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                                - Verify that PowerThreshold field has power-mW type;\n                                - Verify that ApparentPowerThreshold field has power-mVA type;\n                                - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "37"
                },
                {
                    "description": "TH reads from the DUT the TariffPeriods attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a list of TariffPeriodStruct entries with list length in range 1-672;\n                     - For each entry:\n                        - Verify that Label field is null or has type string with max length 128;\n                        - Verify that DayEntryIDs field is a list of unique uint32 with list length in range 1 - 20;\n                        - Verify that TariffComponentIDs field is a list of uint32 with list length in range 1 - 20;\n                        - The value does NOT match the tariffPeriodsValue.",
                    "is_commissioning": false,
                    "test_plan_number": "38"
                },
                {
                    "description": "TH reads from the DUT the CurrentTariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - The value does NOT match the currentTariffComponentsValue;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                        - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                                - Verify that PowerThreshold field has power-mW type;\n                                - Verify that ApparentPowerThreshold field has power-mVA type;\n                                - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "39"
                },
                {
                    "description": "TH reads from the DUT the NextTariffComponents attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value that is a list of TariffComponentStruct entries with list length less or equal 20;\n                     - The value does NOT match the nextTariffComponentsValue;\n                     - For each entry:\n                        - Verify that TariffComponentID field has uint32 type;\n                        - Threshold field:\n                            - Verify that Threshold is null if BlockModeValue is 0 (NoBlock);\n                            - Verify that Threshold has type int64 or null if BlockModeValue is 1 (Combined) or 2 (Individual);\n                        - Verify that if Label field is presented it is null or has type string with max length 128;\n                        - Predicted field:\n                            - Verify that if Predicted field is presented it has type bool;\n                        - Verify that it has at least one of the fields: Price, FriendlyCredit, AuxiliaryLoad, PeakPeriod, PowerThreshold;\n                        - Price field:\n                            - Verify that the entry does NOT contain Price field if SETRF.S.F00(PRICE) is False;\n                            - If SETRF.S.F00(PRICE) is True and if Price field is presented it is null or has type TariffPriceStruct;\n                                - Verify that PriceType field has TariffPriceTypeEnum type. Value has to be between a range of 0 - 4;\n                                - Verify that if Price field is presented it has money type;\n                                - Verify that if PriceLevel field is presented it has int16 type;\n                        - FriendlyCredit field:\n                            - Verify that entry does NOT contain FriendlyCredit field if SETRF.S.F01(FCRED) is False;\n                            - If SETRF.S.F01(FCRED) is True and FriendlyCredit field is presented it has type bool;\n                        - AuxiliaryLoad field:\n                            - Verify that entry does NOT contain AuxiliaryLoad field if SETRF.S.F02(AUXLD) is False;\n                            - If SETRF.S.F02(AUXLD) is True and AuxiliaryLoad field is presented it has AuxiliaryLoadSwitchSettingsStruct type;\n                                - Verify that Number field has uint8 type;\n                                - Verify that RequiredState field has AuxiliaryLoadSettingEnum type. Value has to be between a range of 0 - 2;\n                        - PeakPeriod field:\n                            - Verify that entry does NOT contain PeakPeriod field if SETRF.S.F03(PEAKP) is False;\n                            - If SETRF.S.F03(PEAKP) is True and PeakPeriod field is presented it has PeakPeriodStruct type;\n                                - Verify that Severity field has PeakPeriodSeverityEnum type. Value has to be between a range of 0 - 3;\n                                - Verify that PeakPeriod field has uint16 type and value greater or equal 1;\n                        - PowerThreshold field:\n                            - Verify that entry does NOT contain PowerThreshold field if SETRF.S.F04(PWRTHLD) is False;\n                            - If SETRF.S.F04(PWRTHLD) is True and PowerThreshold field is presented it has PowerThresholdStruct type;\n                            - Verify that PowerThreshold field has power-mW type;\n                            - Verify that ApparentPowerThreshold field has power-mVA type;\n                            - Verify that PowerThresholdSource field has PowerThresholdSourceEnum type. Value has to be between a range of 0 - 2.",
                    "is_commissioning": false,
                    "test_plan_number": "40"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationType attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If tariffInfoValue does NOT equal null, Verify that the DUT response contains a null or a value of DayEntryRandomizationTypeEnum. Value has to be between a range of 0 - 4;\n                     - The value does NOT match the defaultRandomizationTypeValue;\n                     - Store the value as defaultRandomizationTypeValue.",
                    "is_commissioning": false,
                    "test_plan_number": "41"
                },
                {
                    "description": "TH reads from the DUT the DefaultRandomizationOffset attribute.",
                    "expectation": "\n                     - If tariffInfoValue equals null, Verify that the DUT response contains a null;\n                     - If defaultRandomizationTypeValue is null, Verify that the DUT response contains a null;\n                     - Verify that the DUT response contains a null if tariffInfoValue equals null;\n                     - If defaultRandomizationTypeValue is 0x01 (Fixed), Verify that the DUT response contains an int16 value;\n                     - If defaultRandomizationTypeValue is 0x04 (RandomNegative), Verify that the DUT response contains an int16 value less or equal 0;\n                     - If defaultRandomizationTypeValue is 0x00 (None), 0x02 (Random) or 0x03 (RandomPositive), Verify that the DUT response contains an int16 value greater or equal 0;\n                     - The value does NOT match the DefaultRandomizationOffsetValue.",
                    "is_commissioning": false,
                    "test_plan_number": "42"
                },
                {
                    "description": "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SETRF.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SETRF.TEST_EVENT_TRIGGER for Test Event Clear.",
                    "expectation": "\n                     Verify  DUT  responds  w/  status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": "43"
                },
                {
                    "description": "TH removes the subscription the Commodity Tariff cluster.",
                    "expectation": "\n                     Subscription successfully removed.",
                    "is_commissioning": false,
                    "test_plan_number": "44"
                }
            ]
        },
        {
            "class_name": "TC_SOIL_2_1",
            "desc": "[TC-SOIL-2.1] Attributes with DUT as Server",
            "function": "test_TC_SOIL_2_1",
            "path": "sdk/TC_SOIL_2_1",
            "pics": [
                "SOIL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read SoilMoistureMeasurementLimits attribute and saves the value as soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verify the MeasurementType field in soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Verify the MinMeasuredValue field in soil_moisture_limits and save the MinMeasuredValue field as min_bound",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Verify the MaxMeasuredValue field in soil_moisture_limits and save the MaxMeasuredValue field as max_bound",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Verify the number of entries in the AccuracyRanges in soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verify the RangeMin field of the AccuracyRanges entry in soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Verify the RangeMax field of the AccuracyRanges entry in soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Verify the PercentMax field of the AccuracyRanges entry in soil_moisture_limits",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Verify no other fields is present in the AccuracyRanges entry",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read SoilMoistureMeasuredValue attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_SOIL_2_2",
            "desc": "[TC-SOIL-2.2] Primary functionality with DUT as Server",
            "function": "test_TC_SOIL_2_2",
            "path": "sdk/TC_SOIL_2_2",
            "pics": [
                "SOIL.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription wildcard subscription, with MinIntervalFloor set to 0, MaxIntervalCeiling set to 30 and KeepSubscriptions set to false",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read SoilMoistureMeasurementLimits attribute, save the MinMeasuredValue field as min_bound and save the MaxMeasuredValue field as max_bound",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read SoilMoistureMeasuredValue attribute and save the value as measurement",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Perform action to change the moisture of the measured medium",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "After a few seconds, read SoilMoistureMeasuredValue attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Verify that the DUT sends at least one attribute report for SoilMoistureMeasuredValue",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_SwitchTests",
            "desc": "test_TC_SWTCH_2_2",
            "function": "test_TC_SWTCH_2_2",
            "path": "sdk/TC_SWTCH",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up subscription to all events and attributes of Switch cluster on the endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Operator sets switch to first position on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT.",
                    "expectation": "Verify that the value is 0.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Operator sets switch to second position (one) on the DUT",
                    "expectation": "Verify that the TH receives SwitchLatched event with NewPosition set to 1 from the DUT.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 1, and that a subscription report was received for that change.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If there are more than 2 positions, test subsequent positions of the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Operator sets switch to first position on the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Wait 10 seconds for event reports stable.Verify that last SwitchLatched event received is for NewPosition 0.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 0, and that a subscription report was received for that change.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                }
            ]
        },
        {
            "class_name": "TC_SwitchTests",
            "desc": "test_TC_SWTCH_2_3",
            "function": "test_TC_SWTCH_2_3",
            "path": "sdk/TC_SWTCH",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up subscription to all events of Switch cluster on the endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 0",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Operator operates switch (keep it pressed, and wait at least 5 seconds)",
                    "expectation": "Verify that the TH receives InitialPress event with NewPosition set to 1 on the DUT",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 1",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Operator releases switch on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If the DUT implements the MSR feature and does not implement the MSL feature, verify that the TH receives ShortRelease event with NewPosition set to 0 on the DUT",
                    "expectation": "Event received",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "If the DUT implements the MSR feature and the MSL feature, verify that the TH receives LongRelease event with NewPosition set to 0 on the DUT",
                    "expectation": "Event received",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "If the DUT implements the AS feature, verify that the TH does not receive ShortRelease event on the DUT",
                    "expectation": "No event received",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 0",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_SwitchTests",
            "desc": "[TC-SWTCH-2.4] Momentary Switch Long Press Verification",
            "function": "test_TC_SWTCH_2_4",
            "path": "sdk/TC_SWTCH",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up subscription to all events and attributes of Switch cluster on the endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the CurrentPosition attribute from the DUT",
                    "expectation": "Verify that the value is 0",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT, then release it",
                    "expectation": "\n                * TH expects receiving a subscription report of CurrentPosition 1, followed by a report of Current Position 0.\n                * TH expects receiving at InitialPress event with NewPosition = 1.\n                * if MSL feature is supported, TH expect receiving LongPress/LongRelease in that order.\n                * if MS & (!MSL & !AS & !MSR & !MSM) features present, TH expects receiving no further events for 10 seconds after release.\n                * if (MSR & !MSL) features present, TH expects receiving ShortRelease event.\n                ",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_SwitchTests",
            "desc": "test_TC_SWTCH_2_5",
            "function": "test_TC_SWTCH_2_5",
            "path": "sdk/TC_SWTCH",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription to all Switch cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Operate does not operate the switch on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                        ",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 1 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Operator repeat step 4a 2 times quickly",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 2 from the DUT\n                         * Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT +\n\n                         The events sequence SHALL follow the same sequence as above\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "Verify that the TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "If MultiPressMax == 2 (see 2c of TC-SWTCH-2.1), skip steps 6b .. 6c",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Operator repeat step 4a 3 times quickly",
                    "expectation": "\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * If MSR supported, Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 2 from the DUT\n                         * If MSR supported, Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 3 from the DUT\n                         * If MSR supported, Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT +\n\n                         The events sequence from the subscription SHALL follow the same sequence as expressed above, in the exact order of events specified.\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Operator does not operate switch on the DUT for 5 seconds",
                    "expectation": "Verify that the TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 3 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Set up subscription to all Switch cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "\n                         Operator operates switch in below sequence:\n                         1. Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT\n                         2. Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT immediately after the previous step\n                         3. Operator releases switch from the DUT\n                         ",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * If MSR supported, Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n\n                         * Verify that the TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 2 from the DUT\n                         * If MSR supported, verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH does not receive LongPress event from the DUT\n                         * Verify that the TH does not receive LongRelease event from the DUT\n\n                         The events sequence from the subscription SHALL follow the same sequence as expressed above, in the exact order of events specified.\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "\n                         Operator operates switch in below sequence:\n                         1. Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT\n                         2. Operator releases switch from the DUT\n                         3. Immediately after the previous step completes, Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT\n                         ",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives (one, not more than one) LongPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives LongRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * If MSR supported, verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH does not receive MultiPressOngoing event from the DUT\n\n                         The events sequence from the subscription SHALL follow the same sequence as expressed above, in the exact order of events specified.\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                }
            ]
        },
        {
            "class_name": "TC_SwitchTests",
            "desc": "test_TC_SWTCH_2_6",
            "function": "test_TC_SWTCH_2_6",
            "path": "sdk/TC_SWTCH",
            "pics": [],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up subscription to all Switch cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT",
                    "expectation": "\n\n                            * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                            * Verify that the TH does not receive ShortRelease event from the DUT\n                            ",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 1 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Operator repeat step 4a 2 times quickly",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress(one, not more than one) event with NewPosition set to 1 from the DUT\n                         * Verify that the TH does not receive ShortRelease event from the DUT\n                         * Verify that the TH does not receive MultiPressOngoing event from the DUT\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "Verify that the TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Operator repeat step 4a MultiPressMax + 1(see 2c of TC-SWTCH-2.1) times quickly",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress(one, not more than one) event with NewPosition set to 1 from the DUT\n                         * Verify that the TH does not receive ShortRelease event from the DUT\n                         * Verify that the TH does not receive MultiPressOngoing event from the DUT\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "Verify that the TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 0 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "If the switch cluster does not implement the MomentarySwitchLongPress (MSL) feature, skip the remaining steps",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Set up subscription to all Switch cluster events",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "\n                         Operator operates switch in below sequence:\n                         1. Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT\n                         2. Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT immediately after the previous step\n                         3. Operator releases switch from the DUT\n                         ",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress(one, not more than one) event with NewPosition set to 1 from the DUT\n                         * Verify that the TH does not receive ShortRelease event from the DUT\n                         * Verify that the TH does not receive MultiPressOngoing event from the DUT\n                         * Verify that the TH does not receive LongPress event from the DUT\n                         * Verify that the TH does not receive LongRelease event from the DUT\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "Operator does not operate switch on the DUT",
                    "expectation": "TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "\n                         Operator operates switch in below sequence:\n\n                         1. Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT\n                         2. Operator releases switch from the DUT\n                         3. Immediately after the previous step complete, Operator operates switch (press briefly) associated with position 1 on the DUT then release switch from DUT\n                         ",
                    "expectation": "\n\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives (one, not more than one) LongPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH receives LongRelease event with PreviousPosition set to 1 from the DUT\n                         * Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT\n                         * Verify that the TH does not receive MultiPressOngoing event from the DUT\n                         * Verify that the TH does not receive ShortRelease event from the DUT\n\n                         The events sequence from the subscription SHALL follow the same sequence as expressed above, in the exact order of events specified.\n                         ",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Operator does not operate switch on the DUTVerify that the TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 1 from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                }
            ]
        },
        {
            "class_name": "TC_TCCM_1_2",
            "desc": "[TC-TCCM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_TCCM_1_2",
            "path": "sdk/TC_TCCM_1_2",
            "pics": [
                "TCCM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SupportedModes attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the CurrentMode attribute.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_TCTL_2_3",
            "desc": "[TC-TCTL-2.3] Optional temperature level attributes with DUT as Server",
            "function": "test_TC_TCTL_2_3",
            "path": "sdk/TC_TCTL_2_3",
            "pics": [
                "TCTL.S",
                "TCTL.S.F01"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SelectedTemperatureLevel attribute",
                    "expectation": "Verify that the DUT response contains the value of _SelectedTemperatureLevel_ with a range of 0 to 31",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the SupportedTemperatureLevels attribute and verifies string lengths",
                    "expectation": "Verify that the DUT response contains a _SupportedTemperatureLevels_ list\n\n* List length has to be equal or less than 32 \n* Each temperature level should be a string\n* Length of each temperature level string has to be equal or less than 16\n",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_1",
            "desc": "test_TC_TIMESYNC_2_1",
            "function": "test_TC_TIMESYNC_2_1",
            "path": "sdk/TC_TIMESYNC_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_10",
            "desc": "test_TC_TIMESYNC_2_10",
            "function": "test_TC_TIMESYNC_2_10",
            "path": "sdk/TC_TIMESYNC_2_10",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_11",
            "desc": "test_TC_TIMESYNC_2_11",
            "function": "test_TC_TIMESYNC_2_11",
            "path": "sdk/TC_TIMESYNC_2_11",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_12",
            "desc": "test_TC_TIMESYNC_2_12",
            "function": "test_TC_TIMESYNC_2_12",
            "path": "sdk/TC_TIMESYNC_2_12",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_13",
            "desc": "test_TC_TIMESYNC_2_13",
            "function": "test_TC_TIMESYNC_2_13",
            "path": "sdk/TC_TIMESYNC_2_13",
            "pics": [
                "TIMESYNC.S.F03"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_2",
            "desc": "test_TC_TIMESYNC_2_2",
            "function": "test_TC_TIMESYNC_2_2",
            "path": "sdk/TC_TIMESYNC_2_2",
            "pics": [
                "TIMESYNC.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_4",
            "desc": "test_TC_TIMESYNC_2_4",
            "function": "test_TC_TIMESYNC_2_4",
            "path": "sdk/TC_TIMESYNC_2_4",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_5",
            "desc": "test_TC_TIMESYNC_2_5",
            "function": "test_TC_TIMESYNC_2_5",
            "path": "sdk/TC_TIMESYNC_2_5",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_6",
            "desc": "test_TC_TIMESYNC_2_6",
            "function": "test_TC_TIMESYNC_2_6",
            "path": "sdk/TC_TIMESYNC_2_6",
            "pics": [
                "TIMESYNC.S.F01"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_7",
            "desc": "test_TC_TIMESYNC_2_7",
            "function": "test_TC_TIMESYNC_2_7",
            "path": "sdk/TC_TIMESYNC_2_7",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_8",
            "desc": "test_TC_TIMESYNC_2_8",
            "function": "test_TC_TIMESYNC_2_8",
            "path": "sdk/TC_TIMESYNC_2_8",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_2_9",
            "desc": "test_TC_TIMESYNC_2_9",
            "function": "test_TC_TIMESYNC_2_9",
            "path": "sdk/TC_TIMESYNC_2_9",
            "pics": [
                "TIMESYNC.S.F00"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TIMESYNC_3_1",
            "desc": "test_TC_TIMESYNC_3_1",
            "function": "test_TC_TIMESYNC_3_1",
            "path": "sdk/TC_TIMESYNC_3_1",
            "pics": [
                "TIMESYNC.S"
            ],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_TLSCERT",
            "desc": "[TC-TLSCERT-3.1] ProvisionRootCertificate command basic insertion and modification",
            "function": "test_TC_TLSCERT_2_2",
            "path": "sdk/TC_TLSCERT",
            "pics": [
                "TLSCERT.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to CR1 if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1.1.1"
                },
                {
                    "description": "CR1 reads ProvisionedRootCertificates attribute using a fabric-filtered read",
                    "expectation": "A list of TLSCertStruct. Store all resulting CAID in caidToClean.",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.2"
                },
                {
                    "description": "CR1 sends RemoveRootCertificate command with CAID set to caidToClean[i] for all entries returned",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.3"
                },
                {
                    "description": "CR1 reads ProvisionedClientCertificates attribute using a fabric-filtered read",
                    "expectation": "A list of TLSClientCertificateDetailStruct. Store all resulting CCDID in ccdidToClean.",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.4"
                },
                {
                    "description": "CR1 sends RemoveClientCertificate command with CCDID set to ccdidToClean[i] for all entries returned.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.5"
                },
                {
                    "description": "TH opens a commissioning window on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1.2"
                },
                {
                    "description": "Create a new controller on a new fabric called CR2.\nCommission the new controller from CR1 as follows:\n\n- CR1 sends an ArmFailsafe command, followed by a CSRRequest command.\n- Generate credentials on CR2 using the returned CSR.\n- Save the RCAC as `rcac_CR2. Save the ICAC as `icac_CR2`. Save the NOC as `noc_CR2`. Save the IPK as ipk_CR2.\n-  CR1 sends the AddTrustedRootCertificate command with `rcac_CR2`- CR1 sends the AddNOC command with the fields set as follows:\n  * NOCValue:        `noc_CR2`\n  * ICACValue:       `icac_CR2`\n  * IPKValue:        `ipk_CR2`\n  * CaseAdminSubject: CR2 node ID\n  * AdminVendorId:    CR2 vendor ID\n- CR2 connects over CASE and sends the commissioning complete command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1.3"
                },
                {
                    "description": "Populate myRootCert[] with 3 distinct, valid, self-signed, DER-encoded x509 certificates",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "CR1 sends ProvisionRootCertificate command with null CAID and Certificate set to myRootCert[0]",
                    "expectation": "Verify returned TLSCAID value. Store the returned value as myCaid[0].",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "CR1 Reads ProvisionedRootCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[0]",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "CR1 Reads ProvisionedRootCertificates attribute using a fabric-filtered read",
                    "expectation": "Verify result a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate not populated (null)",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "CR2 Reads ProvisionedRootCertificates attribute using a fabric-filtered read",
                    "expectation": "Verify result is an empty list",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "CR1 sends ProvisionRootCertificate command with null CAID and Certificate set to myRootCert[0]",
                    "expectation": "Verify DUT responds w/ status 208",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "CR1 Reads ProvisionedRootCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[0]",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "CR1 sends FindRootCertificate command with null CAID",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[0]",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "CR1 sends ProvisionRootCertificate command with CAID set to myCaid[0] and Certificate set to myRootCert[1]",
                    "expectation": "Verify returned TLSCAID value equal to myCaid[0]",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "CR2 Reads ProvisionedRootCertificates attribute using a fabric-filtered read",
                    "expectation": "Verify result is an empty list",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "CR1 sends FindRootCertificate command with null CAID",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[1]",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "CR2 sends FindRootCertificate command with null CAID",
                    "expectation": "Verify DUT responds w/ status 139",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "CR2 sends ProvisionRootCertificate command with CAID set to myCaid[0] and Certificate set to myRootCert[2]",
                    "expectation": "Verify DUT responds w/ status 139",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "CR2 sends ProvisionRootCertificate command with null CAID and Certificate set to myRootCert[2]",
                    "expectation": "Verify returned TLSCAID value. Store the returned value as myCaid[1].",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "CR2 sends ProvisionRootCertificate command with CAID set to myCaid[1] and Certificate set to myRootCert[2]",
                    "expectation": "Verify DUT responds w/ status 208",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "CR1 Reads ProvisionedRootCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[1]",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "CR2 Reads ProvisionedRootCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[1] and Certificate equal to myRootCert[2]",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "CR1 sends FindRootCertificate command with null CAID",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[0] and Certificate equal to myRootCert[1]",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "CR2 sends FindRootCertificate command with null CAID",
                    "expectation": "Verify result is a list of TLSCertStruct with one entry. The entry should have CAID equal to myCaid[1] and Certificate equal to myRootCert[2]",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "CR1 sends RemoveRootCertificate command with CAID set to my_caid[0]",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to CR2.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 22
                }
            ]
        },
        {
            "class_name": "TC_TLSCERT",
            "desc": "[TC-TLSCERT-2.9] ProvisionClientCertificate command verification",
            "function": "test_TC_TLSCERT_2_9",
            "path": "sdk/TC_TLSCERT",
            "pics": [
                "TLSCERT.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT to CR1 if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1.1.1"
                },
                {
                    "description": "CR1 reads ProvisionedRootCertificates attribute using a fabric-filtered read",
                    "expectation": "A list of TLSCertStruct. Store all resulting CAID in caidToClean.",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.2"
                },
                {
                    "description": "CR1 sends RemoveRootCertificate command with CAID set to caidToClean[i] for all entries returned",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.3"
                },
                {
                    "description": "CR1 reads ProvisionedClientCertificates attribute using a fabric-filtered read",
                    "expectation": "A list of TLSClientCertificateDetailStruct. Store all resulting CCDID in ccdidToClean.",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.4"
                },
                {
                    "description": "CR1 sends RemoveClientCertificate command with CCDID set to ccdidToClean[i] for all entries returned.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": "1.1.5"
                },
                {
                    "description": "TH opens a commissioning window on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1.2"
                },
                {
                    "description": "Create a new controller on a new fabric called CR2.\nCommission the new controller from CR1 as follows:\n\n- CR1 sends an ArmFailsafe command, followed by a CSRRequest command.\n- Generate credentials on CR2 using the returned CSR.\n- Save the RCAC as `rcac_CR2. Save the ICAC as `icac_CR2`. Save the NOC as `noc_CR2`. Save the IPK as ipk_CR2.\n-  CR1 sends the AddTrustedRootCertificate command with `rcac_CR2`- CR1 sends the AddNOC command with the fields set as follows:\n  * NOCValue:        `noc_CR2`\n  * ICACValue:       `icac_CR2`\n  * IPKValue:        `ipk_CR2`\n  * CaseAdminSubject: CR2 node ID\n  * AdminVendorId:    CR2 vendor ID\n- CR2 connects over CASE and sends the commissioning complete command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "1.3"
                },
                {
                    "description": "Populate my_nonce[] with 4 distinct, random 32-octet values",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "CR1 sends TLSClientCSR command with Nonce set to my_nonce[i], for each i in [0..1]",
                    "expectation": "Verify the fields CCDID, CSR and Nonce with types TLSCCDID, octstr and octstr respectively. Store TLSCCDID in my_ccdid[i] and CSR in my_csr[i].",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "CR2 sends sends TLSClientCSR command with Nonce set to my_nonce[2]",
                    "expectation": "Verify the fields CCDID, CSR and Nonce with types TLSCCDID, octstr and octstr respectively. Store TLSCCDID in my_ccdid[2] and CSR in my_csr[2].",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Populate my_intermediate_certs_1 with 10 DER-encoded x509 certificates that form a certificate chain up to (but not including) a root",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Populate my_intermediate_certs_2 with 1 DER-encoded x509 certificates that form a certificate chain up to (but not including) a root",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Populate my_client_cert[] with 3 distinct, valid, DER-encoded x509 certificates using each respective public key from my_csr[i], signed by signed by [a root, my_intermediate_certs_1[0], my_intermediate_certs_2[0]]",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "CR1 sends ProvisionClientCertificate command with CCDID set to my_ccdid[0] and ClientCertificate set to my_client_cert[0]",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "CR1 sends ProvisionClientCertificate command with CCDID set to my_ccdid[1], ClientCertificate set to my_client_cert[1], and IntermediateCertificates set to my_intermediate_certs_1",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "CR2 sends ProvisionClientCertificate command with CCDID set to my_ccdid[2], ClientCertificate set to my_client_cert[2], and IntermediateCertificates set to my_intermediate_certs_2",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "CR1 reads ProvisionedClientCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with two entries corresponding to my_ccdid[0..1]. The ClientCertificate value should be set to my_client_cert[0..1] and IntermediateCertificates set to my_intermediate_certs_1 for my my_ccdid[1].",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "CR2 reads ProvisionedClientCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with one entry corresponding to my_ccdid[2]. The ClientCertificate value should be set to my_client_cert[2] and IntermediateCertificates set to my_intermediate_certs_2.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "CR1 reads ProvisionedClientCertificates attribute using a fabric-filtered read",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with two entries corresponding to my_ccdid[0..1]. The ClientCertificate and IntermediateCertificates values should not be populated (non-present).",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "CR1 sends FindClientCertificate command with null CCDID",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with two entries. The entries should correspond to my_client_cert[0..1]",
                    "is_commissioning": false,
                    "test_plan_number": 14
                },
                {
                    "description": "CR2 sends FindClientCertificate command with null CCDID",
                    "expectation": "Verify a  list of TLSClientCertificateDetailStruct with one entry. The entry should correspond to my_client_cert[2]",
                    "is_commissioning": false,
                    "test_plan_number": 15
                },
                {
                    "description": "CR1 sends TLSClientCSR command with CCDID set to my_ccdid[0] and Nonce set to my_nonce[3]",
                    "expectation": "the fields CCDID, CSR and Nonce with types TLSCCDID, octstr and octstr respectively. CCDID should equal my_ccdid[0]. The public key of the resulting CSR should be equal to the public key in my_csr[0]. NonceSignature should be a signature of my_nonce[3] using public key in CSR",
                    "is_commissioning": false,
                    "test_plan_number": 16
                },
                {
                    "description": "CR1 sends ProvisionClientCertificate command with CCDID set to my_ccdid[0] and ClientCertificateDetails set to my_client_cert[3]",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 17
                },
                {
                    "description": "CR1 reads ProvisionedClientCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with two entries. The entries should correspond to my_client_cert[0,3]",
                    "is_commissioning": false,
                    "test_plan_number": 18
                },
                {
                    "description": "CR2 reads ProvisionedClientCertificates attribute using a fabric-filtered read on Large Message-capable transport",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with one entry. The entry should correspond to my_client_cert[2]",
                    "is_commissioning": false,
                    "test_plan_number": 19
                },
                {
                    "description": "CR1 sends FindClientCertificate command with CCDID set to my_ccdid[0]",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with one entry. The entry should correspond to my_client_cert[3]",
                    "is_commissioning": false,
                    "test_plan_number": 20
                },
                {
                    "description": "CR2 sends FindClientCertificate command with CCDID set to my_ccdid[2]",
                    "expectation": "Verify a list of TLSClientCertificateDetailStruct with one entry. The entry should correspond to my_client_cert[2]",
                    "is_commissioning": false,
                    "test_plan_number": 21
                },
                {
                    "description": "CR1 sends ProvisionClientCertificate command with CCDID set to my_ccdid[0] and ClientCertificate set to my_client_cert[2]",
                    "expectation": "Verify DUT responds w/ status 208",
                    "is_commissioning": false,
                    "test_plan_number": 22
                },
                {
                    "description": "CR1 sends RemoveClientCertificate command with CCDID set to my_ccdid[i], for each i in [0..1]",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 23
                },
                {
                    "description": "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to CR2.",
                    "expectation": "Verify DUT responds w/ status SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 24
                }
            ]
        },
        {
            "class_name": "TC_TLSCLIENT_1_1",
            "desc": "[TC-TLSCLIENT-1.1] Primary functionality with DUT as Server",
            "function": "test_TC_TLSCLIENT_1_1",
            "path": "sdk/TC_TLSCLIENT_1_1",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Sends the ProvisionEndpoint command to the TlsClientNamanement cluster",
                    "expectation": "Verify that the DUT sends ProvisionEndpointResponse.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_TMP_2_1",
            "desc": "[TC-TMP-2.1] Attributes with Server as DUT",
            "function": "test_TC_TMP_2_1",
            "path": "sdk/TC_TMP_2_1",
            "pics": [
                "TMP.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set default bounds `min_bound` = -27315, `max_bound` = 32767",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads the MinMeasuredValue attribute from the DUT and saves as `min_measured_value`. If `min_measured_value` is not null, set `min_bound` to `min_measured_value`",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads the MaxMeasuredValue attribute from the DUT and saves as `max_measured_value`. If `max_measured_value` is not null, set `max_bound` to `max_measured_value",
                    "expectation": "Verify that `max_measured_value` is either null or an int16 where min_bound < `max_measured_value` \u2264 32767.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "If `min_measured_value` is not null, verify min measured value range",
                    "expectation": "Verify that -27315 \u2264 `min_measured_value` < `max_bound`",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads the MeasuredValue attribute from the DUT",
                    "expectation": "Verify that the DUT response contains either null or a int16 where `min_bound` \u2264 MeasuredValue \u2264 `max_bound`.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "If the tolerance attribute is supported, TH reads the Tolerance attribute from the DUT",
                    "expectation": "Verify that Tolerance is in the range of 0 to 2048",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_TSTAT_2_2",
            "desc": "42.2.2. [TC-TSTAT-2.2] Setpoint Test Cases with server as DUT",
            "function": "test_TC_TSTAT_2_2",
            "path": "sdk/TC_TSTAT_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "Test Harness Client reads  attribute OccupiedCoolingSetpoint from the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Test Harness Client then attempts Writes OccupiedCoolingSetpoint to a value below the MinCoolSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxCoolSetpointLimit to OccupiedCoolingSetpoint attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2c"
                },
                {
                    "description": "Test Harness Reads OccupiedHeatingSetpoint attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Test Harness Writes OccupiedHeatingSetpoint to value below the MinHeatSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxHeatSetpointLimit to OccupiedHeatingSetpoint attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3c"
                },
                {
                    "description": "Test Harness Reads UnoccupiedCoolingSetpoint attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "Test Harness Writes UnoccupiedCoolingSetpoint to value below the MinCoolSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxCoolSetpointLimit to UnoccupiedCoolingSetpoint attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4c"
                },
                {
                    "description": "Test Harness Reads UnoccupiedHeatingSetpoint attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "Test Harness Writes UnoccupiedHeatingSetpoint to value below the MinHeatSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxHeatSetpointLimit to UnoccupiedHeatingSetpoint attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "Test Harness Reads MinHeatSetpointLimit attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "Test Harness Writes a value back that is different but violates the deadband",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxHeatSetpointLimit to MinHeatSetpointLimit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "6c"
                },
                {
                    "description": "Test Harness Reads MaxHeatSetpointLimit attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "Test Harness Writes the limit of AbsMinHeatSetpointLimit to MinHeatSetpointLimit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "Test Harness Writes the limit of AbsMaxHeatSetpointLimit to MaxHeatSetpointLimit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "Test Harness Reads MinCoolSetpointLimit attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "Test Harness Writes MinCoolSetpointLimit to value below the AbsMinCoolSetpointLimit ",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "Test Harness Writes the limit of MaxCoolSetpointLimit to MinCoolSetpointLimit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "Test Harness Reads MaxCoolSetpointLimit attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Test Harness Writes MaxCoolSetpointLimit to value below the AbsMinCoolSetpointLimit ",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Test Harness Writes the limit of AbsMaxCoolSetpointLimit to MaxCoolSetpointLimit attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "Test Harness Writes (sets back) default value of MinHeatSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10a"
                },
                {
                    "description": "Test Harness Writes (sets back) default value of MinCoolSetpointLimit",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "10b"
                },
                {
                    "description": "Test Harness Reads MinSetpointDeadBand attribute from Server DUT and verifies that the value is within range",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11a"
                },
                {
                    "description": "Test Harness Writes the value below MinSetpointDeadBand",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11b"
                },
                {
                    "description": "Test Harness Writes the min limit of MinSetpointDeadBand",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "11c"
                },
                {
                    "description": "Test Harness Reads ControlSequenceOfOperation from Server DUT, if TSTAT.S.F01 is true",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "Sets OccupiedCoolingSetpoint to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "Sets OccupiedHeatingSetpoint to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "Test Harness Sends SetpointRaise Command Cool Only",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "Sets OccupiedCoolingSetpoint to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "Sets OccupiedCoolingSetpoint to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "Sets OccupiedCoolingSetpoint to default value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                }
            ]
        },
        {
            "class_name": "TC_TSTAT_4_2",
            "desc": "3.2.4 [TC-TSTAT-4-2] Test cases to read/write attributes and invoke commands for Preset feature with server as DUT",
            "function": "test_TC_TSTAT_4_2",
            "path": "sdk/TC_TSTAT_4_2",
            "pics": [
                "TSTAT.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH writes to the Presets attribute without calling the AtomicRequest command",
                    "expectation": " Verify that the write request returns INVALID_IN_STATE error since the client didn't send a request to edit the presets by calling AtomicRequest command.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH writes to the Presets attribute after calling the AtomicRequest begin command but doesn't call AtomicRequest commit",
                    "expectation": "Verify that the Presets attribute was not updated since AtomicRequest commit command was not called.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH writes to the Presets attribute after calling the AtomicRequest begin command and calls AtomicRequest commit",
                    "expectation": "Verify that the Presets attribute was updated with new presets.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH writes to the Presets attribute with a built-in preset removed",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH writes to the Presets attribute with a preset removed whose handle matches the value in the ActivePresetHandle attribute",
                    "expectation": "Verify that the AtomicRequest commit returned INVALID_IN_STATE (0xcb).",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH writes to the Presets attribute with a built-in preset modified to be not built-in",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH writes to the Presets attribute with a new preset having builtIn set to true",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH writes to the Presets attribute with a new preset having a preset handle that doesn't exist in the Presets attribute",
                    "expectation": "Verify that the AtomicRequest commit returned NOT_FOUND (0x8b).",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH writes to the Presets attribute with duplicate presets",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH writes to the Presets attribute with a non built-in preset modified to be built-in",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                },
                {
                    "description": "TH writes to the Presets attribute with a preset that doesn't support names in the PresetTypeFeatures bitmap but has a name",
                    "expectation": "Verify that the AtomicRequest commit returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "12"
                },
                {
                    "description": "TH writes to the Presets attribute but calls the AtomicRequest rollback command to cancel the edit request",
                    "expectation": "Verify that the edit request was rolled back",
                    "is_commissioning": false,
                    "test_plan_number": "13"
                },
                {
                    "description": "TH starts an atomic write, and TH2 attempts to open an atomic write before TH is complete",
                    "expectation": "Verify that the atomic request is rejected",
                    "is_commissioning": false,
                    "test_plan_number": "14"
                },
                {
                    "description": "TH starts an atomic write, and TH2 attempts to write to presets",
                    "expectation": "Verify that the write request is rejected",
                    "is_commissioning": false,
                    "test_plan_number": "15"
                },
                {
                    "description": "TH starts an atomic write, and before it's complete, TH2 removes TH's fabric; TH2 then opens an atomic write",
                    "expectation": "Verify that the atomic request is successful",
                    "is_commissioning": false,
                    "test_plan_number": "16"
                },
                {
                    "description": "TH writes to the Presets attribute with a preset that has a presetScenario not present in PresetTypes attribute",
                    "expectation": "Verify that the write request returned CONSTRAINT_ERROR (0x87).",
                    "is_commissioning": false,
                    "test_plan_number": "17"
                },
                {
                    "description": "TH writes to the Presets attribute such that the total number of presets is greater than the number of presets supported",
                    "expectation": "Verify that the write request returned RESOURCE_EXHAUSTED (0x89).",
                    "is_commissioning": false,
                    "test_plan_number": "18"
                }
            ]
        },
        {
            "class_name": "TC_TSTAT_4_3",
            "desc": "3.1.5 [TC-TSTAT-4-3] This test case verifies that the DUT can respond to Preset suggestion commands.",
            "function": "test_TC_TSTAT_4_3",
            "path": "sdk/TC_TSTAT_4_3",
            "pics": [
                "TSTAT.S",
                "TSTAT.S.F0a"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "TH reads the Presets attribute and saves it in a SupportedPresets variable.",
                    "expectation": "Verify that the read returned a list of presets with count >=2.",
                    "is_commissioning": false,
                    "test_plan_number": "2"
                },
                {
                    "description": "TH reads the ActivePresetHandle attribute. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns INVALID_IN_STATE.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends Time Synchronization command to DUT using a time source.",
                    "expectation": "Verify that TH and DUT are now time synchronized.",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH picks a random preset handle that does not match any entry in the Presets attribute and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp the ExpirationInMinutes is set to 1 minute.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns NOT_FOUND.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH reads the ActivePresetHandle attribute. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute. TH reads the CurrentThermostatSuggestion, the ThermostatSuggestionNotFollowingReason and the ActivePresetHandle attributes.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns an AddThermostatSuggestionResponse with a distinct value in the UniqueID field. Verify that the ThermostatSuggestions has one entry with the UniqueID field matching the UniqueID sent in the AddThermostatSuggestionResponse. Verify that the CurrentThermostatSuggestion attribute is set to the uniqueID, preset handle, the EffectiveTime, and the EffectiveTime plus ExpirationInMinutes (converted to seconds) passed in the AddThermostatSuggestion command. If the ThermostatSuggestionNotFollowingReason is set to null, verify that the ActivePresetHandle attribute is set to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH waits until the UTC timestamp specified in the ExpirationTime field in the CurrentThermostatSuggestion for the suggestion to expire.",
                    "expectation": "Verify that the entry with the UniqueID matching the UniqueID field in the CurrentThermostatSuggestion attribute is removed from the ThermostatSuggestions attribute and the CurrentThermostatSuggestion attribute is set to null.",
                    "is_commissioning": false,
                    "test_plan_number": "6b"
                },
                {
                    "description": "TH sets TemperatureSetpointHold to SetpointHoldOn and TemperatureSetpointHoldDuration to null. TH reads the ActivePresetHandle attribute. TH picks any preset handle from the \"SupportedPresets\" variable that does not match the ActivePresetHandle and and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute. TH reads the CurrentThermostatSuggestion, the ThermostatSuggestionNotFollowingReason and the ActivePresetHandle attributes.",
                    "expectation": "Verify that the TemperatureSetpointHold is set to SetpointHoldOn and TemperatureSetpointHoldDuration is set to null. Verify that the AddThermostatSuggestion command returns an AddThermostatSuggestionResponse with a distinct value in the UniqueID field. Verify that the ThermostatSuggestions has one entry with the UniqueID field matching the UniqueID sent in the AddThermostatSuggestionResponse. Verify that the CurrentThermostatSuggestion attribute is set to the uniqueID, preset handle, the EffectiveTime, and the EffectiveTime plus ExpirationInMinutes (converted to seconds) passed in the AddThermostatSuggestion command, the ThermostatSuggestionNotFollowingReason is set to OngoingHold and the ActivePresetHandle attribute is not updated to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sets TemperatureSetpointHold to SetpointHoldOff after 10 seconds. TH reads the CurrentThermostatSuggestion, the ThermostatSuggestionNotFollowingReason and the ActivePresetHandle attributes.",
                    "expectation": "Verify that the TemperatureSetpointHold is set to SetpointHoldOff. If the ThermostatSuggestionNotFollowingReason is set to null, verify that the ActivePresetHandle attribute is updated to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "7b"
                },
                {
                    "description": "TH waits until the UTC timestamp specified in the ExpirationTime field in the CurrentThermostatSuggestion for the suggestion to expire.",
                    "expectation": "Verify that the entry with the UniqueID matching the UniqueID field in the CurrentThermostatSuggestion attribute is removed from the ThermostatSuggestions attribute and the CurrentThermostatSuggestion attribute is set to null.",
                    "is_commissioning": false,
                    "test_plan_number": "7c"
                },
                {
                    "description": "TH reads the ActivePresetHandle attribute. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute. TH reads the CurrentThermostatSuggestion, the ThermostatSuggestionNotFollowingReason and the ActivePresetHandle attributes.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns an AddThermostatSuggestionResponse with a value in the UniqueID field. Verify that the ThermostatSuggestions has one entry with the UniqueID field matching the UniqueID sent in the AddThermostatSuggestionResponse. Verify that the CurrentThermostatSuggestion attribute is set to the uniqueID, preset handle, the EffectiveTime, and the EffectiveTime plus ExpirationInMinutes (converted to seconds) passed in the AddThermostatSuggestion command. If the ThermostatSuggestionNotFollowingReason is set to null, verify that the ActivePresetHandle attribute is set to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH calls the RemoveThermostatSuggestion command with the UniqueID field set to a value not matching the UniqueID field of the CurrentThermostatSuggestion attribute.",
                    "expectation": "Verify that RemoveThermostatSuggestion command returns NOT_FOUND.",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH calls the RemoveThermostatSuggestion command with the UniqueID field set to the UniqueID field of then CurrentThermostatSuggestion attribute.",
                    "expectation": "Verify that that RemoveThermostatSuggestion command returns SUCCESS, the entry with the relevant UniqueID is removed from the ThermostatSuggestions attribute and the CurrentThermostatSuggestion attribute is set to null.",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH reads the ActivePresetHandle attribute and saves it. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 2 minutes. TH calls the AddThermostatSuggestion command again with the saved ActivePresetHandle attribute value, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute.",
                    "expectation": "Verify that both the AddThermostatSuggestion command return a AddThermostatSuggestionResponse with distinct values in the UniqueID field. TH saves both the UniqueID values. Verify that the ThermostatSuggestions has two entries with the UniqueID field matching one of the UniqueID fields sent in the two AddThermostatSuggestionResponse(s). Verify that the CurrentThermostatSuggestion attribute is set to the uniqueID, preset handle, the EffectiveTime, and the EffectiveTime plus ExpirationInMinutes (converted to seconds) of one of the entries in ThermostatSuggestions. If the ThermostatSuggestionNotFollowingReason is set to null, verify that the ActivePresetHandle attribute is set to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "TH waits until the timestamp value specified in the earliest ExpirationTime field in the two entries in the ThermostatSuggestions attribute.",
                    "expectation": "Verify that the entry with the UniqueID that matches the earliest ExpirationTime in the two entries in the ThermostatSuggestions attribute is removed from the ThermostatSuggestions attribute and the CurrentThermostatSuggestion attribute is set to the remaining entry in the ThermostatSuggestions attribute. If the ThermostatSuggestionNotFollowingReason is set to null, verify that the ActivePresetHandle attribute is set to the PresetHandle field of the CurrentThermostatSuggestion attribute.",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "TH waits until the UTC timestamp specified in the ExpirationTime field in the CurrentThermostatSuggestion for the suggestion to expire.",
                    "expectation": "Verify that the entry with the UniqueID matching the UniqueID field in the CurrentThermostatSuggestion attribute is removed from the ThermostatSuggestions attribute and the CurrentThermostatSuggestion attribute is set to null.",
                    "is_commissioning": false,
                    "test_plan_number": "9c"
                },
                {
                    "description": "TH reads the ActivePresetHandle attribute. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp plus 25 hours and the ExpirationInMinutes is set to 30 minutes.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns INVALID_COMMAND.",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                },
                {
                    "description": "TH reads the MaxThermostatSuggestions attribute. TH picks a preset handle from an entry in the SupportedPresets that does not match the ActivePresetHandle and calls the AddThermostatSuggestion command with the preset handle, the EffectiveTime set to the current UTC timestamp and the ExpirationInMinutes is set to 1 minute for the number of times specified in the value of MaxThermostatSuggestions + 1.",
                    "expectation": "Verify that the AddThermostatSuggestion command returns SUCCESS and the ThermostatSuggestions attribute has one entry added to it for the first {MaxThermostatSuggestions} times. Verify that when the AddThermostatSuggestion command is called for the {MaxThermostatSuggestions + 1} time, the AddThermostatSuggestion command returns RESOURCE_EXHAUSTED.",
                    "is_commissioning": false,
                    "test_plan_number": "11"
                }
            ]
        },
        {
            "class_name": "TC_TestAttrAvail",
            "desc": "test_TC_TestAttrAvail",
            "function": "test_TC_TestAttrAvail",
            "path": "sdk/TC_TestAttrAvail",
            "pics": [],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Checking OperationalState attribute is available on endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Checking Operational Resume command is available on endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Checking Timezone feature is available on endpoint",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                }
            ]
        },
        {
            "class_name": "TestEventTrigger",
            "desc": "test_all_zeros_key",
            "function": "test_all_zeros_key",
            "path": "sdk/TC_TestEventTrigger",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TestEventTrigger",
            "desc": "test_correct_key_invalid_code",
            "function": "test_correct_key_invalid_code",
            "path": "sdk/TC_TestEventTrigger",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TestEventTrigger",
            "desc": "test_correct_key_valid_code",
            "function": "test_correct_key_valid_code",
            "path": "sdk/TC_TestEventTrigger",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TestEventTrigger",
            "desc": "test_incorrect_key",
            "function": "test_incorrect_key",
            "path": "sdk/TC_TestEventTrigger",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TestEventTrigger",
            "desc": "test_multiple_command_request_feature_present_if_needed",
            "function": "test_multiple_command_request_feature_present_if_needed",
            "path": "sdk/TC_TestEventTrigger",
            "pics": [],
            "steps": [
                {
                    "description": "Run entire test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                }
            ]
        },
        {
            "class_name": "TC_VALCC_2_1",
            "desc": "[TC-VALCC-2.1] Attributes with DUT as Server",
            "function": "test_TC_VALCC_2_1",
            "path": "sdk/TC_VALCC_2_1",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read attribute list to determine supported attributes",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read OpenDuration attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read DefaultOpenDuration attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read AutoCloseTime attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read RemainingDuration attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read CurrentState attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read TargetState attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read TargetLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read DefaultOpenLevel attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read ValveFault attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read LevelStep attribute, if supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                }
            ]
        },
        {
            "class_name": "TC_VALCC_3_1",
            "desc": "[TC-VALCC-3.1] Basic state functionality with DUT as Server",
            "function": "test_TC_VALCC_3_1",
            "path": "sdk/TC_VALCC_3_1",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if required",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription to all attributes on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send a close command to the DUT and wait until the CurrentState is closed",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send Open command",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Wait until TH receives the following reports (ordering does not matter): TargetState set to NULL, CurrentState set to Open",
                    "expectation": "Expected attribute reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read CurrentState and TargetState attribute",
                    "expectation": "CurrentState is Open, TargetState is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send Close command",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Wait until TH receives the following reports  (ordering does not matter): TargetState set to NULL, CurrentState set to Closed",
                    "expectation": "Expected attribute reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentState and TargetState attribute",
                    "expectation": "CurrentState is Closed, TargetState is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_VALCC_3_2",
            "desc": "[TC-VALCC-3.2] Basic level functionality with DUT as Server",
            "function": "test_TC_VALCC_3_2",
            "path": "sdk/TC_VALCC_3_2",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if required",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Set up a subscription to all attributes on the DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send a close command to the DUT and wait until the CurrentState is closed",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends command Open command with TargetLevel field set to 100 and the remaining fields not populated.",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00).",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Wait until TH receives the following reports (ordering does not matter): TargetState set to NULL, TargetLevel set to NULL, CurrentState set to Open, CurrentLevel set to 100",
                    "expectation": "Expected reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read CurrentState, CurrentLevel, TargetState and TargetLevel attributes",
                    "expectation": "CurrentState is Open, CurrentLevel is 100, TargetState is NULL, TargetLevel is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send Close command",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Wait until TH receives the following reports (ordering does not matter): TargetState set to NULL, TargetLevel set to NULL, CurrentState set to Closed, CurrentLevel set to 0",
                    "expectation": "Expected reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentState, CurrentLevel, TargetState and TargetLevel attributes",
                    "expectation": "CurrentState is Closed, CurrentLevel is 0, TargetState is NULL, TargetLevel is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_VALCC_3_3",
            "desc": "[TC-VALCC-3.3] DefaultOpenLevel functionality with DUT as Server",
            "function": "test_TC_VALCC_3_3",
            "path": "sdk/TC_VALCC_3_3",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if required",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "Verify that the DUT response contains the AttributeList attribute.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "If the DefaultOpenLevel is not supported, skip all remaining steps in this test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads from the DUT the DefaultOpenLevel attribute. Store the value as defaultOpenLevel.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Set up a subscription to all attributes on the DUT",
                    "expectation": "Subscription is successful",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send a close command to the DUT and wait until the CurrentState is reported as closed",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send Open command with no fields populated",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Wait until TH receives the following reports (ordering does not matter): TargetState set to NULL, TargetLevel set to NULL, CurrentState set to Open, CurrentLevel set to defaultOpenLevel",
                    "expectation": "Expected attribute reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentState and TargetState attribute",
                    "expectation": "CurrentState is Open, TargetState is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read CurrentLevel and TargetLevel attribute",
                    "expectation": "CurrentLevel is defaultOpenLevel, TargetLevel is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send Close command",
                    "expectation": "DUT returns SUCCESS",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Wait until TH receives the following reports (ordering does not matter): TargetState set to NULL, TargetLevel set to NULL, CurrentState set to Closed, CurrentLevel set to 0",
                    "expectation": "Expected attribute reports are received",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Read CurrentState and TargetState attribute",
                    "expectation": "CurrentState is Closed, TargetState is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read CurrentLevel and TargetLevel attribute",
                    "expectation": "CurrentLevel is 0, TargetLevel is NULL",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_VALCC_3_4",
            "desc": "[TC-VALCC-3.4] LevelStep behavior with DUT as Server",
            "function": "test_TC_VALCC_3_4",
            "path": "sdk/TC_VALCC_3_4",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read AttributeList attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Verify LevelStep is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read LevelStep attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Verify the supported level values using Open Command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_VALCC_4_1",
            "desc": "[TC-VALCC-4.1] Duration functionality with DUT as Server",
            "function": "test_TC_VALCC_4_1",
            "path": "sdk/TC_VALCC_4_1",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Send Open command with duration set to 60",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Wait for 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_VALCC_4_2",
            "desc": "[TC-VALCC-4.2] DefaultOpenDuration functionality with DUT as Server",
            "function": "test_TC_VALCC_4_2",
            "path": "sdk/TC_VALCC_4_2",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read DefaultOpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Write DefaultOpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Send Open command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Wait for 5 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Write DefaultOpenDuration back to original value",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                }
            ]
        },
        {
            "class_name": "TC_VALCC_4_3",
            "desc": "[TC-VALCC-4.3] AutoCloseTime functionality with (no synchronized time) DUT as Server",
            "function": "test_TC_VALCC_4_3",
            "path": "sdk/TC_VALCC_4_3",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Verify TimeSync feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read UTCTime attribute from Time Synchronization cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Verify UTCTime is null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Send Open command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_VALCC_4_4",
            "desc": "[TC-VALCC-4.4] AutoCloseTime functionality with (synchronized time) DUT as Server",
            "function": "test_TC_VALCC_4_4",
            "path": "sdk/TC_VALCC_4_4",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read FeatureMap attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "Verify TimeSync feature is supported",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "2b"
                },
                {
                    "description": "Read UTCTime attribute from Time Synchronization cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "Set UTCTime, if null",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3b"
                },
                {
                    "description": "Send Open command with duration set to 60",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read UTCTime attribute from TimeSync cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read DefaultOpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9a"
                },
                {
                    "description": "Write DefaultOpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "9b"
                },
                {
                    "description": "Send Open command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Read UTCTime attribute from TimeSync cluster",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Send Close command",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read AutoCloseTime attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_VALCC_4_5",
            "desc": "[TC-VALCC-4.5] Auto close functionality with DUT as Server",
            "function": "test_TC_VALCC_4_5",
            "path": "sdk/TC_VALCC_4_5",
            "pics": [
                "VALCC.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Send Open command with duration set to 5",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Wait 6 seconds",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read OpenDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read RemainingDuration attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentState attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_WASHERCTRL_2_1",
            "desc": "[TC-WASHERCTRL-2.1] Optional Spin attributes with DUT as Server",
            "function": "test_TC_WASHERCTRL_2_1",
            "path": "sdk/TC_WASHERCTRL_2_1",
            "pics": [
                "WASHERCTRL.S.F00",
                "WASHERCTRL.S.A0000",
                "WASHERCTRL.S.A0001"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads from the DUT the SpinSpeeds attribute",
                    "expectation": "Verify that the DUT response contains a list of strings. The maximum size of the list is 16.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads from the DUT the SpinSpeedCurrent attribute",
                    "expectation": "Verify that the DUT response contains a uint8 with value between 0 and numSpinSpeeds-1 inclusive.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH writes a supported SpinSpeedCurrent attribute that is a valid index into the listof spin speeds (0 to numSpinSpeeds - 1) and then read the SpinSpeedCurrent value",
                    "expectation": "Verify DUT responds w/ status SUCCESS(0x00) and the SpinSpeedCurrent value was set accordingly",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH writes an unsupported SpinSpeedCurrent attribute that is other than 0 to DUT",
                    "expectation": "Verify that the DUT response contains Status CONSTRAINT_ERROR response",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_WebRTCProvider_2_1",
            "desc": "[TC-{picsCode}-2.1] Validate delayed processing of SolicitOffer with {DUT_Server}",
            "function": "test_TC_WebRTCProvider_2_1",
            "path": "sdk/TC_WEBRTCP_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "DUT commissioned and streams allocated",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "Read CurrentSessions attribute => expect 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Send SolicitOffer with no Video or Audio StreamID => expect INVALID_COMMAND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send SolicitOffer with VideoStreamID that doesn't match AllocatedVideoStreams => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send SolicitOffer with AudioStreamID that doesn't match AllocatedAudioStreams => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Write SoftLivestreamPrivacyModeEnabled=true, send SolicitOffer => expect INVALID_IN_STATE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Write SoftLivestreamPrivacyModeEnabled=false, send SolicitOffer => expect DeferredOffer=TRUE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Read CurrentSessions attribute => expect 1 with valid session data",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_WebRTCProvider_2_2",
            "desc": "[TC-{picsCode}-2.2] Validate immediate processing of SolicitOffer with {DUT_Server}",
            "function": "test_TC_WebRTCProvider_2_2",
            "path": "sdk/TC_WEBRTCP_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "DUT commissioned and streams allocated",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "Read CurrentSessions attribute => expect 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Send SolicitOffer with no audio or video id => expect INVALID_COMMAND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send SolicitOffer with valid parameters => expect DeferredOffer=FALSE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Read CurrentSessions attribute => expect 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send EndSession with invalid WebRTCSessionID => expect NOT_FOUND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send EndSession with valid WebRTCSessionID => expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                }
            ]
        },
        {
            "class_name": "TC_WebRTCProvider_2_3",
            "desc": "[TC-{picsCode}-2.3] Validate setting an SDP Offer to start a new session with {DUT_Server}",
            "function": "test_TC_WebRTCProvider_2_3",
            "path": "sdk/TC_WEBRTCP_2_3",
            "pics": [],
            "steps": [
                {
                    "description": "Read CurrentSessions attribute => expect 0",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Send ProvideOffer with no audio or video id => expect INVALID_COMMAND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send ProvideOffer with valid parameters, audio and video stream IDs are Null => expect INVALID_IN_STATE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Allocate Audio and Video Streams",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send ProvideOffer with VideoStreamID that doesn't match AllocatedVideoStreams => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send ProvideOffer with AudioStreamID that doesn't match AllocatedAudioStreams => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Write SoftLivestreamPrivacyModeEnabled=true, send ProvideOffer => expect INVALID_IN_STATE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Write SoftLivestreamPrivacyModeEnabled=false, send valid ProvideOffer => expect ProvideOfferResponse",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Read CurrentSessions attribute => expect 1",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                }
            ]
        },
        {
            "class_name": "TC_WebRTCProvider_2_4",
            "desc": "[TC-{picsCode}-2.4] Validate setting an SDP Offer for an existing session with {DUT_Server}",
            "function": "test_TC_WebRTCProvider_2_4",
            "path": "sdk/TC_WEBRTCP_2_4",
            "pics": [],
            "steps": [
                {
                    "description": "Read CurrentSessions attribute => expect 0",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Allocate Audio and Video Streams",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send ProvideOffer with non\u2011existent WebRTCSessionID => expect NotFound error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send ProvideOffer with null session ID, valid video and audio stream IDs => expect ProvideOfferResponse",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Read CurrentSessions => expect 1 (save IDs)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Send ProvideOffer with (saved WebRTCSessionID + 1) => expect NotFound error",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send ProvideOffer with saved WebRTCSessionID (re\u2011offer) => expect ProvideOfferResponse with same IDs",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_WebRTCProvider_2_5",
            "desc": "[TC-{picsCode}-2.5] Validate interaction of SolicitOffer and stream allocation with {DUT_Server}",
            "function": "test_TC_WebRTCProvider_2_5",
            "path": "sdk/TC_WEBRTCP_2_5",
            "pics": [],
            "steps": [
                {
                    "description": "DUT commissioned ",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition"
                },
                {
                    "description": "Read CurrentSessions attribute => expect 0",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Send SolicitOffer with no audio or video id => expect INVALID_COMMAND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Send SolicitOffer with valid parameters, audio and video stream IDs are Null => expect INVALID_IN_STATE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Allocate Video Stream",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send SolicitOffer with valid parameters, audio stream ID is Null, video stream ID is for the allocated stream => expect INVALID_IN_STATE",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Allocate Audio Stream",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send SolicitOffer with valid parameters, audio stream ID is the allocated stream ID, video stream ID is invalid => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Send SolicitOffer with a supported stream usage that doesn't match the allocated streams, audio stream ID is the allocated stream ID, video stream ID is the allocated stream => expect SolictOfferResponse",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Send SolicitOffer with an unsupported stream usage, audio stream ID is the allocated stream ID, video stream ID is the allocated stream => expect DYNAMIC_CONSTRAINT_ERROR",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Send SolicitOffer with a supported stream usage that doesn't match the allocated streams, audio stream ID is null, video stream ID is null => expect SolicitOfferResponse and Ids that match the allocated streams",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send SolicitOffer with valid parameters and stream IDs => expect SolicitOfferResponse",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read CurrentSessions attribute => expect 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Send EndSession with invalid WebRTCSessionID => expect NOT_FOUND",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Send EndSession with valid WebRTCSessionID => expect SUCCESS",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_WebRTCRequestor_2_1",
            "desc": "[TC-{picsCode}-2.1] Validate sending an SDP Offer command to {DUT_Server} with an invalid session id",
            "function": "test_TC_WebRTCRequestor_2_1",
            "path": "sdk/TC_WEBRTCR_2_1",
            "pics": [],
            "steps": [
                {
                    "description": "Commission the {TH_Server} from TH",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Open the Commissioning Window of the {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Commission the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Activate the fault injection to modify the session ID of the WebRTC Offer command from {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send SolicitOffer command to the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_WebRTCRequestor_2_2",
            "desc": "[TC-{picsCode}-2.2] Validate sending an SDP Answer command to {DUT_Server} with an invalid session id",
            "function": "test_TC_WebRTCRequestor_2_2",
            "path": "sdk/TC_WEBRTCR_2_2",
            "pics": [],
            "steps": [
                {
                    "description": "Commission the {TH_Server} from TH",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Open the Commissioning Window of the {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Commission the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Activate the Fault injection to modify the session ID of the WebRTC Answer command from {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Send ProvideOffer command to the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                }
            ]
        },
        {
            "class_name": "TC_WebRTCRequestor_2_3",
            "desc": "[TC-{picsCode}-2.3] Validate sending an SDP Offer command to {DUT_Server} with an existing session id",
            "function": "test_TC_WebRTCRequestor_2_3",
            "path": "sdk/TC_WEBRTCR_2_3",
            "pics": [],
            "steps": [
                {
                    "description": "Commission the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Send SolicitOffer command to the {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_WebRTCRequestor_2_4",
            "desc": "[TC-{picsCode}-2.4] Validate sending an SDP Answer command to {DUT_Server} with an existing session id",
            "function": "test_TC_WebRTCRequestor_2_4",
            "path": "sdk/TC_WEBRTCR_2_4",
            "pics": [],
            "steps": [
                {
                    "description": "Commission the {TH_Server} from DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "Send ProvideOffer command to the {TH_Server}",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                }
            ]
        },
        {
            "class_name": "TC_WEBRTC_1_1",
            "desc": "[TC-WEBRTC-1.1] Validate that setting an SDP Offer successfully initiates a new WebRTC session",
            "function": "test_TC_WEBRTC_1_1",
            "path": "sdk/TC_WEBRTC_1_1",
            "pics": [
                "WEBRTCR.C",
                "WEBRTCP.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition-1"
                },
                {
                    "description": "Confirm no active WebRTC sessions exist in DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-2"
                },
                {
                    "description": "TH sends the ProvideOffer command with an SDP Offer and null WebRTCSessionID to the DUT.",
                    "expectation": "DUT responds with ProvideOfferResponse containing allocated WebRTCSessionID. TH saves the WebRTCSessionID to be used in a later step",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "DUT sends Answer command to the TH/WEBRTCR.",
                    "expectation": "Verify that Answer command contains the same WebRTCSessionID saved in step 1 and contain a non-empty SDP string.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the SUCCESS status code to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the ProvideICECandidates command with a its ICE candidates to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "DUT sends ICECandidates command to the TH/WEBRTCR.",
                    "expectation": "Verify that ICECandidates command contains the same WebRTCSessionID saved in step 1 and contain a non-empty ICE candidates.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH waits for 5 seconds",
                    "expectation": "Verify the WebRTC session has been successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the EndSession command with the WebRTCSessionID saved in step 1 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_WEBRTC_1_2",
            "desc": "[TC-WEBRTC-1.2] Validate that providing an existing WebRTC session ID with an SDP Offer successfully triggers the re-offer flow",
            "function": "test_TC_WEBRTC_1_2",
            "path": "sdk/TC_WEBRTC_1_2",
            "pics": [
                "WEBRTCR.C",
                "WEBRTCP.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition-1"
                },
                {
                    "description": "Confirm there is an active WebRTC sessions exist in DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-2"
                },
                {
                    "description": "TH Reads CurrentSessions attribute from WEBRTCP (DUT)",
                    "expectation": "Verify the number of WebRTCSession in the list is 1 and the WebRTCSessionID of the WebRTCSession also exists in the CurrentSessions attribute of local WEBRTCR. TH saves the WebRTCSessionID to be used in a later step.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH sends the ProvideOffer command with an SDP Offer with the WebRTCSessionID saved in step 1 to the DUT.",
                    "expectation": "DUT responds with ProvideOfferResponse containing the same WebRTCSessionID.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH waits up to 30 seconds for Answer command from the DUT.",
                    "expectation": "Verify that Answer command contains the same WebRTCSessionID saved in step 1 and contain a non-empty SDP string.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the SUCCESS status code to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the ProvideICECandidates command with a its ICE candidates to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH waits up to 30 seconds for ICECandidates command from the DUT.",
                    "expectation": "Verify that ICECandidates command contains the same WebRTCSessionID saved in step 1 and contain a non-empty ICE candidates.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH waits for 10 seconds.",
                    "expectation": "Verify the WebRTC session has been successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the EndSession command with the WebRTCSessionID saved in step 1 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_WEBRTC_1_3",
            "desc": "[TC-WEBRTC-1.3] Validate Deferred Offer Flow for Battery-Powered Camera in Standby Mode",
            "function": "test_TC_WEBRTC_1_3",
            "path": "sdk/TC_WEBRTC_1_3",
            "pics": [
                "WEBRTCR.C",
                "WEBRTCP.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition-1"
                },
                {
                    "description": "Confirm no active WebRTC sessions exist in DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-2"
                },
                {
                    "description": "TH sends the SolicitOffer command without ICEServers and ICETransportPolicy to the DUT.",
                    "expectation": "DUT responds with SolicitOfferResponse containing allocated WebRTCSessionID and the DeferredOffer parameter set to TRUE. TH saves the WebRTCSessionID to be used in a later step.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "TH waits up to 30 seconds for Offer command from the DUT.",
                    "expectation": "Verify that Offer command contains the same WebRTCSessionID saved in step 1 and contain a non-empty SDP string.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the SUCCESS status code to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the ProvideAnswer command with the WebRTCSessionID saved in step 1 and with ICE Candidates included in the SDP.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH waits up to 30 seconds for ICECandidates command from the DUT.",
                    "expectation": "Verify that ICECandidates command contains the same WebRTCSessionID saved in step 1 and contain a non-empty ICE candidates.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH waits for 10 seconds.",
                    "expectation": "Verify the WebRTC session has been successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the EndSession command with the WebRTCSessionID saved in step 1 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                }
            ]
        },
        {
            "class_name": "TC_WEBRTC_1_4",
            "desc": "[TC-WEBRTC-1.4] Validate Non-Deferred Offer Flow for Battery-Powered Camera in Standby Mode",
            "function": "test_TC_WEBRTC_1_4",
            "path": "sdk/TC_WEBRTC_1_4",
            "pics": [
                "WEBRTCR.C",
                "WEBRTCP.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition-1"
                },
                {
                    "description": "Confirm no active WebRTC sessions exist in DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-2"
                },
                {
                    "description": "TH sends the SolicitOffer command without ICEServers and ICETransportPolicy to the DUT.",
                    "expectation": "DUT responds with SolicitOfferResponse containing allocated WebRTCSessionID and the DeferredOffer parameter set to FALSE. TH saves the WebRTCSessionID to be used in a later step.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "DUT sends Offer command to TH/WEBRTCR.",
                    "expectation": "Verify that Offer command contains the same WebRTCSessionID saved in step 1 and contain a non-empty SDP string.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the SUCCESS status code to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the ProvideAnswer command with the WebRTCSessionID saved in step 1 and a SDP Offer to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH sends the ProvideICECandidates command with a its ICE candidates to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH waits up to 30 seconds for ICECandidates command from the DUT.",
                    "expectation": "Verify that ICECandidates command contains the same WebRTCSessionID saved in step 1 and contain a non-empty ICE candidates.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH waits for 10 seconds.",
                    "expectation": "Verify the WebRTC session has been successfully established.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH sends the EndSession command with the WebRTCSessionID saved in step 1 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_WEBRTC_1_6",
            "desc": " [TC-WEBRTC-1.6] Validate Two-Way-Talk Full-Duplex support in camera(DUT) - PROVISIONAL",
            "function": "test_TC_WEBRTC_1_6",
            "path": "sdk/TC_WEBRTC_1_6",
            "pics": [
                "WEBRTCR.C",
                "WEBRTCP.S",
                "AVSM.S"
            ],
            "steps": [
                {
                    "description": "Commission DUT if not already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "precondition-1"
                },
                {
                    "description": "Confirm no active WebRTC sessions exist in DUT",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-2"
                },
                {
                    "description": "Confirm DUT(Camera) supports Speaker feature AVSM.S.F04(SPKR)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "precondition-3"
                },
                {
                    "description": "TH reads TwoWayTalkSupport Attribute from AVSM cluster from DUT",
                    "expectation": "Verify DUT responds with status success and contains FullDuplex TwoWayTalkSupportTypeEnum value.",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "If DUT supports AVSM.S.F01(VDO) feature, TH sends the VideoStreamAllocate command with valid values of StreamUsage, VideoCodec, MinResolution, MaxResolution, MinBitRate, MaxBitRate, MinFrameRate, MaxFrameRate, KeyFrameInterval, WatermarkEnabled, OSDEnabled",
                    "expectation": "DUT responds with VideoStreamAllocateResponse command with a valid VideoStreamID. TH stores this VideoStreamID for later use.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH sends the AudioStreamAllocate command with valid values of StreamUsage, AudioCodec, ChannelCount, SampleRate, BitDepth, BitRate.",
                    "expectation": "DUT responds with AudioStreamAllocateResponse command with a valid AudioStreamID. TH stores this AudioStreamID for later use.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH sends the ProvideOffer command with an SDP Offer, null WebRTCSessionID, VideoStreamID and AudioStreamID saved in steps 2, 3 to the DUT.",
                    "expectation": "DUT responds with ProvideOfferResponse containing allocated WebRTCSessionID, VideoStreamID and AudioStreamID. TH saves the WebRTCSessionID to be used later.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "DUT sends Answer command to the TH/WEBRTCR.",
                    "expectation": "Verify that Answer command contains the same WebRTCSessionID saved in step 4 and contain a non-empty SDP string.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH sends the SUCCESS status code to the DUT.",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH sends the ProvideICECandidates command with a its ICE candidates to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "DUT sends ICECandidates command to the TH/WEBRTCR.",
                    "expectation": "Verify that ICECandidates command contains the same WebRTCSessionID saved in step 4 and contain a non-empty ICE candidates.",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "TH waits for 5 seconds",
                    "expectation": "Verify the WebRTC session has been successfully established. Verify TH is playing live audio received from DUT. Verify DUT is able to play the live audio in its speaker sent by TH. If DUT supports AVSM.S.F01(VDO) feature, Verify TH is playing live video received from DUT.",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "TH sends the EndSession command with the WebRTCSessionID saved in step 4 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "TH sends the VideoStreamDeallocate command if allocated, with the VideoStreamID saved in step 2 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "TH sends the AudioStreamDeallocate command with the AudioStreamID saved in step 3 to the DUT.",
                    "expectation": "DUT responds with SUCCESS status code.",
                    "is_commissioning": false,
                    "test_plan_number": 12
                }
            ]
        },
        {
            "class_name": "TC_WHM_1_2",
            "desc": "[TC-WHM-1.2] Cluster attributes with DUT as Server",
            "function": "test_TC_WHM_1_2",
            "path": "sdk/TC_WHM_1_2",
            "pics": [
                "WHM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the SupportedModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                }
            ]
        },
        {
            "class_name": "TC_WHM_2_1",
            "desc": "test_TC_WHM_2_1",
            "function": "test_TC_WHM_2_1",
            "path": "sdk/TC_WHM_2_1",
            "pics": [
                "WHM.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "Read the SupportedModes attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "Read the CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "Send ChangeToMode command with NewMode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "Manually put the device in a state from which it will FAIL to transition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "Read CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Send ChangeToMode command with NewMode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "Read CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                },
                {
                    "description": "Manually put the device in a state from which it will SUCCESSFULLY transition",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 9
                },
                {
                    "description": "Read CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 10
                },
                {
                    "description": "Send ChangeToMode command with NewMode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 11
                },
                {
                    "description": "Read CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 12
                },
                {
                    "description": "Send ChangeToMode command with NewMode set to an invalid mode",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 13
                },
                {
                    "description": "Read CurrentMode attribute",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 14
                }
            ]
        },
        {
            "class_name": "TC_ZONEMGMT_2_1",
            "desc": "[TC-ZONEMGMT-2.1] Attributes with Server as DUT",
            "function": "test_TC_ZONEMGMT_2_1",
            "path": "sdk/TC_ZONEMGMT_2_1",
            "pics": [
                "ZONEMGMT.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": 1
                },
                {
                    "description": "TH reads MaxUserDefinedZones attribute.",
                    "expectation": "If DUT supports UserDefined feature, verify that the DUT response contains a value greater than or equal to 5.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "TH reads MaxZones attribute.",
                    "expectation": "If DUT supports UserDefined feature, verify that the DUT response contains a value greater than or equal to MaxUserDefinedZones .",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "TH reads Zones attribute.",
                    "expectation": "Verify that the list has between a range of 0 to MaxZones.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "TH reads Triggers attribute.",
                    "expectation": "Verify that the list has between a range of 0 to MaxZones.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "TH reads SensitivityMax attribute.",
                    "expectation": "Verify that the DUT response contains a value has between a range of 2 to 10.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "TH reads Sensitivity attribute.",
                    "expectation": "Verify that the DUT response contains a value has between a range of 1 to SensitivityMax.",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "TH reads TwoDCartesianMax attribute.",
                    "expectation": "Verify that the DUT response contains value of SensorWidth - 1 and SensorHeight - 1 from the VideoSensorParams attribute (in Camera AV Stream Management Cluster).",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        },
        {
            "class_name": "TC_ZONEMGMT_2_2",
            "desc": "[TC-ZONEMGMT-2.2] Verify CreateTwoDCartesianZone and RemoveZone commands with Server as DUT",
            "function": "test_TC_ZONEMGMT_2_2",
            "path": "sdk/TC_ZONEMGMT_2_2",
            "pics": [
                "ZONEMGMT.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "If DUT supports TwoDCartesianZone and User defined zones, TH sends CreateTwoDCartesianZone command with",
                    "expectation": " valid parameters",
                    "is_commissioning": "Verify that the DUT response contains a new zoneId and the corresponding zone information matches.",
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends RemoveZone command with ZoneID set to the created ZoneID in step 2 ",
                    "expectation": "Verify that the DUT responds with a Success status code.",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH sends CreateTwoDCartesianZone command with valid non-duplicated Zone information _MaxUserDefinedZones_ + 1 times",
                    "expectation": "Verify that the DUT responds with a ResourceExhausted status code at the _MaxUserDefinedZones_ + 1 th command.",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH sends RemoveZone command for each ZoneID created in step 3 ",
                    "expectation": "Verify that the DUT responds with a Success status code.",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "TH sends CreateTwoDCartesianZone command with valid Zone information and ZoneUse set to Focus",
                    "expectation": "If DUT supports FocusZones verify that the DUT responds with a CreateTwoDCartesianZoneResponse command",
                    "is_commissioning": "Othersie DUT responds with ConstraintError status code",
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends CreateTwoDCartesianZone command with any X or Y value of zone vertices set to TwoDCartesianMax + 1",
                    "expectation": "Verify that the DUT responds with a DynamicConstraintError status code.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "TH sends the same CreateTwoDCartesianZone command with valid parameters 2 times",
                    "expectation": "Verify that the first DUT response contains a new zoneId and the second command returns AlreadyExists status code.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends the CreateTwoDCartesianZone command with the zone vertices forming a self-intersecting polygonal shape",
                    "expectation": "Verify that the DUT responds with a DynamicConstraintError status code.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads Zones attribute and sends RemoveZone command for all reviously created zones",
                    "expectation": "Verify that the DUT responds with a Success status code for each command.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                }
            ]
        },
        {
            "class_name": "TC_ZONEMGMT_2_3",
            "desc": "[TC-ZONEMGMT-2.3] Verify UpdateTwoDCartesianZone command with Server as DUT",
            "function": "test_TC_ZONEMGMT_2_3",
            "path": "sdk/TC_ZONEMGMT_2_3",
            "pics": [
                "ZONEMGMT.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "If DUT supports TwoDCartesianZone and User defined zones, TH sends CreateTwoDCartesianZone command with",
                    "expectation": " valid parameters",
                    "is_commissioning": "Verify that the DUT response contains a new zoneId and the corresponding zone information matches.",
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends UpdateTwoDCartesianZone command with ZoneID set to the created ZoneID in step 2 and zone field set to Zone1_Updated ",
                    "expectation": "Verify that the DUT responds with a Success status code and the updated zone information matches.",
                    "is_commissioning": false,
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH sends UpdateTwoDCartesianZone command with ZoneID that does not exist in Zones attribute",
                    "expectation": "Verify that the DUT responds with a NotFound status code",
                    "is_commissioning": false,
                    "test_plan_number": "3"
                },
                {
                    "description": "TH retrieves a zone whose ZoneSource is Mfg, if it exists and attempts to update that zone",
                    "expectation": "Verify that the DUT responds with a ConstraintError status code",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "TH sends UpdateTwoDCartesianZone command with any X or Y value of zone vertices set to TwoDCartesianMax + 1",
                    "expectation": "Verify that the DUT responds with a DynamicConstraintError status code.",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "If DUT supports TwoDCartesianZone and User defined zones, TH sends CreateTwoDCartesianZone command with",
                    "expectation": " new valid parameters",
                    "is_commissioning": "Verify that the DUT response contains a new zoneId and the corresponding zone information matches.",
                    "test_plan_number": "6"
                },
                {
                    "description": "TH sends the UpdateTwoDCartesianZone command with the same zoneID  as step 2a(ZoneID1) and zone vertices as  in step 6",
                    "expectation": "Verify that the DUT responds with an AlreadyExists status code.",
                    "is_commissioning": false,
                    "test_plan_number": "6a"
                },
                {
                    "description": "TH sends the UpdateTwoDCartesianZone command with the zone vertices forming a self-intersecting polygonal shape",
                    "expectation": "Verify that the DUT responds with a DynamicConstraintError status code.",
                    "is_commissioning": false,
                    "test_plan_number": "7"
                },
                {
                    "description": "TH reads Zones attribute and sends RemoveZone command for all reviously created zones",
                    "expectation": "Verify that the DUT responds with a Success status code for each command.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                }
            ]
        },
        {
            "class_name": "TC_ZONEMGMT_2_4",
            "desc": "[TC-ZONEMGMT-2.4] Verify CreateOrUpdateTrigger, RemoveTrigger and RemoveZone commands with Server as DUT",
            "function": "test_TC_ZONEMGMT_2_4",
            "path": "sdk/TC_ZONEMGMT_2_4",
            "pics": [
                "ZONEMGMT.S"
            ],
            "steps": [
                {
                    "description": "Commissioning, already done",
                    "expectation": "",
                    "is_commissioning": true,
                    "test_plan_number": "1"
                },
                {
                    "description": "If DUT supports TwoDCartesianZone and User defined zones, TH sends CreateTwoDCartesianZone command with",
                    "expectation": " valid parameters",
                    "is_commissioning": "Verify that the DUT response contains a new zoneId and the corresponding zone information matches.",
                    "test_plan_number": "2"
                },
                {
                    "description": "TH sends CreateOrUpdateTrigger command with a valid ZoneTriggerControlStruct and ZoneID set to the created ZoneID in step 2 ",
                    "expectation": "Verify that the DUT responds with a Success status code.",
                    "is_commissioning": "Verify that the new ZoneTrigger is added to the Triggers list",
                    "test_plan_number": "2a"
                },
                {
                    "description": "TH reads the Triggers attribute from DUT",
                    "expectation": "Verify that the response contains a list of ZoneTriggerControlStruct entries",
                    "is_commissioning": "Verify that the Trigger list contains the Trigger created in step 2a",
                    "test_plan_number": "2b"
                },
                {
                    "description": "Trigger the DUT to generate ZoneTriggered event",
                    "expectation": "Verify that the TH receives the ZoneTriggered event and the ZoneID matches one created in step 2",
                    "is_commissioning": "Verify that the reason is 0(Motion) and the event has priority set as INFO",
                    "test_plan_number": "3"
                },
                {
                    "description": "Prevent DUT from detecting motion for period > InitialDuration",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "3a"
                },
                {
                    "description": "DUT sends the ZoneStopped event",
                    "expectation": "Verify that the TH receives the ZoneStopped event and the ZoneID matches one created in step 2",
                    "is_commissioning": "Verify that the reason is 0(ActionStopped)",
                    "test_plan_number": "3b"
                },
                {
                    "description": "Repeat step 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4"
                },
                {
                    "description": "Trigger the DUT to generate another ZoneTriggered event to increment the TriggerDetectedDuration by the AugmentationDuration",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "4a"
                },
                {
                    "description": "DUT sends the ZoneStopped event",
                    "expectation": "Verify that the TH receives the ZoneStopped event after (InitialDuration + AugmentationDuration) and the ZoneID matches one in step 2",
                    "is_commissioning": "Verify that the reason is 0(ActionStopped)",
                    "test_plan_number": "4b"
                },
                {
                    "description": "Repeat step 3",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5"
                },
                {
                    "description": "Make the DUT keep detecting motion for a period > MaxDuration",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": "5a"
                },
                {
                    "description": "DUT sends the ZoneStopped event",
                    "expectation": "Verify that the TH receives the ZoneStopped event and the ZoneID matches one created in step 2",
                    "is_commissioning": "Verify that the reason is 1(Timeout)",
                    "test_plan_number": "5b"
                },
                {
                    "description": "Trigger the DUT to generate ZoneTriggered event during BlindDuration after ZoneStopped event was received",
                    "expectation": "Verify that the TH does not receive any ZoneTriggered event from DUT",
                    "is_commissioning": false,
                    "test_plan_number": "5c"
                },
                {
                    "description": "TH sends CreateOrUpdateTrigger command with a ZoneID that does not exist in the Zones attribute",
                    "expectation": "Verify that the DUT responds with a NotFound status code.",
                    "is_commissioning": false,
                    "test_plan_number": "6"
                },
                {
                    "description": "If DUT supports TwoDCartesianZone and User defined zones, TH sends CreateTwoDCartesianZone command with",
                    "expectation": "ZoneUse = Privacy and other valid parameters",
                    "is_commissioning": "Verify that the DUT response contains a new zoneId and the corresponding zone information matches.",
                    "test_plan_number": "7"
                },
                {
                    "description": "TH sends CreateOrUpdateTrigger command with a ZoneID of the Privacy Zone created in step 6",
                    "expectation": "Verify that the DUT responds with a ConstraintError status code.",
                    "is_commissioning": false,
                    "test_plan_number": "7a"
                },
                {
                    "description": "TH sends RemoveZone command with ZoneID set to the created ZoneID in step 2",
                    "expectation": "Verify that the DUT responds with a InvalidInState status code.",
                    "is_commissioning": false,
                    "test_plan_number": "8"
                },
                {
                    "description": "TH sends RemoveTrigger command with ZoneID that does not exist in Zones attribute",
                    "expectation": "Verify that the DUT responds with a NotFound status code",
                    "is_commissioning": false,
                    "test_plan_number": "8a"
                },
                {
                    "description": "TH sends RemoveTrigger command with ZoneID set to the created ZoneID in step 2",
                    "expectation": "Verify that the DUT responds with a Success status code.",
                    "is_commissioning": false,
                    "test_plan_number": "8b"
                },
                {
                    "description": "TH sends RemoveZone command with ZoneID set to the created ZoneID in step 2",
                    "expectation": "Verify that the DUT responds with a Success status code.",
                    "is_commissioning": false,
                    "test_plan_number": "8c"
                },
                {
                    "description": "TH retrieves a zone whose ZoneSource is Mfg, if it exists and attempts to remove that zone",
                    "expectation": "Verify that the DUT responds with a ConstraintError status code",
                    "is_commissioning": false,
                    "test_plan_number": "9"
                },
                {
                    "description": "TH sends RemoveZone command with ZoneID that does not exist in Zones attribute",
                    "expectation": "Verify that the DUT responds with a NotFound status code",
                    "is_commissioning": false,
                    "test_plan_number": "10"
                }
            ]
        },
        {
            "class_name": "TC_PICS_Checker",
            "desc": "test_TC_IDM_10_4",
            "function": "test_TC_IDM_10_4",
            "path": "sdk/TC_pics_checker",
            "pics": [],
            "steps": [
                {
                    "description": "TH performs a wildcard read of all attributes on the endpoint under test (done during test setup)",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 1
                },
                {
                    "description": "For every standard cluster: If the cluster is present on the endpoint, ensure the server-side PICS code for the cluster is present in the PICS file (e.g. OO.S for On/Off cluster).If the cluster is not present on the endpoint, ensure the cluster server PICS code is not present in the PICS file.",
                    "expectation": "PICS exactly match for server clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 2
                },
                {
                    "description": "For every standard cluster, for every attribute in the cluster:If the cluster is present on the endpoint and the attribute ID is present in the AttributeList global attribute within the cluster, ensure the server-side PICS code for the attribute is present in the PICS file (e.g. OO.S.A000 for On/Off cluster\u2019s OnOff attribute).Otherwise, ensure the attribute PICS code is NOT present in the PICS file.",
                    "expectation": "PICS exactly match for all attributes in all clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 3
                },
                {
                    "description": "For every cluster present in the spec, for every client \u2192 server command in the cluster: If the cluster is present on the endpoint and the command id is present in the accepted commands list, ensure the PICS code for the accepted command is present in the PICS file. Otherwise, ensure the accepted command PICS code is not present in the PICS file.",
                    "expectation": "PICS exactly match for all accepted commands in all clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 4
                },
                {
                    "description": "For every cluster present in the spec, for every server \u2192 client command in the cluster: If the cluster is present on the endpoint and the command id is present in the generated commands list, ensure the PICS code for the generated command is present in the PICS file. Otherwise, ensure the generated command PICS code is not present in the PICS file.",
                    "expectation": "PICS exactly match for all generated commands in all clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 5
                },
                {
                    "description": "For every cluster present in the spec, for every feature in the cluster: If the cluster is present on the endpoint and the feature is marked in the feature map, ensure the PICS code for the feature is present in the PICS file. Otherwise, ensure the feature PICS code is not present in the PICS file.",
                    "expectation": "PICS exactly match for all features in all clusters.",
                    "is_commissioning": false,
                    "test_plan_number": 6
                },
                {
                    "description": "Ensure that the PICS_SDK_CI_ONLY PICS does not appear in the PICS file",
                    "expectation": "CI PICS is not present",
                    "is_commissioning": false,
                    "test_plan_number": 7
                },
                {
                    "description": "If any of the checks failed, fail the test",
                    "expectation": "",
                    "is_commissioning": false,
                    "test_plan_number": 8
                }
            ]
        }
    ]
}